<!DOCTYPE html>
<!-- saved from url=(0102)https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-1-scenes-and-layers?module_item_id=8253611 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson Two, Part 1: Scenes and Layers: CPROGRM 713 A Su 18: C++ Programming: Advanced</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 1_ Scenes and Layers_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 1_ Scenes and Layers_files/common-5f496bd1d1.css">
  <script type="text/javascript" async="" src="./Lesson Two, Part 1_ Scenes and Layers_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-df7331dbc5.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Lesson Two, Part 1_ Scenes and Layers_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 1_ Scenes and Layers_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 1_ Scenes and Layers_files/custom.css">
<link rel="stylesheet" media="all" href="./Lesson Two, Part 1_ Scenes and Layers_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Lesson Two, Part 1_ Scenes and Layers_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Lesson Two, Part 1_ Scenes and Layers_files/vendor.bundle-5e1b2371d9.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/appBootstrap.bundle-d28bad749f.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/common.bundle-db82690f34.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/wiki_page_show.bundle-ea33dc7710.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1205169 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-1-scenes-and-layers?module_item_id=8253611#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Lesson Two, Part 1_ Scenes and Layers_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-1-scenes-and-layers?module_item_id=8253611#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Lesson Two, Part 1_ Scenes and Layers_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169"><span class="ellipsible">CPROGRM 713 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson Two, Part 1: Scenes and Layers</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Summer 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1205169" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/announcements" title="Announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/external_tools/63603" title="Info &amp; Help" class="context_external_tool_63603" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson Two, Part 1: Scenes and Layers</h1>
  
    <div class="actionBox">
<h6>Required Reading</h6>
<p><i>The C++ Standard Library<strong>&nbsp;</strong>2nd edition: </i>Chapter 7 (STL Containers)</p>
</div>
<p>In this lesson, you will provide support for two new concepts: scenes and layers. The Scene class will help you think about the collection of vector graphics that are used to produce an image, whereas the Layer class will help you work with complex scenes by grouping related graphics. Both these concepts are very simple, but can make a big difference for the graphic designers using your product.</p>
<h2>Lesson Objective</h2>
<p>By the end of this lesson, you will be able to implement and test the Scene and Layer classes.</p>
<h2>Scenes</h2>
<p>Although we used the term <span class="italics">image</span> in the last lesson to refer to the whole of a group of vector graphics, "image" implies a lack of structure. When a group of vector graphics is drawn onto an unstructured surface or represented in any way, the group can be called an image. But what can we call the structure itself, not the representation of it? For this, we'll use the term <span class="keyterm">scene</span> because it describes a collection of objects and their orientation to each other. In a scene, you think of all sorts of objects arranged to create an image, not just the image itself. A scene also gives a sense that you can move the objects around, which the user can, in fact, do while still working with the structured collection. There also can be different images, perhaps, made of the same scene. The scene, in a pure sense, is merely the collection of graphics and their relations to each other, whereas the image might be able to have options set on it, such as the quality of rendering (whether high or low detail).</p>
<div class="keytermBox">
<h6>Key Terms</h6>
<ul>
<li>scene</li>
<li>layer</li>
<li>locking</li>
</ul>
</div>
<p>When we begin to think about a collection of vector graphics instead of just a single vector graphic, an issue of ordering arises. If two vector graphics intersect, which is on top? Suddenly, things become quasi three-dimensional. This introduces some potential complexities. But before we delve into resolving these, let's take a look at a concept that we'll introduce for the graphic designer's convenience.</p>
<h2>Layers</h2>
<p>A <span class="keyterm">layer</span> is a collection of related graphics that can be referred to as a whole. Unlike a graphic, a layer has no width and height, because it always takes the size of the scene itself. In this sense, it might be thought of as a non-visual component. As an example, the sky, mountains, and houses layers below compose the final scene in figure 2.1-D.</p>
<p class="title"><span class="bold">Figure 2.1-A</span>—Sky Layer</p>
<p><img src="./Lesson Two, Part 1_ Scenes and Layers_files/CPP713s02_01.gif" alt="sky layer" width="400" height="200" data-api-returntype="File" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698286" style="max-width: 962px;"></p>
<p class="title"><span class="bold">Figure 2.1-B</span>—Mountains Layer</p>
<p><img src="./Lesson Two, Part 1_ Scenes and Layers_files/CPP713s02_02.gif" alt="mountains layer" width="400" height="200" data-api-returntype="File" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698264" style="max-width: 962px;"></p>
<p class="title"><span class="bold">Figure 2.1-C</span>—Houses Layer</p>
<p><img src="./Lesson Two, Part 1_ Scenes and Layers_files/CPP713s02_03.gif" alt="houses layer" width="400" height="200" data-api-returntype="File" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698244" style="max-width: 962px;"></p>
<p class="title"><span class="bold">Figure 2.1-D</span>—Entire Scene</p>
<p><img src="./Lesson Two, Part 1_ Scenes and Layers_files/CPP713s02_04.gif" alt="entire scene" width="400" height="200" data-api-returntype="File" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698263" style="max-width: 962px;"></p>
<p>The concept of a layer is not paramount or necessary from a features perspective. It won't change what can actually be created with our framework; but it will greatly enhance the graphic designer's ability to work with complex scenes. The primary features of a layer in most graphics (vector and bitmap) applications are the ability to disable modification (called <span class="keyterm">locking</span>) and to hide related portions of a scene. In our previous example, we might want to lock the mountains layer while working on the houses layer so—when trying to select or modify portions of the houses that overlap mountains—we don't accidentally modify the mountains. It also might be convenient when working on the sky layer to completely hide the mountains and houses layers, which might obstruct editing of certain portions or distract the graphic designer from considering the sky as a whole.</p>
<p>These examples help us to understand the future, but in the present we don't support drawing or selecting (selecting would be a client concern in any case). The benefit of introducing layers into our framework <span class="bold">now</span> will only be for organizational purposes and, of course, to make sure that we keep layers in mind throughout the development of the framework.</p>
<h2>Relative Placement and Ordering of Graphics</h2>
<p>Earlier we said that we can think of the scene as <span class="bold">the vector graphics and their relative orientation</span>. An example might help explain what we mean by "relative orientation" (which, in our two-dimensional world, we can just call "relative placement"). If you have a scene composed of a smiley-face graphic, a square graphic, and a triangle graphic, you think about each of these graphics as its own entity. A square is simply a square—you can think about it as the same thing no matter where it is placed in the scene. For this reason, it makes little sense to define the square's points as relative to the scene's upper left corner. Instead, the square's points can be described as relative to its own upper left.</p>
<p>This means that our <code>Layer</code> class will have to account for the placement of the graphics. Rather than just having a collection of graphics, it will need a collection of graphics <span class="bold">and</span> their respective placement. A primitive solution might be to just store a pair of the two related concepts. We could do this using the C++ standard library like so:</p>
<p><code>using PlacedGraphicCollection = std::list&lt;std::pair&lt;Point, HVectorGraphic&gt;&gt;;</code></p>
<div class="infoBox">
<p>Note that the "H" in "HVectorGraphic" stands for "Handle" as covered in <span class="italics">C++</span>: <span class="italics">Intermediate</span> and in the section on naming at the end of this lesson.</p>
</div>
<p>Of course, this will get a bit ungainly as we work with it. If we create a class called <code>PlacedGraphic</code> rather than just letting the idea pervade through the system (and remain second-class—you'll learn more about this idea later in this lesson), we can make our code clearer and terser while isolating the code that deals with placing graphics to one location.</p>
<p>For now, we have little to provide in the placed graphic besides accessors to the graphic and placement point; later, however, we will add a <code>draw </code>method that will isolate the placement issues that occur during drawing. Taking this into account gives us a <code>PlacedGraphic</code> class as in example 2.1 below.</p>
<table border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.1</th>
</tr>
<tr>
<td>
<pre><code>class PlacedGraphic {
	public:
		void setPlacementPoint (Point const&amp; placement);
		Point const&amp; getPlacementPoint () const;

		void setGraphic (HVectorGraphic const&amp; graphic);
		HVectorGraphic const&amp; getGraphic () const;
		
	private:
		Point placementPoint;
		HVectorGraphic graphic;
};</code></pre>
</td>
</tr>
</tbody>
</table>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>z-layering</li>
</ul>
</div>
<p>Of course, there's more to placement than <code>x</code> and <code>y</code>. Recall from the previous section that we need some sense of ordering on the graphics to allow one graphic to rest on top of another. A traditional means of supporting ordering in this quasi-third dimension is to introduce the idea of <span class="keyterm"><code>z</code>-layering</span>. With <code>z</code>-layering, a <code>z</code> component is introduced into each graphic (not each point). The graphics are drawn in order from the farthest <code>z</code> value to the closest (what that means numbers-wise varies by implementation).</p>
<p>Although this might be the de facto standard, and it might sound fairly reasonable, this is actually far more complex then just having the graphic's order in a list determine its drawing order. If we went the route of a <code>z</code> component, we'd have to decide on a coordinate system and ensure that no two objects share the same <code>z</code>-layer. This would not only introduce a lot of complexity and potential new exceptions, but also would probably be less efficient than our alternative. There's a long list of reasons why <code>z</code>-layering doesn't make much sense for our particular system. This course will spare you the exercise of going down the wrong path, but it is important that you understand at least one essential reason to avoid the <code>z</code>-layering: the user has no concept of <code>z</code>-layer in the application.</p>
<p>Users don't think in terms of numbered layers; they refer to things relatively. If you've used even the basic drawing tools provided by some word processors, you might recognize this fact. You choose to bring objects to the front, send to the back, move up one, down one—but never do you refer to specific layer numbers, which would be quite hard to maintain and probably only cause confusion to the user.</p>
<p>Relative ordering is a far more natural approach than <code>z</code>-layering; it corresponds to the loose layering we do in the real world with sheets of paper (which are flat, like our graphics, but still reside in three dimensions). Thinking of the layered graphics as a sequential list makes it impossible to have two that reside at the same level, and it makes it very easy to say "move this graphic up," or to insert a new graphic in a specific spot without thinking about all the <code>z</code> components that have to be changed.</p>
<h2>Understanding Collections and Iterators in the C++ Standard Library</h2>
<p>If our layer class (and via implication, our scene class as well) should be implemented via a sequential list, we must know which implementation of a sequential list to choose. In the C++ standard library, we have three, each with a different interface and even different behavior on the methods that are common among them. Choosing which to use, then, is not always completely straightforward; and, unfortunately, to use them, you have to be sentient of each collection's implementation, not just their interface. Before we get deeper into how to choose which sequential list we'll use, let's step back a minute and look at collections as a whole. We'll look at collections in the C++ Standard Library, but also compare them to the ways other languages you know (such as UML) address collections of objects.</p>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>collections</li>
</ul>
</div>
<p><span class="keyterm">Collections</span> are generally provided by a standard library or in a language itself. For this reason, you'll rarely to need to design or implement collections from the ground up—unless you work for the company implementing the language or standard library, or you have extremely specialized needs. Even the most primitive of languages usually provide simple arrays as a form of maintaining collections of objects. Though there are some procedural languages that do not provide anything above and beyond an array, most object-oriented languages provide more powerful collections.</p>
<p>C++ provides most collections in its library, rather than its language. The sole exception to this is the array, which has direct language support. This is somewhat inconsistent: what makes an array extraordinary? If anything, arrays are not used very often in comparison to the C++ standard library's list or other standard library collections. Arrays are actually discouraged in usage by most C++ texts, yet they're the only collection to get the simplified semantics of language support.</p>
<p>Arrays are not extraordinary. They were provided for backwards compatibility—to work with the glut of code that used arrays, and will continue to use them—and for supposed tweaking of memory usage and performance (though still here, vector purports to outperform "manual" use of arrays in many cases). The designers of C++ and its library work from a consistent, minimalist bias that preaches no new language features and minimal library support. C++ generally prefers not to even introduce new keywords where possible. This is why the "virtual" and "static" keywords can both mean such a variety of things.</p>
<p>In contrast to C++'s decision to avoid giving language support to collections (beyond the primitive array), UML makes collections of objects a fundamental language construct. This language construct, which uses the idea of multiplicities, is more flexible than traditional collections because it allows us to abstractly specify a range of possible objects—leaving out the unnecessary detail of how this range will be implemented.</p>
<p>As should now be familiar to you in your knowledge of UML, the <code>ACompositeElement</code> class shown in fig. 2.2 below might have any number of children, as indicated by the asterisk. This is much more natural, effective, and illustrative of a relationship than showing an attribute of type <code>list&lt;IMarkupLanguageElement&gt;</code> in the class.</p>
<p class="title"><span class="bold">Figure 2.2</span>—ACompositeElement Class</p>
<p><img src="./Lesson Two, Part 1_ Scenes and Layers_files/CPP713s02_05.gif" alt="diagram of ACompositeElement class" width="450" height="305" data-api-returntype="File" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698268" style="max-width: 962px;"></p>
<p>It's important that you recognize what a collection is, in a pure sense, and not get too distracted by the many choices C++ provides you in collection implementations. Remember that for many of the collections in the C++ Standard Library, most of what varies is implementation, not interface.</p>
<p>The interesting thing about most collections is that their interface is not only often self-evident, but also not the primary focus when we are working with them. Instead, their elements are usually the focus. This is why this course and newer texts often refer to <span class="italics">collections</span> rather than <span class="italics">containers.</span> "COLLECTION" stresses elements rather than where they reside or how their residence is implemented. Rather than focusing on the thing that keeps the collection together, it's better to focus on the elements themselves.</p>
<div class="infoBox">
<p><span class="keyterm">Synergy</span> is an important concept that you may not be aware of. Synergy occurs when something has worth in its whole more than the sum of its parts. The example of text should be illustrative of this.</p>
</div>
<p>The exception to the rule of focusing on elements is when the collection has a synergy beyond the sum of its elements. For example, text has more value than the combination of its individual characters. This brings us to our second reason for not using "container" as a term: "container" is an overly-generic word. Any object that has even one attribute can be viewed as a container of a sort. In the few cases where we want to focus on the object holding a series of elements, such as a collection of characters, we can usually use a better term, one that is more representative of this synergy: in this case, "text." There are several common collections that have some form of synergy, including strings, stacks, queues, and maps. In these cases, we might care equally (or more so) about the object that holds the elements as the elements themselves.</p>
<h2>Forcing Knowledge of Data Structures</h2>
<p>Based on the conversation above, you might think that collections are just the sort of feature that should be in the language, rather than the library. What does C++ provide by keeping collections in the library and allowing developers to explicitly choose an implementation?</p>
<p>Your first answer might be that this allows developers to pick the proper collection for their particular efficiency needs. But putting the collection in the language, rather than the library, would only simplify this process. Contemporary compilers perform many optimizations and generally allow a great deal of configurability (such as whether to optimize for speed or for size). It would certainly not be difficult for compilers to analyze the usage of a collection (for example, whether insertion took place mostly at the beginning or mostly in the middle) and choose which implementation to use based on that and whatever options the developer had set (such as optimize for size). Note that putting collections in the language also wouldn't restrict your ability to create new, specialized collections.</p>
<p>There is no really sound reason to provide collections in the library rather than the language. Although it's good to keep languages minimalist at their core, working with collections of objects is so essential that it shouldn't be considered a contributor to language bloat. Why exactly most languages continue to provide powerful collections only in their library (arrays, once again, are usually in the language) isn't entirely clear. Some good answers might include mentions of history, computer architecture, and different programming paradigms—each of which plays a part in the decision, but none of which make a very strong case.</p>
<p>The reason for this digression is to give you perspective when using collections. Often, it's easy (especially in C++) to get caught up in the minutia of details involved in using standard library collections. This is why this course suggests you start out with list, in most cases, and then optimize from there only if necessary. List is the most generic and versatile of standard library collections, as you will learn later in this lesson. Choosing list will keep you focused on the greater design until you're ready to go back and shave those milliseconds off execution time or lower memory footprint.</p>
<div class="infoBox">
<p>Recall the Liskov Substitution Principle, which explains a fundamental tenet of object-orientation in terms of substitutability.</p>
</div>
<p>In summary, the essence of what C++ fosters by the way it provides collections is a forced knowledge of data structures. To use C++ effectively, or to understand the entirety of your choices, you must have some basic knowledge of data structures. This is consistent with C++'s paradigm of giving the developer choice and flexibility; unfortunately, however, C++ sometimes misses some basic object-oriented principles. Since each collection is not truly substitutable for the others, no abstraction is provided. Therefore, you will need to change and reanalyze your usage of a collection whenever you switch implementations. In some ways, this is a safety feature, because it supposedly makes misuse awkward and easy to spot; but, as you'll see later, some pitfalls are not easy to spot unless you've memorized the manual.</p>
<h1>C++11 features</h1>
<h2>Smart Pointers</h2>
<p>Managing dynamically-allocated memory using new and delete is tricky and error-prone. Three common problems are:</p>
<ol>
<li>Forgetting to delete memory. This is known as a memory "leak", and can be difficult to detect until your program exhausts its memory, slows down, and eventually crashes.</li>
<li>Using an object after it has been deleted. This results in undefined behavior.</li>
<li>Deleting the same memory twice, also resulting in undefined behavior.</li>
</ol>
<p>The good news is, you *rarely* should have to manage dynamic memory yourself, because the standard library provides "smart pointers" to do that for you. Smart pointers are objects that act like pointers, but also provide safety checks and take care of deleting memory when appropriate.</p>
<p>C++11 provides two smart pointer types that manage dynamic memory:</p>
<ul>
<li>
<strong><code>shared_ptr</code></strong> lets multiple pointers refer to the same object by managing a reference count.</li>
<li>
<strong><code>unique_ptr</code></strong> retains exclusive ownership of its object.</li>
</ul>
<p>There is also a companion to the shared_ptr:</p>
<ul>
<li>
<strong><code>weak_ptr</code></strong> provides a "weak" reference to an object managed by a shared_ptr -- it does not affect its shared_ptr's reference count.</li>
</ul>
<p>It's best to use <code>unique_ptr</code> unless you need the shared-ownership aspect of <code>shared_ptr</code>. <code>unique_ptr</code> is very small and efficient -- <code>shared_ptr</code> is typically twice as big and incurs overhead for managing the reference counts. Converting a <code>unique_ptr</code> to a <code>shared_ptr</code> is easy, so it's a good starting point when you're not sure if you'll need shared access. Some good uses for <code>weak_ptr</code> including caching, or keeping observer lists (the Subject/Observer pattern).</p>
<p>Earlier versions of the standard library had <code>auto_ptr</code>, which is still there in C++11 for backward-compatibility, but is deprecated. <code>unique_ptr</code> is its replacement. A big limitation of <code>auto_ptr</code> is that it cannot be used in containers, whereas <code>unique_ptr</code> can.</p>
<p>The safest way to initialize a <code>shared_ptr</code> is to use the function <code>make_shared</code>. This will allocate a new object and create/initialize a <code>shared_ptr</code> with it atomically. In a few circumstances it's better to initialize directly with <code>new</code>, but you should prefer <code>make_shared</code> (see Meyers # 21). C++14 provides <code>make_unique</code> -- which you should also prefer over direct use of <code>new</code> -- but this was not included in the C++11 standard and not all compilers support it yet. Stroustrup's book shows you a simple way to implement your own, though.</p>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253610" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Two Materials" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson Two Materials</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Two, Part 2: Choosing a Collection That Fits">
        <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253612" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Lesson Two, Part 2: Choosing a Collection That Fits</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">ba7ec93b-06bf-41ee-a9de-6f21e52c0f0a</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-302920e513.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-cc24cb95a6.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/ba7ec93b-06bf-41ee-a9de-6f21e52c0f0a?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiYmE3ZWM5M2ItMDZiZi00MWVlLWE5ZGUtNmYyMWU1MmMwZjBhIiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wNy0zMFQyMjoyMzowNy45N1oifQ.ID92-flkls6SKvZM1x46G60IhwKXdsMILacyphz_fGA","context_asset_string":"course_1205169","ping_url":"https://canvas.uw.edu/api/v1/courses/1205169/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1205169/pages","WIKI_PAGE":{"title":"Lesson Two, Part 1: Scenes and Layers","created_at":"2018-03-16T21:50:44Z","url":"lesson-two-part-1-scenes-and-layers","editing_roles":"teachers","page_id":"2704780","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-1-scenes-and-layers","updated_at":"2018-03-16T21:50:44Z","locked_for_user":false,"body":"\u003cdiv class=\"actionBox\"\u003e\r\n\u003ch6\u003eRequired Reading\u003c/h6\u003e\r\n\u003cp\u003e\u003ci\u003eThe C++ Standard Library\u003cstrong\u003e \u003c/strong\u003e2nd edition: \u003c/i\u003eChapter 7 (STL Containers)\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIn this lesson, you will provide support for two new concepts: scenes and layers. The Scene class will help you think about the collection of vector graphics that are used to produce an image, whereas the Layer class will help you work with complex scenes by grouping related graphics. Both these concepts are very simple, but can make a big difference for the graphic designers using your product.\u003c/p\u003e\r\n\u003ch2\u003eLesson Objective\u003c/h2\u003e\r\n\u003cp\u003eBy the end of this lesson, you will be able to implement and test the Scene and Layer classes.\u003c/p\u003e\r\n\u003ch2\u003eScenes\u003c/h2\u003e\r\n\u003cp\u003eAlthough we used the term \u003cspan class=\"italics\"\u003eimage\u003c/span\u003e in the last lesson to refer to the whole of a group of vector graphics, \"image\" implies a lack of structure. When a group of vector graphics is drawn onto an unstructured surface or represented in any way, the group can be called an image. But what can we call the structure itself, not the representation of it? For this, we'll use the term \u003cspan class=\"keyterm\"\u003escene\u003c/span\u003e because it describes a collection of objects and their orientation to each other. In a scene, you think of all sorts of objects arranged to create an image, not just the image itself. A scene also gives a sense that you can move the objects around, which the user can, in fact, do while still working with the structured collection. There also can be different images, perhaps, made of the same scene. The scene, in a pure sense, is merely the collection of graphics and their relations to each other, whereas the image might be able to have options set on it, such as the quality of rendering (whether high or low detail).\u003c/p\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Terms\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003escene\u003c/li\u003e\r\n\u003cli\u003elayer\u003c/li\u003e\r\n\u003cli\u003elocking\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eWhen we begin to think about a collection of vector graphics instead of just a single vector graphic, an issue of ordering arises. If two vector graphics intersect, which is on top? Suddenly, things become quasi three-dimensional. This introduces some potential complexities. But before we delve into resolving these, let's take a look at a concept that we'll introduce for the graphic designer's convenience.\u003c/p\u003e\r\n\u003ch2\u003eLayers\u003c/h2\u003e\r\n\u003cp\u003eA \u003cspan class=\"keyterm\"\u003elayer\u003c/span\u003e is a collection of related graphics that can be referred to as a whole. Unlike a graphic, a layer has no width and height, because it always takes the size of the scene itself. In this sense, it might be thought of as a non-visual component. As an example, the sky, mountains, and houses layers below compose the final scene in figure 2.1-D.\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 2.1-A\u003c/span\u003e—Sky Layer\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698286/preview\" alt=\"sky layer\" width=\"400\" height=\"200\" data-api-returntype=\"File\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698286\"\u003e\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 2.1-B\u003c/span\u003e—Mountains Layer\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698264/preview\" alt=\"mountains layer\" width=\"400\" height=\"200\" data-api-returntype=\"File\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698264\"\u003e\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 2.1-C\u003c/span\u003e—Houses Layer\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698244/preview\" alt=\"houses layer\" width=\"400\" height=\"200\" data-api-returntype=\"File\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698244\"\u003e\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 2.1-D\u003c/span\u003e—Entire Scene\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698263/preview\" alt=\"entire scene\" width=\"400\" height=\"200\" data-api-returntype=\"File\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698263\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe concept of a layer is not paramount or necessary from a features perspective. It won't change what can actually be created with our framework; but it will greatly enhance the graphic designer's ability to work with complex scenes. The primary features of a layer in most graphics (vector and bitmap) applications are the ability to disable modification (called \u003cspan class=\"keyterm\"\u003elocking\u003c/span\u003e) and to hide related portions of a scene. In our previous example, we might want to lock the mountains layer while working on the houses layer so—when trying to select or modify portions of the houses that overlap mountains—we don't accidentally modify the mountains. It also might be convenient when working on the sky layer to completely hide the mountains and houses layers, which might obstruct editing of certain portions or distract the graphic designer from considering the sky as a whole.\u003c/p\u003e\r\n\u003cp\u003eThese examples help us to understand the future, but in the present we don't support drawing or selecting (selecting would be a client concern in any case). The benefit of introducing layers into our framework \u003cspan class=\"bold\"\u003enow\u003c/span\u003e will only be for organizational purposes and, of course, to make sure that we keep layers in mind throughout the development of the framework.\u003c/p\u003e\r\n\u003ch2\u003eRelative Placement and Ordering of Graphics\u003c/h2\u003e\r\n\u003cp\u003eEarlier we said that we can think of the scene as \u003cspan class=\"bold\"\u003ethe vector graphics and their relative orientation\u003c/span\u003e. An example might help explain what we mean by \"relative orientation\" (which, in our two-dimensional world, we can just call \"relative placement\"). If you have a scene composed of a smiley-face graphic, a square graphic, and a triangle graphic, you think about each of these graphics as its own entity. A square is simply a square—you can think about it as the same thing no matter where it is placed in the scene. For this reason, it makes little sense to define the square's points as relative to the scene's upper left corner. Instead, the square's points can be described as relative to its own upper left.\u003c/p\u003e\r\n\u003cp\u003eThis means that our \u003ccode\u003eLayer\u003c/code\u003e class will have to account for the placement of the graphics. Rather than just having a collection of graphics, it will need a collection of graphics \u003cspan class=\"bold\"\u003eand\u003c/span\u003e their respective placement. A primitive solution might be to just store a pair of the two related concepts. We could do this using the C++ standard library like so:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eusing PlacedGraphicCollection = std::list\u0026lt;std::pair\u0026lt;Point, HVectorGraphic\u0026gt;\u0026gt;;\u003c/code\u003e\u003c/p\u003e\r\n\u003cdiv class=\"infoBox\"\u003e\r\n\u003cp\u003eNote that the \"H\" in \"HVectorGraphic\" stands for \"Handle\" as covered in \u003cspan class=\"italics\"\u003eC++\u003c/span\u003e: \u003cspan class=\"italics\"\u003eIntermediate\u003c/span\u003e and in the section on naming at the end of this lesson.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eOf course, this will get a bit ungainly as we work with it. If we create a class called \u003ccode\u003ePlacedGraphic\u003c/code\u003e rather than just letting the idea pervade through the system (and remain second-class—you'll learn more about this idea later in this lesson), we can make our code clearer and terser while isolating the code that deals with placing graphics to one location.\u003c/p\u003e\r\n\u003cp\u003eFor now, we have little to provide in the placed graphic besides accessors to the graphic and placement point; later, however, we will add a \u003ccode\u003edraw \u003c/code\u003emethod that will isolate the placement issues that occur during drawing. Taking this into account gives us a \u003ccode\u003ePlacedGraphic\u003c/code\u003e class as in example 2.1 below.\u003c/p\u003e\r\n\u003ctable border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.1\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eclass PlacedGraphic {\r\n\tpublic:\r\n\t\tvoid setPlacementPoint (Point const\u0026amp; placement);\r\n\t\tPoint const\u0026amp; getPlacementPoint () const;\r\n\r\n\t\tvoid setGraphic (HVectorGraphic const\u0026amp; graphic);\r\n\t\tHVectorGraphic const\u0026amp; getGraphic () const;\r\n\t\t\r\n\tprivate:\r\n\t\tPoint placementPoint;\r\n\t\tHVectorGraphic graphic;\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ez-layering\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eOf course, there's more to placement than \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e. Recall from the previous section that we need some sense of ordering on the graphics to allow one graphic to rest on top of another. A traditional means of supporting ordering in this quasi-third dimension is to introduce the idea of \u003cspan class=\"keyterm\"\u003e\u003ccode\u003ez\u003c/code\u003e-layering\u003c/span\u003e. With \u003ccode\u003ez\u003c/code\u003e-layering, a \u003ccode\u003ez\u003c/code\u003e component is introduced into each graphic (not each point). The graphics are drawn in order from the farthest \u003ccode\u003ez\u003c/code\u003e value to the closest (what that means numbers-wise varies by implementation).\u003c/p\u003e\r\n\u003cp\u003eAlthough this might be the de facto standard, and it might sound fairly reasonable, this is actually far more complex then just having the graphic's order in a list determine its drawing order. If we went the route of a \u003ccode\u003ez\u003c/code\u003e component, we'd have to decide on a coordinate system and ensure that no two objects share the same \u003ccode\u003ez\u003c/code\u003e-layer. This would not only introduce a lot of complexity and potential new exceptions, but also would probably be less efficient than our alternative. There's a long list of reasons why \u003ccode\u003ez\u003c/code\u003e-layering doesn't make much sense for our particular system. This course will spare you the exercise of going down the wrong path, but it is important that you understand at least one essential reason to avoid the \u003ccode\u003ez\u003c/code\u003e-layering: the user has no concept of \u003ccode\u003ez\u003c/code\u003e-layer in the application.\u003c/p\u003e\r\n\u003cp\u003eUsers don't think in terms of numbered layers; they refer to things relatively. If you've used even the basic drawing tools provided by some word processors, you might recognize this fact. You choose to bring objects to the front, send to the back, move up one, down one—but never do you refer to specific layer numbers, which would be quite hard to maintain and probably only cause confusion to the user.\u003c/p\u003e\r\n\u003cp\u003eRelative ordering is a far more natural approach than \u003ccode\u003ez\u003c/code\u003e-layering; it corresponds to the loose layering we do in the real world with sheets of paper (which are flat, like our graphics, but still reside in three dimensions). Thinking of the layered graphics as a sequential list makes it impossible to have two that reside at the same level, and it makes it very easy to say \"move this graphic up,\" or to insert a new graphic in a specific spot without thinking about all the \u003ccode\u003ez\u003c/code\u003e components that have to be changed.\u003c/p\u003e\r\n\u003ch2\u003eUnderstanding Collections and Iterators in the C++ Standard Library\u003c/h2\u003e\r\n\u003cp\u003eIf our layer class (and via implication, our scene class as well) should be implemented via a sequential list, we must know which implementation of a sequential list to choose. In the C++ standard library, we have three, each with a different interface and even different behavior on the methods that are common among them. Choosing which to use, then, is not always completely straightforward; and, unfortunately, to use them, you have to be sentient of each collection's implementation, not just their interface. Before we get deeper into how to choose which sequential list we'll use, let's step back a minute and look at collections as a whole. We'll look at collections in the C++ Standard Library, but also compare them to the ways other languages you know (such as UML) address collections of objects.\u003c/p\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ecollections\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cspan class=\"keyterm\"\u003eCollections\u003c/span\u003e are generally provided by a standard library or in a language itself. For this reason, you'll rarely to need to design or implement collections from the ground up—unless you work for the company implementing the language or standard library, or you have extremely specialized needs. Even the most primitive of languages usually provide simple arrays as a form of maintaining collections of objects. Though there are some procedural languages that do not provide anything above and beyond an array, most object-oriented languages provide more powerful collections.\u003c/p\u003e\r\n\u003cp\u003eC++ provides most collections in its library, rather than its language. The sole exception to this is the array, which has direct language support. This is somewhat inconsistent: what makes an array extraordinary? If anything, arrays are not used very often in comparison to the C++ standard library's list or other standard library collections. Arrays are actually discouraged in usage by most C++ texts, yet they're the only collection to get the simplified semantics of language support.\u003c/p\u003e\r\n\u003cp\u003eArrays are not extraordinary. They were provided for backwards compatibility—to work with the glut of code that used arrays, and will continue to use them—and for supposed tweaking of memory usage and performance (though still here, vector purports to outperform \"manual\" use of arrays in many cases). The designers of C++ and its library work from a consistent, minimalist bias that preaches no new language features and minimal library support. C++ generally prefers not to even introduce new keywords where possible. This is why the \"virtual\" and \"static\" keywords can both mean such a variety of things.\u003c/p\u003e\r\n\u003cp\u003eIn contrast to C++'s decision to avoid giving language support to collections (beyond the primitive array), UML makes collections of objects a fundamental language construct. This language construct, which uses the idea of multiplicities, is more flexible than traditional collections because it allows us to abstractly specify a range of possible objects—leaving out the unnecessary detail of how this range will be implemented.\u003c/p\u003e\r\n\u003cp\u003eAs should now be familiar to you in your knowledge of UML, the \u003ccode\u003eACompositeElement\u003c/code\u003e class shown in fig. 2.2 below might have any number of children, as indicated by the asterisk. This is much more natural, effective, and illustrative of a relationship than showing an attribute of type \u003ccode\u003elist\u0026lt;IMarkupLanguageElement\u0026gt;\u003c/code\u003e in the class.\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 2.2\u003c/span\u003e—ACompositeElement Class\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698268/preview\" alt=\"diagram of ACompositeElement class\" width=\"450\" height=\"305\" data-api-returntype=\"File\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698268\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIt's important that you recognize what a collection is, in a pure sense, and not get too distracted by the many choices C++ provides you in collection implementations. Remember that for many of the collections in the C++ Standard Library, most of what varies is implementation, not interface.\u003c/p\u003e\r\n\u003cp\u003eThe interesting thing about most collections is that their interface is not only often self-evident, but also not the primary focus when we are working with them. Instead, their elements are usually the focus. This is why this course and newer texts often refer to \u003cspan class=\"italics\"\u003ecollections\u003c/span\u003e rather than \u003cspan class=\"italics\"\u003econtainers.\u003c/span\u003e \"COLLECTION\" stresses elements rather than where they reside or how their residence is implemented. Rather than focusing on the thing that keeps the collection together, it's better to focus on the elements themselves.\u003c/p\u003e\r\n\u003cdiv class=\"infoBox\"\u003e\r\n\u003cp\u003e\u003cspan class=\"keyterm\"\u003eSynergy\u003c/span\u003e is an important concept that you may not be aware of. Synergy occurs when something has worth in its whole more than the sum of its parts. The example of text should be illustrative of this.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe exception to the rule of focusing on elements is when the collection has a synergy beyond the sum of its elements. For example, text has more value than the combination of its individual characters. This brings us to our second reason for not using \"container\" as a term: \"container\" is an overly-generic word. Any object that has even one attribute can be viewed as a container of a sort. In the few cases where we want to focus on the object holding a series of elements, such as a collection of characters, we can usually use a better term, one that is more representative of this synergy: in this case, \"text.\" There are several common collections that have some form of synergy, including strings, stacks, queues, and maps. In these cases, we might care equally (or more so) about the object that holds the elements as the elements themselves.\u003c/p\u003e\r\n\u003ch2\u003eForcing Knowledge of Data Structures\u003c/h2\u003e\r\n\u003cp\u003eBased on the conversation above, you might think that collections are just the sort of feature that should be in the language, rather than the library. What does C++ provide by keeping collections in the library and allowing developers to explicitly choose an implementation?\u003c/p\u003e\r\n\u003cp\u003eYour first answer might be that this allows developers to pick the proper collection for their particular efficiency needs. But putting the collection in the language, rather than the library, would only simplify this process. Contemporary compilers perform many optimizations and generally allow a great deal of configurability (such as whether to optimize for speed or for size). It would certainly not be difficult for compilers to analyze the usage of a collection (for example, whether insertion took place mostly at the beginning or mostly in the middle) and choose which implementation to use based on that and whatever options the developer had set (such as optimize for size). Note that putting collections in the language also wouldn't restrict your ability to create new, specialized collections.\u003c/p\u003e\r\n\u003cp\u003eThere is no really sound reason to provide collections in the library rather than the language. Although it's good to keep languages minimalist at their core, working with collections of objects is so essential that it shouldn't be considered a contributor to language bloat. Why exactly most languages continue to provide powerful collections only in their library (arrays, once again, are usually in the language) isn't entirely clear. Some good answers might include mentions of history, computer architecture, and different programming paradigms—each of which plays a part in the decision, but none of which make a very strong case.\u003c/p\u003e\r\n\u003cp\u003eThe reason for this digression is to give you perspective when using collections. Often, it's easy (especially in C++) to get caught up in the minutia of details involved in using standard library collections. This is why this course suggests you start out with list, in most cases, and then optimize from there only if necessary. List is the most generic and versatile of standard library collections, as you will learn later in this lesson. Choosing list will keep you focused on the greater design until you're ready to go back and shave those milliseconds off execution time or lower memory footprint.\u003c/p\u003e\r\n\u003cdiv class=\"infoBox\"\u003e\r\n\u003cp\u003eRecall the Liskov Substitution Principle, which explains a fundamental tenet of object-orientation in terms of substitutability.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIn summary, the essence of what C++ fosters by the way it provides collections is a forced knowledge of data structures. To use C++ effectively, or to understand the entirety of your choices, you must have some basic knowledge of data structures. This is consistent with C++'s paradigm of giving the developer choice and flexibility; unfortunately, however, C++ sometimes misses some basic object-oriented principles. Since each collection is not truly substitutable for the others, no abstraction is provided. Therefore, you will need to change and reanalyze your usage of a collection whenever you switch implementations. In some ways, this is a safety feature, because it supposedly makes misuse awkward and easy to spot; but, as you'll see later, some pitfalls are not easy to spot unless you've memorized the manual.\u003c/p\u003e\r\n\u003ch1\u003eC++11 features\u003c/h1\u003e\r\n\u003ch2\u003eSmart Pointers\u003c/h2\u003e\r\n\u003cp\u003eManaging dynamically-allocated memory using new and delete is tricky and error-prone. Three common problems are:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eForgetting to delete memory. This is known as a memory \"leak\", and can be difficult to detect until your program exhausts its memory, slows down, and eventually crashes.\u003c/li\u003e\r\n\u003cli\u003eUsing an object after it has been deleted. This results in undefined behavior.\u003c/li\u003e\r\n\u003cli\u003eDeleting the same memory twice, also resulting in undefined behavior.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThe good news is, you *rarely* should have to manage dynamic memory yourself, because the standard library provides \"smart pointers\" to do that for you. Smart pointers are objects that act like pointers, but also provide safety checks and take care of deleting memory when appropriate.\u003c/p\u003e\r\n\u003cp\u003eC++11 provides two smart pointer types that manage dynamic memory:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eshared_ptr\u003c/code\u003e\u003c/strong\u003e lets multiple pointers refer to the same object by managing a reference count.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eunique_ptr\u003c/code\u003e\u003c/strong\u003e retains exclusive ownership of its object.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThere is also a companion to the shared_ptr:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eweak_ptr\u003c/code\u003e\u003c/strong\u003e provides a \"weak\" reference to an object managed by a shared_ptr -- it does not affect its shared_ptr's reference count.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt's best to use \u003ccode\u003eunique_ptr\u003c/code\u003e unless you need the shared-ownership aspect of \u003ccode\u003eshared_ptr\u003c/code\u003e. \u003ccode\u003eunique_ptr\u003c/code\u003e is very small and efficient -- \u003ccode\u003eshared_ptr\u003c/code\u003e is typically twice as big and incurs overhead for managing the reference counts. Converting a \u003ccode\u003eunique_ptr\u003c/code\u003e to a \u003ccode\u003eshared_ptr\u003c/code\u003e is easy, so it's a good starting point when you're not sure if you'll need shared access. Some good uses for \u003ccode\u003eweak_ptr\u003c/code\u003e including caching, or keeping observer lists (the Subject/Observer pattern).\u003c/p\u003e\r\n\u003cp\u003eEarlier versions of the standard library had \u003ccode\u003eauto_ptr\u003c/code\u003e, which is still there in C++11 for backward-compatibility, but is deprecated. \u003ccode\u003eunique_ptr\u003c/code\u003e is its replacement. A big limitation of \u003ccode\u003eauto_ptr\u003c/code\u003e is that it cannot be used in containers, whereas \u003ccode\u003eunique_ptr\u003c/code\u003e can.\u003c/p\u003e\r\n\u003cp\u003eThe safest way to initialize a \u003ccode\u003eshared_ptr\u003c/code\u003e is to use the function \u003ccode\u003emake_shared\u003c/code\u003e. This will allocate a new object and create/initialize a \u003ccode\u003eshared_ptr\u003c/code\u003e with it atomically. In a few circumstances it's better to initialize directly with \u003ccode\u003enew\u003c/code\u003e, but you should prefer \u003ccode\u003emake_shared\u003c/code\u003e (see Meyers # 21). C++14 provides \u003ccode\u003emake_unique\u003c/code\u003e -- which you should also prefer over direct use of \u003ccode\u003enew\u003c/code\u003e -- but this was not included in the C++11 standard and not all compilers support it yet. Stroustrup's book shows you a simple way to implement your own, though.\u003c/p\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1205169/pages/lesson-two-part-1-scenes-and-layers","WIKI_PAGE_EDIT_PATH":"/courses/1205169/pages/lesson-two-part-1-scenes-and-layers/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1205169/pages/lesson-two-part-1-scenes-and-layers/revisions","COURSE_ID":"1205169","MODULES_PATH":"/courses/1205169/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Lesson Two, Part 1_ Scenes and Layers_files/navigation_header.bundle-d10139d096.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/default.js" defer="defer"></script>
<script src="./Lesson Two, Part 1_ Scenes and Layers_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>