<!DOCTYPE html>
<!-- saved from url=(0116)https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits?module_item_id=8253612 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson Two, Part 2: Choosing a Collection That Fits: CPROGRM 713 A Su 18: C++ Programming: Advanced</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/common-5f496bd1d1.css">
  <script type="text/javascript" async="" src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-df7331dbc5.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/custom.css">
<link rel="stylesheet" media="all" href="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/vendor.bundle-5e1b2371d9.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/appBootstrap.bundle-d28bad749f.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/common.bundle-db82690f34.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/wiki_page_show.bundle-ea33dc7710.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1205169 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits?module_item_id=8253612#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits?module_item_id=8253612#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169"><span class="ellipsible">CPROGRM 713 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson Two, Part 2: Choosing a Collection That Fits</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Summer 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1205169" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/announcements" title="Announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/external_tools/63603" title="Info &amp; Help" class="context_external_tool_63603" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson Two, Part 2: Choosing a Collection That Fits</h1>
  
    <p>In C++ you have to understand the philosophy and underlying implementation of a collection to use it effectively. Picking the wrong collection can result in inefficiency, yes; but worse, it can result in awkward or error-prone code (something that will end up costing more money throughout the lifetime of a product than the inefficiency ever could). For example, using a vector in a situation that requires reshuffling of elements would be extremely awkward.</p>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>fundamental collections</li>
<li>list</li>
<li>deque</li>
<li>vector</li>
</ul>
</div>
<p>There are many ways to categorize the collections in the C++ standard library. One distinction that is particularly useful is that of <span class="keyterm">fundamental collections</span>. Fundamental collections are those collections that provide basic, loosely structured "sequences." They differ from all other standard library collections in that they are ultimately generic. Collections like stack and queue are geared towards a very specific usage, but the fundamental collections are the basic foundation for even these domain specific collections.</p>
<p>There are three fundamental collections in the C++ standard library: <span class="keyterm"> list</span>, <span class="keyterm">deque</span>, and <span class="keyterm">vector</span>. The variation between these is essentially only an implementation difference; they can all be theoretically applied in the same situations, just with varying performance. It's not that simple, though. The C++ standard library wants everyone to be exactly aware of what the suggested use of a specific implementation is. Therefore, the interfaces and covert behavior of these collections makes them hard to use in inappropriate situations. Note the contrast in the examples below.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.3-A—Misguided Use of Vector</th>
</tr>
<tr>
<td>
<pre><code>class Principal
{
private:
    typedef std::vector StudentCollection;
    typedef StudentCollection::iterator StudentIterator;

public:
    void enrollStudent(HStudent const&amp; student)
    {
        getStudents ().insert (getStudents ().begin (), student);
    }

    void expellStudent(HStudent const&amp; student)
    {
        for (StudentIterator iStudent = getStudents().begin(); iStudent != students.end(); ++iStudent)
        {
            if (*iStudent == student)
            {
                students.erase (iStudent);
                return;
                // if we continue to iterate we will crash
                // because our iterator is now invalidated
                // based on the vector's documentation.
            }
        }
    }

private:
    StudentCollection students;
};</code></pre>
</td>
</tr>
</tbody>
</table>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.3-B—Using a List Instead</th>
</tr>
<tr>
<td>
<pre><code>class Principal
{
private:
    typedef std::list StudentCollection;
    typedef StudentCollection::iterator StudentIterator;

public:
    void enrollStudent(HStudent const&amp; student)
    {
        getStudents().push_front (student);
    }

    void expellStudent(HStudent const&amp; student)
    {
        getStudents().remove (student);
    }

private:
    StudentCollection students;
};</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Example 2.3-A illustrates the poor fit of the vector collection with our tasks at hand, as indicated by the number of lines, necessity to document with comments and greater levels of indentation. Although it's possible to write example 2.3-A more tersely and without comments, as in the example below which uses the standard algorithm find, the underlying complexity is still there.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.4—Using a Vector with Standard Algorithms</th>
</tr>
<tr>
<td>
<pre><code>StudentIterator iStudent = std::find (getStudents ().begin (), getStudents.end (), student);
if (iStudent != getStudents.end ())
{
    getStudents().erase (iStudent);
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>If we were not to document why we needn't consider the invalidated iterator, another developer might modify this code in the future and fail to recognize the hidden complexity—potentially causing errors. This makes a clear case for your education; failing to fluently understand the differences in implementation and behavior between different standard library collections is not safe in C++. You must be aware, for example, that a vector's iterators are invalidated in situations where a list's iterators are not. You also won't get a clean and simple <code>InvalidIterator</code> exception if you miss this fact; rather, you'll most likely get an actual crash, because any usage of the iterator after the point of invalidation is implementation-defined. Most implementations simply attempt to access a pointer that is no longer valid and quickly send your program crashing, with no way for you even to report the problem to the user.</p>
<p>In the example above, the <code>iStudent</code> is effectively invalid if used anywhere beyond the <code>if</code> statement. It is never a good idea to have an object that's in a completely invalid state just floating around free for use; usually, it should only become invalid during destruction or be destructed shortly after you invalidate it. List's <code>remove</code> method would shield you from this, if invalid iterators were an issue with lists. But with lists, unlike vectors, we don't have to worry about invalidating all of our iterators. If anything, having the remove method on the vector would make it safer—but someone might then use it in an inappropriate situation (due to inefficiencies that vector has with erasing elements from anywhere but the end of the collection).</p>
<p>These are all tradeoffs you have to make when designing frameworks. You can write documentation, but sometimes it might be appropriate to make improper use extremely awkward (but hopefully safe still!)—just be sure first that it's improper use.</p>
<h2>List</h2>
<p>The C++ standard library's list doesn't use the normal jargon of "linked list" to imply an implementation, which makes it unique among the other fundamental collections. The ISO standard does not specify the list's implementation, but it's generally implied that a list will be implemented as a doubly-linked list. It's not unlikely that the list got its name out of brevity, rather than genericity.</p>
<p>&nbsp;Lists are simple and effective, regardless of any inefficiency in certain usages. This is why they have been and continue to be the de facto standard in most languages, as well as being used and (re)implemented in everything from beginning computer science courses to large-scale real-world systems. When choosing between lists, vectors and deques, determine the most common and important operations for the particular usage (e.g, insertion or random access), and choose the collection class that is the best fit for those operations. For the application described above the list is a good fit.</p>
<p>Although optimization is beyond the scope of this course, it is a good idea, when optimizing, to think of your software as a chain. The basic principle is "weakest link first." You can optimize your code in an ad hoc manner, but you won't affect the overall performance of your system unless you work on the weakest link first. Make sure before optimizing code that it <span class="bold">is</span> the weakest link, as optimizations will increase maintenance costs by making the code hard to maintain and sometimes non-portable.</p>
<h3>List Implementation</h3>
<p>As you probably know, a linked list (the general implementation of C++'s list) has separately allocated "nodes" that maintain pointers to the next (and—if doubly linked—previous) "nodes." Vector is the opposite extreme; it uses contiguous memory to store its elements, then merely indexes this large block of memory. Although list generally uses slightly more memory, it also doesn't require contiguous memory. This makes it more flexible in terms of memory usage, though it will use slightly more memory on average.</p>
<p>The underlying implementation of list makes it flexible in terms of speed as well. Though there may be cases in which a vector can be faster, the list can easily and efficiently move, remove and add elements just by changing next and previous attributes around on its nodes. A linked list is the first data structure that most computer science students learn, precisely because of its flexibility and simplicity—which are absolutely related.</p>
<h3>Features of List</h3>
<p>There are a few nuances and features of standard C++'s list that are important to remember. First, element access must be linear. In other words, you cannot jump five ahead when you are iterating; you must always move forward and backward by one. This will not limit what is possible with a list; a need to increment or decrement by more than one is extremely rare. A strength of C++'s vector is that it does allow you to jump five ahead while you are iterating.</p>
<p>Iterating is almost defined by moving forward or backward by only one at a time, because iterating is done when you wish to look at the whole of a series of elements. <span class="italics">Random-access iteration </span>is the term for being able to jump around; we'll cover it in Lesson Three when we look in depth at iterators. Also be aware that list's implementation does not preclude its ability to move forward by more than one at a time; the interface just makes this process awkward (and you can use the standard algorithm <code>advance</code> to make it less so).</p>
<p>Note the list's iterators are persistent. What this means is that when you modify the collection by inserting or removing elements, your iterators can remain intact (with the exception of trying to access the element that was removed). You might take it for granted that removing or inserting an element into the list should never invalidate an unrelated iterator; this is exactly the behavior that deque and vector have, however.</p>
<p>Being the most generic of fundamental collections, the list provides a few small features that can come in handy when you are working with collections.</p>
<ul>
<li>The <code>splice</code> methods move all elements within a range into a specified position in another list.</li>
<li>The <code>merge</code> methods combine two sorted lists while maintaining the sorting criteria.</li>
<li>The <code>sort</code> methods sort all elements based on a comparator.</li>
<li>The <code>reverse</code> method reverses the order of all elements.</li>
<li>The <code>unique</code> method removes duplicates of consecutive elements with the same value.</li>
</ul>
<h2>Deque</h2>
<p>A deque is an implementation of a collection that is particularly efficient at insertions and removals at both ends while using less memory than most list implementations. A deque has the added feature: random access to elements.</p>
<p>A deque behaves more like a vector by invalidating iterators; any insertions and removals of elements that are not done at the beginning or end will invalidate all iterators.</p>
<p>Except for the ability to insert easily at the beginning and end of the deque, and the fact that inserting in these locations doesn't invalidate iterators, a deque behaves like a vector for the most part.</p>
<p>It is possible, with deques (and vectors, actually) to write classic array-style algorithms that make use of the C style index operator. Though using iterators is preferred.</p>
<h2>Vector</h2>
<p>A vector provides similar capability to an array. vector is better than an array because being a collection class, it provides member functions to perform array operations reliably and safely.</p>
<h2>Concluding our Scene and Layer Classes</h2>
<p>Choose an approprate collection class between list, vector, and deque for the underlying data struction of Scene and Layer. Once we decide on a collection class there are still a few more properties that we must look at to complete our Scene and Layer classes.</p>
<p>In our first example of layers, each layer was given a name. The ability to refer to layers by their names is fairly essential. For this reason, the Layer class should have a string-based alias attribute. Beyond this, there's not much more to say about layers for the moment. When we begin to render scenes in Lesson Five, we'll revisit the layer class to see what role it might play in rendering.</p>
<p>In our previous discussion of layers, we said layers should not have any sense of boundary. On the other hand, it's essential that the <code>Scene</code> class define its overall size, or width and height.</p>
<p>Taking all this into account, our <code>Scene</code> and<code> Layer</code> classes are partially outlined in example 2.5.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.5</th>
</tr>
<tr>
<td>
<pre><code>namespace Framework
{
    class Layer
    {
    private:
        typedef std::list PlacedGraphicCollection;

    public:
        typedef PlacedGraphicCollection::iterator PlacedGraphicIterator;

        // insert, remove, iteration support.

        // accessors to alias.

    private:
        PlacedGraphicCollection graphics;
        std::string alias;
    };

    class Scene
    {
    private:
        typedef std::list LayerCollection;

    public: typedef LayerCollection::iterator LayerIterator;

            // insert, remove, iteration support.

            // accessors to width and height.

    private:
        LayerCollection layers;
        int width;
        int height;
    };
}
</code></pre>
</td>
</tr>
</tbody>
</table>
<p>In Assignment 2, you will once again be asked to fill out any remaining implementation details.</p>
<h2>Supporting Scenes and Layers in XML</h2>
<p>We can support scenes and layers in XML via a simple direct mapping of class to XML element, just like we had in Lesson One. This is one of the great strengths of XML; it allows you to view the file format as another way of describing the objects. If we follow this advice, we end up with the XML shown in example 2.6.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 2.6</th>
</tr>
<tr>
<td>
<pre><code>&lt;Scene width="800" height="600"&gt;
    &lt;Layer alias="sky"&gt;
        &lt;PlacedGraphic x="0" y="0"&gt;
            &lt;VectorGraphic closed="true"&gt;
                &lt;Point x="0" y="10" /&gt;
                &lt;!-- etc... --&gt;
            &lt;/VectorGraphic&gt;
        &lt;/PlacedGraphic&gt;
        &lt;PlacedGraphic x="700" y="0"&gt;
            &lt;VectorGraphic closed="true"&gt;
                &lt;!-- etc... --&gt;
            &lt;/VectorGraphic&gt;
        &lt;/PlacedGraphic&gt;
    &lt;/Layer&gt;
    &lt;Layer alias="mountains"&gt;
        &lt;PlacedGraphic x="0" y="0"&gt;
            &lt;VectorGraphic closed="false"&gt;
                &lt;!-- etc... --&gt;
            &lt;/VectorGraphic&gt;
        &lt;/PlacedGraphic&gt;
    &lt;/Layer&gt;
    &lt;Layer alias="houses"&gt;
        &lt;!-- etc... --&gt;
    &lt;/Layer&gt;
&lt;/Scene&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Note that there is some ambiguity in that the order in which the layers should be placed (closest to furthest or vice versa), but this would be the same even if we introduced any form of numeric ordering; it's effectively never clear without documentation, unfortunately. The aliases on the layers above should help you deduce that the ordering is from furthest to closest. Of course, our XML would in reality never be seen by most users. Remember that in our case, all XML is both generated and read by our system—the user works with a higher level interface than in writing XML.</p>
<h1>New in C++11</h1>
<h2>Unordered containers</h2>
<p>C++11 defines four new <em>unordered containers</em>. These correspond to the four standard <em>associative</em> containers:</p>
<pre>    std::set, std::unordered_set
    std::multiset, std::unordered_multiset
    std::map, std::unordered_map
    std::multimap, std::unordered_multimap
</pre>
<p>Recall that the ordered containers keep their elements sorted for quick retrieval. This costs a little time whenever you insert a new element, and uses an object's comparison operator to do its sorting. Sometimes the objects you put into a container may not have an obvious ordering relationship, or it may be expensive to maintain their sorted order. In those cases, an unordered container may provide better performance.</p>
<p>The unordered containers use a hashing function to keep its objects in "buckets", and an object's == operator to locate an object in a bucket. This is often more efficient than sorting, but may require a little effort to set up unless you're storing standard types like std::string. If you're storing user-defined types, the standard hash template can't be used directly, so you'll have to supply your own -- as well as perhaps a suitable operator==. There is a standard strategy for doing this; see Lippmann for details.</p>
<p>Except for the hashing operations, the unordered containers provide the same interface as the ordered containers. That makes it easy to use an unordered container in place of an ordered container. Just keep in mind that if you iterate through an unordered container the elements will be unordered rather than sorted.</p>
<h2>Moving STL containers</h2>
<p>The STL containers now provide move constructors and move assignment operators. Internally they can swap pointers to the values instead of copying them, making them much more efficient. Use those whenever possible for performance reasons -- whenever the contents of the container on the right side of a statement are no longer needed.</p>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253611" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Two, Part 1: Scenes and Layers" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson Two, Part 1: Scenes and Layers</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Two, Part 3: Simplifying XML File Format Support">
        <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253613" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Lesson Two, Part 3: Simplifying XML File Format Support</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">5cd0bdc6-1b47-4076-8770-f1a8a80fd747</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-302920e513.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-cc24cb95a6.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/5cd0bdc6-1b47-4076-8770-f1a8a80fd747?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiNWNkMGJkYzYtMWI0Ny00MDc2LTg3NzAtZjFhOGE4MGZkNzQ3IiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wNy0zMFQyMjoyMzowOS4yNloifQ.l9J0VJ4_-l7biPmOZJDac-v6Zs3dOAqlylIm98gRf5Y","context_asset_string":"course_1205169","ping_url":"https://canvas.uw.edu/api/v1/courses/1205169/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1205169/pages","WIKI_PAGE":{"title":"Lesson Two, Part 2: Choosing a Collection That Fits","created_at":"2018-03-16T21:50:45Z","url":"lesson-two-part-2-choosing-a-collection-that-fits","editing_roles":"teachers","page_id":"2704782","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits","updated_at":"2018-03-16T21:50:45Z","locked_for_user":false,"body":"\u003cp\u003eIn C++ you have to understand the philosophy and underlying implementation of a collection to use it effectively. Picking the wrong collection can result in inefficiency, yes; but worse, it can result in awkward or error-prone code (something that will end up costing more money throughout the lifetime of a product than the inefficiency ever could). For example, using a vector in a situation that requires reshuffling of elements would be extremely awkward.\u003c/p\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003efundamental collections\u003c/li\u003e\r\n\u003cli\u003elist\u003c/li\u003e\r\n\u003cli\u003edeque\u003c/li\u003e\r\n\u003cli\u003evector\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThere are many ways to categorize the collections in the C++ standard library. One distinction that is particularly useful is that of \u003cspan class=\"keyterm\"\u003efundamental collections\u003c/span\u003e. Fundamental collections are those collections that provide basic, loosely structured \"sequences.\" They differ from all other standard library collections in that they are ultimately generic. Collections like stack and queue are geared towards a very specific usage, but the fundamental collections are the basic foundation for even these domain specific collections.\u003c/p\u003e\r\n\u003cp\u003eThere are three fundamental collections in the C++ standard library: \u003cspan class=\"keyterm\"\u003e list\u003c/span\u003e, \u003cspan class=\"keyterm\"\u003edeque\u003c/span\u003e, and \u003cspan class=\"keyterm\"\u003evector\u003c/span\u003e. The variation between these is essentially only an implementation difference; they can all be theoretically applied in the same situations, just with varying performance. It's not that simple, though. The C++ standard library wants everyone to be exactly aware of what the suggested use of a specific implementation is. Therefore, the interfaces and covert behavior of these collections makes them hard to use in inappropriate situations. Note the contrast in the examples below.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.3-A—Misguided Use of Vector\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eclass Principal\r\n{\r\nprivate:\r\n    typedef std::vector StudentCollection;\r\n    typedef StudentCollection::iterator StudentIterator;\r\n\r\npublic:\r\n    void enrollStudent(HStudent const\u0026amp; student)\r\n    {\r\n        getStudents ().insert (getStudents ().begin (), student);\r\n    }\r\n\r\n    void expellStudent(HStudent const\u0026amp; student)\r\n    {\r\n        for (StudentIterator iStudent = getStudents().begin(); iStudent != students.end(); ++iStudent)\r\n        {\r\n            if (*iStudent == student)\r\n            {\r\n                students.erase (iStudent);\r\n                return;\r\n                // if we continue to iterate we will crash\r\n                // because our iterator is now invalidated\r\n                // based on the vector's documentation.\r\n            }\r\n        }\r\n    }\r\n\r\nprivate:\r\n    StudentCollection students;\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.3-B—Using a List Instead\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eclass Principal\r\n{\r\nprivate:\r\n    typedef std::list StudentCollection;\r\n    typedef StudentCollection::iterator StudentIterator;\r\n\r\npublic:\r\n    void enrollStudent(HStudent const\u0026amp; student)\r\n    {\r\n        getStudents().push_front (student);\r\n    }\r\n\r\n    void expellStudent(HStudent const\u0026amp; student)\r\n    {\r\n        getStudents().remove (student);\r\n    }\r\n\r\nprivate:\r\n    StudentCollection students;\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eExample 2.3-A illustrates the poor fit of the vector collection with our tasks at hand, as indicated by the number of lines, necessity to document with comments and greater levels of indentation. Although it's possible to write example 2.3-A more tersely and without comments, as in the example below which uses the standard algorithm find, the underlying complexity is still there.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.4—Using a Vector with Standard Algorithms\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eStudentIterator iStudent = std::find (getStudents ().begin (), getStudents.end (), student);\r\nif (iStudent != getStudents.end ())\r\n{\r\n    getStudents().erase (iStudent);\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eIf we were not to document why we needn't consider the invalidated iterator, another developer might modify this code in the future and fail to recognize the hidden complexity—potentially causing errors. This makes a clear case for your education; failing to fluently understand the differences in implementation and behavior between different standard library collections is not safe in C++. You must be aware, for example, that a vector's iterators are invalidated in situations where a list's iterators are not. You also won't get a clean and simple \u003ccode\u003eInvalidIterator\u003c/code\u003e exception if you miss this fact; rather, you'll most likely get an actual crash, because any usage of the iterator after the point of invalidation is implementation-defined. Most implementations simply attempt to access a pointer that is no longer valid and quickly send your program crashing, with no way for you even to report the problem to the user.\u003c/p\u003e\r\n\u003cp\u003eIn the example above, the \u003ccode\u003eiStudent\u003c/code\u003e is effectively invalid if used anywhere beyond the \u003ccode\u003eif\u003c/code\u003e statement. It is never a good idea to have an object that's in a completely invalid state just floating around free for use; usually, it should only become invalid during destruction or be destructed shortly after you invalidate it. List's \u003ccode\u003eremove\u003c/code\u003e method would shield you from this, if invalid iterators were an issue with lists. But with lists, unlike vectors, we don't have to worry about invalidating all of our iterators. If anything, having the remove method on the vector would make it safer—but someone might then use it in an inappropriate situation (due to inefficiencies that vector has with erasing elements from anywhere but the end of the collection).\u003c/p\u003e\r\n\u003cp\u003eThese are all tradeoffs you have to make when designing frameworks. You can write documentation, but sometimes it might be appropriate to make improper use extremely awkward (but hopefully safe still!)—just be sure first that it's improper use.\u003c/p\u003e\r\n\u003ch2\u003eList\u003c/h2\u003e\r\n\u003cp\u003eThe C++ standard library's list doesn't use the normal jargon of \"linked list\" to imply an implementation, which makes it unique among the other fundamental collections. The ISO standard does not specify the list's implementation, but it's generally implied that a list will be implemented as a doubly-linked list. It's not unlikely that the list got its name out of brevity, rather than genericity.\u003c/p\u003e\r\n\u003cp\u003e Lists are simple and effective, regardless of any inefficiency in certain usages. This is why they have been and continue to be the de facto standard in most languages, as well as being used and (re)implemented in everything from beginning computer science courses to large-scale real-world systems. When choosing between lists, vectors and deques, determine the most common and important operations for the particular usage (e.g, insertion or random access), and choose the collection class that is the best fit for those operations. For the application described above the list is a good fit.\u003c/p\u003e\r\n\u003cp\u003eAlthough optimization is beyond the scope of this course, it is a good idea, when optimizing, to think of your software as a chain. The basic principle is \"weakest link first.\" You can optimize your code in an ad hoc manner, but you won't affect the overall performance of your system unless you work on the weakest link first. Make sure before optimizing code that it \u003cspan class=\"bold\"\u003eis\u003c/span\u003e the weakest link, as optimizations will increase maintenance costs by making the code hard to maintain and sometimes non-portable.\u003c/p\u003e\r\n\u003ch3\u003eList Implementation\u003c/h3\u003e\r\n\u003cp\u003eAs you probably know, a linked list (the general implementation of C++'s list) has separately allocated \"nodes\" that maintain pointers to the next (and—if doubly linked—previous) \"nodes.\" Vector is the opposite extreme; it uses contiguous memory to store its elements, then merely indexes this large block of memory. Although list generally uses slightly more memory, it also doesn't require contiguous memory. This makes it more flexible in terms of memory usage, though it will use slightly more memory on average.\u003c/p\u003e\r\n\u003cp\u003eThe underlying implementation of list makes it flexible in terms of speed as well. Though there may be cases in which a vector can be faster, the list can easily and efficiently move, remove and add elements just by changing next and previous attributes around on its nodes. A linked list is the first data structure that most computer science students learn, precisely because of its flexibility and simplicity—which are absolutely related.\u003c/p\u003e\r\n\u003ch3\u003eFeatures of List\u003c/h3\u003e\r\n\u003cp\u003eThere are a few nuances and features of standard C++'s list that are important to remember. First, element access must be linear. In other words, you cannot jump five ahead when you are iterating; you must always move forward and backward by one. This will not limit what is possible with a list; a need to increment or decrement by more than one is extremely rare. A strength of C++'s vector is that it does allow you to jump five ahead while you are iterating.\u003c/p\u003e\r\n\u003cp\u003eIterating is almost defined by moving forward or backward by only one at a time, because iterating is done when you wish to look at the whole of a series of elements. \u003cspan class=\"italics\"\u003eRandom-access iteration \u003c/span\u003eis the term for being able to jump around; we'll cover it in Lesson Three when we look in depth at iterators. Also be aware that list's implementation does not preclude its ability to move forward by more than one at a time; the interface just makes this process awkward (and you can use the standard algorithm \u003ccode\u003eadvance\u003c/code\u003e to make it less so).\u003c/p\u003e\r\n\u003cp\u003eNote the list's iterators are persistent. What this means is that when you modify the collection by inserting or removing elements, your iterators can remain intact (with the exception of trying to access the element that was removed). You might take it for granted that removing or inserting an element into the list should never invalidate an unrelated iterator; this is exactly the behavior that deque and vector have, however.\u003c/p\u003e\r\n\u003cp\u003eBeing the most generic of fundamental collections, the list provides a few small features that can come in handy when you are working with collections.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe \u003ccode\u003esplice\u003c/code\u003e methods move all elements within a range into a specified position in another list.\u003c/li\u003e\r\n\u003cli\u003eThe \u003ccode\u003emerge\u003c/code\u003e methods combine two sorted lists while maintaining the sorting criteria.\u003c/li\u003e\r\n\u003cli\u003eThe \u003ccode\u003esort\u003c/code\u003e methods sort all elements based on a comparator.\u003c/li\u003e\r\n\u003cli\u003eThe \u003ccode\u003ereverse\u003c/code\u003e method reverses the order of all elements.\u003c/li\u003e\r\n\u003cli\u003eThe \u003ccode\u003eunique\u003c/code\u003e method removes duplicates of consecutive elements with the same value.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eDeque\u003c/h2\u003e\r\n\u003cp\u003eA deque is an implementation of a collection that is particularly efficient at insertions and removals at both ends while using less memory than most list implementations. A deque has the added feature: random access to elements.\u003c/p\u003e\r\n\u003cp\u003eA deque behaves more like a vector by invalidating iterators; any insertions and removals of elements that are not done at the beginning or end will invalidate all iterators.\u003c/p\u003e\r\n\u003cp\u003eExcept for the ability to insert easily at the beginning and end of the deque, and the fact that inserting in these locations doesn't invalidate iterators, a deque behaves like a vector for the most part.\u003c/p\u003e\r\n\u003cp\u003eIt is possible, with deques (and vectors, actually) to write classic array-style algorithms that make use of the C style index operator. Though using iterators is preferred.\u003c/p\u003e\r\n\u003ch2\u003eVector\u003c/h2\u003e\r\n\u003cp\u003eA vector provides similar capability to an array. vector is better than an array because being a collection class, it provides member functions to perform array operations reliably and safely.\u003c/p\u003e\r\n\u003ch2\u003eConcluding our Scene and Layer Classes\u003c/h2\u003e\r\n\u003cp\u003eChoose an approprate collection class between list, vector, and deque for the underlying data struction of Scene and Layer. Once we decide on a collection class there are still a few more properties that we must look at to complete our Scene and Layer classes.\u003c/p\u003e\r\n\u003cp\u003eIn our first example of layers, each layer was given a name. The ability to refer to layers by their names is fairly essential. For this reason, the Layer class should have a string-based alias attribute. Beyond this, there's not much more to say about layers for the moment. When we begin to render scenes in Lesson Five, we'll revisit the layer class to see what role it might play in rendering.\u003c/p\u003e\r\n\u003cp\u003eIn our previous discussion of layers, we said layers should not have any sense of boundary. On the other hand, it's essential that the \u003ccode\u003eScene\u003c/code\u003e class define its overall size, or width and height.\u003c/p\u003e\r\n\u003cp\u003eTaking all this into account, our \u003ccode\u003eScene\u003c/code\u003e and\u003ccode\u003e Layer\u003c/code\u003e classes are partially outlined in example 2.5.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.5\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003enamespace Framework\r\n{\r\n    class Layer\r\n    {\r\n    private:\r\n        typedef std::list PlacedGraphicCollection;\r\n\r\n    public:\r\n        typedef PlacedGraphicCollection::iterator PlacedGraphicIterator;\r\n\r\n        // insert, remove, iteration support.\r\n\r\n        // accessors to alias.\r\n\r\n    private:\r\n        PlacedGraphicCollection graphics;\r\n        std::string alias;\r\n    };\r\n\r\n    class Scene\r\n    {\r\n    private:\r\n        typedef std::list LayerCollection;\r\n\r\n    public: typedef LayerCollection::iterator LayerIterator;\r\n\r\n            // insert, remove, iteration support.\r\n\r\n            // accessors to width and height.\r\n\r\n    private:\r\n        LayerCollection layers;\r\n        int width;\r\n        int height;\r\n    };\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eIn Assignment 2, you will once again be asked to fill out any remaining implementation details.\u003c/p\u003e\r\n\u003ch2\u003eSupporting Scenes and Layers in XML\u003c/h2\u003e\r\n\u003cp\u003eWe can support scenes and layers in XML via a simple direct mapping of class to XML element, just like we had in Lesson One. This is one of the great strengths of XML; it allows you to view the file format as another way of describing the objects. If we follow this advice, we end up with the XML shown in example 2.6.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 2.6\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;Scene width=\"800\" height=\"600\"\u0026gt;\r\n    \u0026lt;Layer alias=\"sky\"\u0026gt;\r\n        \u0026lt;PlacedGraphic x=\"0\" y=\"0\"\u0026gt;\r\n            \u0026lt;VectorGraphic closed=\"true\"\u0026gt;\r\n                \u0026lt;Point x=\"0\" y=\"10\" /\u0026gt;\r\n                \u0026lt;!-- etc... --\u0026gt;\r\n            \u0026lt;/VectorGraphic\u0026gt;\r\n        \u0026lt;/PlacedGraphic\u0026gt;\r\n        \u0026lt;PlacedGraphic x=\"700\" y=\"0\"\u0026gt;\r\n            \u0026lt;VectorGraphic closed=\"true\"\u0026gt;\r\n                \u0026lt;!-- etc... --\u0026gt;\r\n            \u0026lt;/VectorGraphic\u0026gt;\r\n        \u0026lt;/PlacedGraphic\u0026gt;\r\n    \u0026lt;/Layer\u0026gt;\r\n    \u0026lt;Layer alias=\"mountains\"\u0026gt;\r\n        \u0026lt;PlacedGraphic x=\"0\" y=\"0\"\u0026gt;\r\n            \u0026lt;VectorGraphic closed=\"false\"\u0026gt;\r\n                \u0026lt;!-- etc... --\u0026gt;\r\n            \u0026lt;/VectorGraphic\u0026gt;\r\n        \u0026lt;/PlacedGraphic\u0026gt;\r\n    \u0026lt;/Layer\u0026gt;\r\n    \u0026lt;Layer alias=\"houses\"\u0026gt;\r\n        \u0026lt;!-- etc... --\u0026gt;\r\n    \u0026lt;/Layer\u0026gt;\r\n\u0026lt;/Scene\u0026gt;\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eNote that there is some ambiguity in that the order in which the layers should be placed (closest to furthest or vice versa), but this would be the same even if we introduced any form of numeric ordering; it's effectively never clear without documentation, unfortunately. The aliases on the layers above should help you deduce that the ordering is from furthest to closest. Of course, our XML would in reality never be seen by most users. Remember that in our case, all XML is both generated and read by our system—the user works with a higher level interface than in writing XML.\u003c/p\u003e\r\n\u003ch1\u003eNew in C++11\u003c/h1\u003e\r\n\u003ch2\u003eUnordered containers\u003c/h2\u003e\r\n\u003cp\u003eC++11 defines four new \u003cem\u003eunordered containers\u003c/em\u003e. These correspond to the four standard \u003cem\u003eassociative\u003c/em\u003e containers:\u003c/p\u003e\r\n\u003cpre\u003e    std::set, std::unordered_set\r\n    std::multiset, std::unordered_multiset\r\n    std::map, std::unordered_map\r\n    std::multimap, std::unordered_multimap\r\n\u003c/pre\u003e\r\n\u003cp\u003eRecall that the ordered containers keep their elements sorted for quick retrieval. This costs a little time whenever you insert a new element, and uses an object's comparison operator to do its sorting. Sometimes the objects you put into a container may not have an obvious ordering relationship, or it may be expensive to maintain their sorted order. In those cases, an unordered container may provide better performance.\u003c/p\u003e\r\n\u003cp\u003eThe unordered containers use a hashing function to keep its objects in \"buckets\", and an object's == operator to locate an object in a bucket. This is often more efficient than sorting, but may require a little effort to set up unless you're storing standard types like std::string. If you're storing user-defined types, the standard hash template can't be used directly, so you'll have to supply your own -- as well as perhaps a suitable operator==. There is a standard strategy for doing this; see Lippmann for details.\u003c/p\u003e\r\n\u003cp\u003eExcept for the hashing operations, the unordered containers provide the same interface as the ordered containers. That makes it easy to use an unordered container in place of an ordered container. Just keep in mind that if you iterate through an unordered container the elements will be unordered rather than sorted.\u003c/p\u003e\r\n\u003ch2\u003eMoving STL containers\u003c/h2\u003e\r\n\u003cp\u003eThe STL containers now provide move constructors and move assignment operators. Internally they can swap pointers to the values instead of copying them, making them much more efficient. Use those whenever possible for performance reasons -- whenever the contents of the container on the right side of a statement are no longer needed.\u003c/p\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits","WIKI_PAGE_EDIT_PATH":"/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1205169/pages/lesson-two-part-2-choosing-a-collection-that-fits/revisions","COURSE_ID":"1205169","MODULES_PATH":"/courses/1205169/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/navigation_header.bundle-d10139d096.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/default.js" defer="defer"></script>
<script src="./Lesson Two, Part 2_ Choosing a Collection That Fits_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>