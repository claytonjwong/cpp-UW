<!DOCTYPE html>
<!-- saved from url=(0120)https://canvas.uw.edu/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files?module_item_id=8253605 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson One, Part 3: Persistence, Serialization, and Files: CPROGRM 713 A Su 18: C++ Programming: Advanced</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Lesson 3 Persistence, Serialization, and Files_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Lesson 3 Persistence, Serialization, and Files_files/common-0b903cdc9b.css">
  <script type="text/javascript" async="" src="./Lesson 3 Persistence, Serialization, and Files_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-eaf1bda494.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Lesson 3 Persistence, Serialization, and Files_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Lesson 3 Persistence, Serialization, and Files_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Lesson 3 Persistence, Serialization, and Files_files/custom.css">
<link rel="stylesheet" media="all" href="./Lesson 3 Persistence, Serialization, and Files_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Lesson 3 Persistence, Serialization, and Files_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Lesson 3 Persistence, Serialization, and Files_files/vendor.bundle-24e68f82e5.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/appBootstrap.bundle-d1dcd6b0ef.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/common.bundle-99f5b94735.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/wiki_page_show.bundle-f24ccc441e.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1205169 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files?module_item_id=8253605#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Lesson 3 Persistence, Serialization, and Files_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files?module_item_id=8253605#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Lesson 3 Persistence, Serialization, and Files_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169"><span class="ellipsible">CPROGRM 713 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson One, Part 3: Persistence, Serialization, and Files</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Summer 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1205169" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/external_tools/63603" title="Info &amp; Help" class="context_external_tool_63603" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson One, Part 3: Persistence, Serialization, and Files</h1>
  
    <div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>persistence</li>
</ul>
</div>
<p>For many students, persistence is a new concept. Up until this point you have no doubt been exposed to working with files in unstructured (and perhaps structured as well) ways, but persistence is a step beyond (or to the side) of this. We will look briefly at three paradigms of persistence to give some breadth to the choices we make and an understanding of what we should strive for. In C++, specifically, file formats are still the overwhelming norm, while serialization is making leaps and bounds in certain fields (if you've used many Microsoft libraries, you already know what serialization means). If you are (or will be) working with Enterprise Systems, transparent persistence and serialization are more common concepts than if you are (or will be) working with Consumer Applications. Some of this has to do with interoperability (as we will see in the section below on File Formats).</p>
<h2>Transparent Persistence</h2>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>transparent persistence</li>
</ul>
</div>
<p>Transparent persistence is an object-oriented answer to the fact that things must be "saved" at times, and that applications will be opened and closed, services stopped, and so forth. Transparent persistence simply abstracts us from these issues by abstracting the developer from where exactly the objects are located (whether in RAM or on hard disk). In transparent persistence, objects don't get destructed when a program is closed; they simply are moved to permanent storage—automatically, of course.</p>
<p>This is truly an ideal world. The developer can design and implement free of translation concerns; objects have less complicated states; there's no need to worry about hopelessly mundane complexities like what delimiter to use in the file format; and, best of all, it's all automatic: not even an <code>onPersist </code>method to overload. Think of it as literally taking the object that sits in memory and putting it onto disk (or other storage medium). It's a surprisingly simple concept; yet few languages have provided it and it's still the exception, not the rule. The power of C++ is in its ubiquity, standardness, efficiency, and flexibility.</p>
<h2>Serialization</h2>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>serialization</li>
</ul>
</div>
<p>Serialization is the term for the current de facto standard means of persisting objects. If you've worked with certain Microsoft libraries or are familiar with Java, you might have seen an ISerializable interface and methods like <code>onSerialize</code>. With serialization, each object that can be persisted usually implements an interface such as ISerializable, which includes operations to read and write the object to a stream.</p>
<p>For this to work elegantly, it must be applied down to the very last object, similar to the swap idiom you learned about in <span class="italics">C++: Intermediate</span>. When serialization is used ubiquitously like this, it can be fairly straightforward to work with; just implement the ISerializable interface and your object will be serialized when and how it should be by those who can make such decisions.</p>
<h2>File Formats</h2>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>file-format based persistence</li>
</ul>
</div>
<p>Consumer applications most commonly use file-format based persistence. This stems primarily from the past, but also from the need for portability (or interoperability, or whatever you may call it). The portability issue is that an openly defined simple file format usually will work on multiple platforms and multiple products can support it. For example, Rich Text Format (RTF) is almost always supported by word processors. If each word processor simply used its own home-grown means of serialization or different language-defined means of transparent persistence, portability would be foiled.</p>
<p>A more ideal approach to persistence would take the best of both worlds (transparency and portability) by creating standardized means of object storage, allowing all transparent-persistence vendors to work in the same language. Don't expect this any time soon, though, as even the newest of languages haven't taken this approach to heart.</p>
<p>File formats will be a reality for application developers for much of the foreseeable future, and applications will almost never be able to assume just one stable file format. In our vector-graphic application, we'd no doubt need to make sure to support at least a half-dozen common (and radically different) file formats. As each year passed, so would the file formats, whether because a popular product had gone out of vogue or because new features were needed, and thus, new versions of the file format would arise.</p>
<h2>An XML-like File Format</h2>
<p>Since we're working mostly in the domain of consumer applications, a file format-based approach is what our system calls for as its solution to persistence. For our file format, we'll use XML (eXtensible Markup Language) or something that closely resembles it (actual XML might require more information than what we'll be using). XML is not so much a language, as a common framework for defining simple structured information. This course will not focus much on XML, but be aware that the file format we will use and expand upon is done in an XML-ish manner (once again, it might not be proper and standard).</p>
<p>Example 1.4 will be used to test the assignment that concludes this lesson.</p>
<table style="width: 320px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 1.4</th>
</tr>
<tr>
<td>
<pre><code>&lt;VectorGraphic closed="true"&gt;<br>&nbsp; &lt;Point x="0" y="0"/&gt;<br>&nbsp; &lt;Point x="10" y="0"&gt;<br>&nbsp; &lt;/Point&gt;<br>&nbsp; &lt;Point x="10" y="10"/&gt;<br>&nbsp; &lt;Point x="0" y="10"/&gt;<br>&lt;/VectorGraphic&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Example 1.4 illustrates a few of the more fundamental rules of XML, which you will need to take into account in your support for this file format.</p>
<ol>
<li>The end of an element is marked by a <code>/</code> character in its tag. If it is a composite element, the <code>/</code> character will be at the very beginning of the tag. If it is a primitive element, the <code>/ </code>will be at the end.</li>
<li>White space is legal in the places where it varies in the example, but not before the name of the tag or after the forward slash that ends the primitive tag.</li>
<li>XML is case sensitive.</li>
<li>Parameter values are quoted.</li>
<li>There is only a syntactical difference between the <code>&lt;Point&gt; &lt;/Point&gt;</code> and <code>&lt;Point /&gt;</code> when nothing lies between the beginning and ending tags.</li>
</ol>
<p>This basic file format should suffice for our current needs, though, in the future, it is clear that we'd have to support other formats besides our own, home-grown one. During this course, we'll be sticking to our own file format, in order to stay focused on the system and not on the way in which it is persisted. In an industry-quality system, we'd have to allow an easy way to plug in new file-format support; we might not even need to provide our own format, but instead could use an industry-standard one that met our needs.</p>
<h2>Pushing File Formats Into the Client</h2>
<p>File formats have strong change cases; which to support and how to support them almost always changes regularly throughout the life of a product. On top of this, not all file formats for a given purpose have the same design epiphanies, so abstraction isn't always possible. For example, we can't assume we can come up with one universal interface and process in our framework (or client) that works with all file formats (which would just be different implementations of the interface)—or at least the task would not always be as rewarding as you might think.</p>
<p>There are many interesting approaches to supporting multiple file formats (or even just one) elegantly, but almost all of these are in the client's domain. Frameworks are not upgraded regularly; they're built for a lifetime that often encompasses more than one generation of products. Since we can't make assumptions in our framework about tomorrow's file formats, and we can't expect to anticipate every client's needs, we won't provide one-size-fits-all file format support in our framework, but instead keep all persistence on the client side.</p>
<h2>Using Streams in the XML Parsing</h2>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>peek operation</li>
<li>stringstreams</li>
</ul>
</div>
<p>Although you should already be familiar with streams, you will need a few less-than-common operations to cleanly parse the XML file. One of these is the peek operation, which allows you to get the next character from the stream without actually removing it from the stream. Although you can put characters back onto a stream using <code>putback</code> and <code>ungetc</code>, these methods are not reliable, as not all stream implementations allow putting more than one character back (which doesn't provide much over <code>peek</code>).</p>
<p>Another perhaps less-commonly used technique on which you might find yourself relying heavily is the use of stringstreams, as available in the <code>&lt;sstream&gt;</code> standard header. A stringstream turns a string into a stream, effectively. You can use the stringstream class for either extracting elements from a string using stream operations, or inserting elements into a stream and requesting a string object from the stream. A stringstream (available as <code>istringstre</code><code>am</code>, <code>ostringstream</code>, or just <code>stringstream</code> for both input and output) has a normal stream interface with a few additions that will be helpful to you.</p>
<ul>
<li>
<code>std::istringstream </code>and <code>std::stringstream </code>provide a constructor that takes a single string parameter. This string is what will be used as the stream's underlying data.</li>
<li>Two <code>str()</code> methods are provided. One takes a single parameter of a string and the other returns a string (this of course, is only clear if you look at documentation, because C++ Standard Library naming is often vague and abbreviated). These two methods, respectively, set the entire contents of the stream and get the entire contents of the string. Note that the <code>str()</code> that returns the contents of the buffer will return the full buffer, not where you currently might be positioned in it. So, for example, the output of the following lines of code would be "avocado is a fruit."
<table style="width: 459px; height: 150px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 1.5</th>
</tr>
<tr>
<td><code>std::istringstream sourceStream("avocado is a fruit");<br>std::string firstString;<br>sourceStream &gt;&gt; firstString;<br>std::cout &lt;&lt; sourceStream.str();</code></td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>One final general-purpose tool for working with streams is the <code>getline</code> function as defined in <code>&lt;string&gt;</code>. This algorithm is of the form<code> "std::istream&amp; getline (std::istream&amp; sourceStream, std::string&amp; destination, char delimiter = '\n')"</code> and is fairly straightforward. It reads, ignoring all leading white space, up until the first occurrence of the specified delimiter, which defaults to the end-of-line character. The ability to specify a delimiter other than the end of a line to <code>getline</code> should necessitate a name more like "gettoken," of course. Be aware that there is also a <code>getline</code> method provided by the istream interface that is not string-based, but instead c-string based.</p>
<h1>Some more C++11 concepts and features</h1>
<h2>constexpr</h2>
<p>C++11 introduces the keyword "constexpr", which enables an expression to be evaluated at compile time. It's worth using whenever possible to maximize what is done at compile time vs. run time.</p>
<p>A <i>constant expression</i> is an expression whose value cannot change and that can be evaluated at compile time (Lippman). For example, a literal (e.g., 42) is a constant expression. A const object initialized with a constant expression is a constant expression:</p>
<pre>    const int max_size = 42;
    const int boundary = max_size + 1;
</pre>
<p>We can tell the compiler to verify that a variable is a constant expression by declaring it with the <i>constexpr</i> keyword:</p>
<pre>    constexpr int max_size = 42;
    constexpr boundary = max_size + 1;
</pre>
<p>Functions can also be constexpr, if their return types and parameters are literals, and they contain a single return statement. For example:</p>
<pre>    constexpr int array_size(int sz) { return sz + 1; }
</pre>
<p>Such functions can then be used for compile-time actions like declaring the size of an array:</p>
<pre>    std::array&lt;int, array_size(max_size)&gt; a;
</pre>
<p>A constexpr function can be called with a non-const argument, but then the result is not a constant expression -- and in that case it could not be used at compile-time, e.g. to declare the size of an array).</p>
<p>Constructors and other class member functions can also be declared constexpr, which means that user-defined types can now be literal also (because their values can be determined during compilation), and some operations on user-defined objects can now be available at compile time. (See Meyers for a Point class example.)</p>
<h2>Literals</h2>
<p>A literal is a value. The compiler looks at that value, figures out its type, and creates an object of that type with that value.</p>
<p>We can affect the type the compiler creates by decorating the value with some different prefixes and suffixes. For example:</p>
<pre>    20      // decimal integer
    0x14    // hexadecimal integer
    20U     // unsigned integer
    20LL    // long long
    20.2F   // float (by default, floating point literals are double)
    20.2L   // long double
</pre>
<p>For characters and character strings:</p>
<pre>    'a'             // character literal
    "char string"   // string literal
    L"wide"         // wide character string
</pre>
<p>C++11 adds some new string literals:</p>
<pre>    u"hello"    // Unicode 16 string (char16_t)
    U"hello"    // Unicode 32 string (char32_t)
    u8"hello"   // utf-8 string literal (char)
</pre>
<p>Another new C++11 feature is the "raw string" literal. Traditional string literals are surrounded with double quotes, and any special characters (like newlines) in the string will start with a backslash (e.g., \n for newline). If you wanted a string containing a backslash or some double quotes, you would have to prefix those with a backslash. So to set a string equal to something like this: \"word1"\"word2"\, I would do this:</p>
<pre>    string s = "\\\"word1\"\\\"word2\"\\";  // I think that's right.
</pre>
<p>The raw string literal makes this much easier:</p>
<pre>    string s = R"(\"word1"\"word2"\)";  // that's certainly easier to read
</pre>
<p>Raw strings use the notation R"(ccc)" for a sequence of characters ccc. The parentheses are used to allow "unescaped" double quotes in the string. But now, you might notice, we could have a problem if we want parentheses in our string. That's handled by allowing delimiters before and after the enclosing parentheses, like this:</p>
<pre>    string s = R"***("Now I can (if I wish) put parentheses in here")***";
</pre>
<p>Raw strings also can contain literal newlines, like this:</p>
<pre>    string s = R"(line1
    line2
    line3)";
</pre>
<p>C++11 also lets us create <em>user-defined literals</em>... literals for user-defined types or new forms of literals for built-in types. These are supported by mapping a given suffix to a desired type by defining an operator"" function.</p>
<p>For example, let's say I have a user-defined Time class. I could do something like this:</p>
<pre>    Time operator"" _m(const char* minutes)
    {
        return Time(minutes); // assumes appropriate Time constuctor
    }

    Time t = 20_m;
</pre>
<p>Note: at the time of writing, my compiler required user-defined literal suffixes to start with "_".</p>
<h2>Generalized POD</h2>
<p>The term "POD" has been around a while; it stands for "Plain Old Data"... in contrast to, say, a complicated user-defined class. It is data that occupies a contiguous sequence of bytes in memory. Sometimes we want to use POD objects for the speed and efficiency with which they can be moved around. Using std::memcpy() to copy a large array of elements is much faster than calling a bunch of copy constructors.</p>
<p>C++11 defines rules for being able to treat any given object as a POD. See Stroustrup for a complete description. The details can get complicated, but at a high-level there are a few general characteristics of a POD:</p>
<ul>
<li>it has to be trivial -- support trivial/default copy and move operations</li>
<li>it has to have a standard layout -- no vptr</li>
<li>members and base classes also have to be PODs</li>
</ul>
<p>Fortunately, you don't have to memorize all the rules to know whether you can treat an object as a POD. The standard library provides an "is_pod" predicate function in &lt;type_traits&gt; that makes it easy. Here's an example from Stroustrup:</p>
<pre>    template&lt;typename T&gt;
    void optimized_copy(T* source, T* destination, int count)
    {
        if (std::is_pod::value)
        {
            // can use optimized memcpy
            std::memcpy(source, destination, count);
        }
        else
        {
            // must copy each individually
            for (int i = 0; i &lt; count; ++i)
            {
                destination[i] = source[i];
            }
        }
    }
</pre>
<p>This kind of optimization should only be done in low-level code (e.g., I/O routines), and only if necessary.</p>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253604" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson One, Part 2: Properties of Vector Graphics" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson One, Part 2: Properties of Vector Graphics</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-discussion&#39;&gt;&lt;/i&gt; Discussion of Lesson One and Assignment 1">
        <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253606" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Discussion of Lesson One and Assignment 1</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">ec5fb9dc-af46-4ca7-bc9d-4f61b1369d0f</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-53dac18d10.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-b4d65fe883.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/ec5fb9dc-af46-4ca7-bc9d-4f61b1369d0f?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiZWM1ZmI5ZGMtYWY0Ni00Y2E3LWJjOWQtNGY2MWIxMzY5ZDBmIiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wNy0wOVQyMzozOToyMS41MFoifQ.WKNI8izhIEGf_aBoiY60N6DHsrZ_b-eGGyfuvugLiIo","context_asset_string":"course_1205169","ping_url":"https://canvas.uw.edu/api/v1/courses/1205169/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1205169/pages","WIKI_PAGE":{"title":"Lesson One, Part 3: Persistence, Serialization, and Files","created_at":"2018-03-16T21:50:46Z","url":"lesson-one-part-3-persistence-serialization-and-files","editing_roles":"teachers","page_id":"2704795","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files","updated_at":"2018-03-16T21:50:45Z","locked_for_user":false,"body":"\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003epersistence\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eFor many students, persistence is a new concept. Up until this point you have no doubt been exposed to working with files in unstructured (and perhaps structured as well) ways, but persistence is a step beyond (or to the side) of this. We will look briefly at three paradigms of persistence to give some breadth to the choices we make and an understanding of what we should strive for. In C++, specifically, file formats are still the overwhelming norm, while serialization is making leaps and bounds in certain fields (if you've used many Microsoft libraries, you already know what serialization means). If you are (or will be) working with Enterprise Systems, transparent persistence and serialization are more common concepts than if you are (or will be) working with Consumer Applications. Some of this has to do with interoperability (as we will see in the section below on File Formats).\u003c/p\u003e\r\n\u003ch2\u003eTransparent Persistence\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003etransparent persistence\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eTransparent persistence is an object-oriented answer to the fact that things must be \"saved\" at times, and that applications will be opened and closed, services stopped, and so forth. Transparent persistence simply abstracts us from these issues by abstracting the developer from where exactly the objects are located (whether in RAM or on hard disk). In transparent persistence, objects don't get destructed when a program is closed; they simply are moved to permanent storage—automatically, of course.\u003c/p\u003e\r\n\u003cp\u003eThis is truly an ideal world. The developer can design and implement free of translation concerns; objects have less complicated states; there's no need to worry about hopelessly mundane complexities like what delimiter to use in the file format; and, best of all, it's all automatic: not even an \u003ccode\u003eonPersist \u003c/code\u003emethod to overload. Think of it as literally taking the object that sits in memory and putting it onto disk (or other storage medium). It's a surprisingly simple concept; yet few languages have provided it and it's still the exception, not the rule. The power of C++ is in its ubiquity, standardness, efficiency, and flexibility.\u003c/p\u003e\r\n\u003ch2\u003eSerialization\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eserialization\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eSerialization is the term for the current de facto standard means of persisting objects. If you've worked with certain Microsoft libraries or are familiar with Java, you might have seen an ISerializable interface and methods like \u003ccode\u003eonSerialize\u003c/code\u003e. With serialization, each object that can be persisted usually implements an interface such as ISerializable, which includes operations to read and write the object to a stream.\u003c/p\u003e\r\n\u003cp\u003eFor this to work elegantly, it must be applied down to the very last object, similar to the swap idiom you learned about in \u003cspan class=\"italics\"\u003eC++: Intermediate\u003c/span\u003e. When serialization is used ubiquitously like this, it can be fairly straightforward to work with; just implement the ISerializable interface and your object will be serialized when and how it should be by those who can make such decisions.\u003c/p\u003e\r\n\u003ch2\u003eFile Formats\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003efile-format based persistence\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eConsumer applications most commonly use file-format based persistence. This stems primarily from the past, but also from the need for portability (or interoperability, or whatever you may call it). The portability issue is that an openly defined simple file format usually will work on multiple platforms and multiple products can support it. For example, Rich Text Format (RTF) is almost always supported by word processors. If each word processor simply used its own home-grown means of serialization or different language-defined means of transparent persistence, portability would be foiled.\u003c/p\u003e\r\n\u003cp\u003eA more ideal approach to persistence would take the best of both worlds (transparency and portability) by creating standardized means of object storage, allowing all transparent-persistence vendors to work in the same language. Don't expect this any time soon, though, as even the newest of languages haven't taken this approach to heart.\u003c/p\u003e\r\n\u003cp\u003eFile formats will be a reality for application developers for much of the foreseeable future, and applications will almost never be able to assume just one stable file format. In our vector-graphic application, we'd no doubt need to make sure to support at least a half-dozen common (and radically different) file formats. As each year passed, so would the file formats, whether because a popular product had gone out of vogue or because new features were needed, and thus, new versions of the file format would arise.\u003c/p\u003e\r\n\u003ch2\u003eAn XML-like File Format\u003c/h2\u003e\r\n\u003cp\u003eSince we're working mostly in the domain of consumer applications, a file format-based approach is what our system calls for as its solution to persistence. For our file format, we'll use XML (eXtensible Markup Language) or something that closely resembles it (actual XML might require more information than what we'll be using). XML is not so much a language, as a common framework for defining simple structured information. This course will not focus much on XML, but be aware that the file format we will use and expand upon is done in an XML-ish manner (once again, it might not be proper and standard).\u003c/p\u003e\r\n\u003cp\u003eExample 1.4 will be used to test the assignment that concludes this lesson.\u003c/p\u003e\r\n\u003ctable style=\"width: 320px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 1.4\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;VectorGraphic closed=\"true\"\u0026gt;\u003cbr\u003e  \u0026lt;Point x=\"0\" y=\"0\"/\u0026gt;\u003cbr\u003e  \u0026lt;Point x=\"10\" y=\"0\"\u0026gt;\u003cbr\u003e  \u0026lt;/Point\u0026gt;\u003cbr\u003e  \u0026lt;Point x=\"10\" y=\"10\"/\u0026gt;\u003cbr\u003e  \u0026lt;Point x=\"0\" y=\"10\"/\u0026gt;\u003cbr\u003e\u0026lt;/VectorGraphic\u0026gt;\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eExample 1.4 illustrates a few of the more fundamental rules of XML, which you will need to take into account in your support for this file format.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe end of an element is marked by a \u003ccode\u003e/\u003c/code\u003e character in its tag. If it is a composite element, the \u003ccode\u003e/\u003c/code\u003e character will be at the very beginning of the tag. If it is a primitive element, the \u003ccode\u003e/ \u003c/code\u003ewill be at the end.\u003c/li\u003e\r\n\u003cli\u003eWhite space is legal in the places where it varies in the example, but not before the name of the tag or after the forward slash that ends the primitive tag.\u003c/li\u003e\r\n\u003cli\u003eXML is case sensitive.\u003c/li\u003e\r\n\u003cli\u003eParameter values are quoted.\u003c/li\u003e\r\n\u003cli\u003eThere is only a syntactical difference between the \u003ccode\u003e\u0026lt;Point\u0026gt; \u0026lt;/Point\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;Point /\u0026gt;\u003c/code\u003e when nothing lies between the beginning and ending tags.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThis basic file format should suffice for our current needs, though, in the future, it is clear that we'd have to support other formats besides our own, home-grown one. During this course, we'll be sticking to our own file format, in order to stay focused on the system and not on the way in which it is persisted. In an industry-quality system, we'd have to allow an easy way to plug in new file-format support; we might not even need to provide our own format, but instead could use an industry-standard one that met our needs.\u003c/p\u003e\r\n\u003ch2\u003ePushing File Formats Into the Client\u003c/h2\u003e\r\n\u003cp\u003eFile formats have strong change cases; which to support and how to support them almost always changes regularly throughout the life of a product. On top of this, not all file formats for a given purpose have the same design epiphanies, so abstraction isn't always possible. For example, we can't assume we can come up with one universal interface and process in our framework (or client) that works with all file formats (which would just be different implementations of the interface)—or at least the task would not always be as rewarding as you might think.\u003c/p\u003e\r\n\u003cp\u003eThere are many interesting approaches to supporting multiple file formats (or even just one) elegantly, but almost all of these are in the client's domain. Frameworks are not upgraded regularly; they're built for a lifetime that often encompasses more than one generation of products. Since we can't make assumptions in our framework about tomorrow's file formats, and we can't expect to anticipate every client's needs, we won't provide one-size-fits-all file format support in our framework, but instead keep all persistence on the client side.\u003c/p\u003e\r\n\u003ch2\u003eUsing Streams in the XML Parsing\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003epeek operation\u003c/li\u003e\r\n\u003cli\u003estringstreams\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eAlthough you should already be familiar with streams, you will need a few less-than-common operations to cleanly parse the XML file. One of these is the peek operation, which allows you to get the next character from the stream without actually removing it from the stream. Although you can put characters back onto a stream using \u003ccode\u003eputback\u003c/code\u003e and \u003ccode\u003eungetc\u003c/code\u003e, these methods are not reliable, as not all stream implementations allow putting more than one character back (which doesn't provide much over \u003ccode\u003epeek\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eAnother perhaps less-commonly used technique on which you might find yourself relying heavily is the use of stringstreams, as available in the \u003ccode\u003e\u0026lt;sstream\u0026gt;\u003c/code\u003e standard header. A stringstream turns a string into a stream, effectively. You can use the stringstream class for either extracting elements from a string using stream operations, or inserting elements into a stream and requesting a string object from the stream. A stringstream (available as \u003ccode\u003eistringstre\u003c/code\u003e\u003ccode\u003eam\u003c/code\u003e, \u003ccode\u003eostringstream\u003c/code\u003e, or just \u003ccode\u003estringstream\u003c/code\u003e for both input and output) has a normal stream interface with a few additions that will be helpful to you.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003estd::istringstream \u003c/code\u003eand \u003ccode\u003estd::stringstream \u003c/code\u003eprovide a constructor that takes a single string parameter. This string is what will be used as the stream's underlying data.\u003c/li\u003e\r\n\u003cli\u003eTwo \u003ccode\u003estr()\u003c/code\u003e methods are provided. One takes a single parameter of a string and the other returns a string (this of course, is only clear if you look at documentation, because C++ Standard Library naming is often vague and abbreviated). These two methods, respectively, set the entire contents of the stream and get the entire contents of the string. Note that the \u003ccode\u003estr()\u003c/code\u003e that returns the contents of the buffer will return the full buffer, not where you currently might be positioned in it. So, for example, the output of the following lines of code would be \"avocado is a fruit.\"\r\n\u003ctable style=\"width: 459px; height: 150px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 1.5\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003ccode\u003estd::istringstream sourceStream(\"avocado is a fruit\");\u003cbr\u003estd::string firstString;\u003cbr\u003esourceStream \u0026gt;\u0026gt; firstString;\u003cbr\u003estd::cout \u0026lt;\u0026lt; sourceStream.str();\u003c/code\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOne final general-purpose tool for working with streams is the \u003ccode\u003egetline\u003c/code\u003e function as defined in \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e. This algorithm is of the form\u003ccode\u003e \"std::istream\u0026amp; getline (std::istream\u0026amp; sourceStream, std::string\u0026amp; destination, char delimiter = '\\n')\"\u003c/code\u003e and is fairly straightforward. It reads, ignoring all leading white space, up until the first occurrence of the specified delimiter, which defaults to the end-of-line character. The ability to specify a delimiter other than the end of a line to \u003ccode\u003egetline\u003c/code\u003e should necessitate a name more like \"gettoken,\" of course. Be aware that there is also a \u003ccode\u003egetline\u003c/code\u003e method provided by the istream interface that is not string-based, but instead c-string based.\u003c/p\u003e\r\n\u003ch1\u003eSome more C++11 concepts and features\u003c/h1\u003e\r\n\u003ch2\u003econstexpr\u003c/h2\u003e\r\n\u003cp\u003eC++11 introduces the keyword \"constexpr\", which enables an expression to be evaluated at compile time. It's worth using whenever possible to maximize what is done at compile time vs. run time.\u003c/p\u003e\r\n\u003cp\u003eA \u003ci\u003econstant expression\u003c/i\u003e is an expression whose value cannot change and that can be evaluated at compile time (Lippman). For example, a literal (e.g., 42) is a constant expression. A const object initialized with a constant expression is a constant expression:\u003c/p\u003e\r\n\u003cpre\u003e    const int max_size = 42;\r\n    const int boundary = max_size + 1;\r\n\u003c/pre\u003e\r\n\u003cp\u003eWe can tell the compiler to verify that a variable is a constant expression by declaring it with the \u003ci\u003econstexpr\u003c/i\u003e keyword:\u003c/p\u003e\r\n\u003cpre\u003e    constexpr int max_size = 42;\r\n    constexpr boundary = max_size + 1;\r\n\u003c/pre\u003e\r\n\u003cp\u003eFunctions can also be constexpr, if their return types and parameters are literals, and they contain a single return statement. For example:\u003c/p\u003e\r\n\u003cpre\u003e    constexpr int array_size(int sz) { return sz + 1; }\r\n\u003c/pre\u003e\r\n\u003cp\u003eSuch functions can then be used for compile-time actions like declaring the size of an array:\u003c/p\u003e\r\n\u003cpre\u003e    std::array\u0026lt;int, array_size(max_size)\u0026gt; a;\r\n\u003c/pre\u003e\r\n\u003cp\u003eA constexpr function can be called with a non-const argument, but then the result is not a constant expression -- and in that case it could not be used at compile-time, e.g. to declare the size of an array).\u003c/p\u003e\r\n\u003cp\u003eConstructors and other class member functions can also be declared constexpr, which means that user-defined types can now be literal also (because their values can be determined during compilation), and some operations on user-defined objects can now be available at compile time. (See Meyers for a Point class example.)\u003c/p\u003e\r\n\u003ch2\u003eLiterals\u003c/h2\u003e\r\n\u003cp\u003eA literal is a value. The compiler looks at that value, figures out its type, and creates an object of that type with that value.\u003c/p\u003e\r\n\u003cp\u003eWe can affect the type the compiler creates by decorating the value with some different prefixes and suffixes. For example:\u003c/p\u003e\r\n\u003cpre\u003e    20      // decimal integer\r\n    0x14    // hexadecimal integer\r\n    20U     // unsigned integer\r\n    20LL    // long long\r\n    20.2F   // float (by default, floating point literals are double)\r\n    20.2L   // long double\r\n\u003c/pre\u003e\r\n\u003cp\u003eFor characters and character strings:\u003c/p\u003e\r\n\u003cpre\u003e    'a'             // character literal\r\n    \"char string\"   // string literal\r\n    L\"wide\"         // wide character string\r\n\u003c/pre\u003e\r\n\u003cp\u003eC++11 adds some new string literals:\u003c/p\u003e\r\n\u003cpre\u003e    u\"hello\"    // Unicode 16 string (char16_t)\r\n    U\"hello\"    // Unicode 32 string (char32_t)\r\n    u8\"hello\"   // utf-8 string literal (char)\r\n\u003c/pre\u003e\r\n\u003cp\u003eAnother new C++11 feature is the \"raw string\" literal. Traditional string literals are surrounded with double quotes, and any special characters (like newlines) in the string will start with a backslash (e.g., \\n for newline). If you wanted a string containing a backslash or some double quotes, you would have to prefix those with a backslash. So to set a string equal to something like this: \\\"word1\"\\\"word2\"\\, I would do this:\u003c/p\u003e\r\n\u003cpre\u003e    string s = \"\\\\\\\"word1\\\"\\\\\\\"word2\\\"\\\\\";  // I think that's right.\r\n\u003c/pre\u003e\r\n\u003cp\u003eThe raw string literal makes this much easier:\u003c/p\u003e\r\n\u003cpre\u003e    string s = R\"(\\\"word1\"\\\"word2\"\\)\";  // that's certainly easier to read\r\n\u003c/pre\u003e\r\n\u003cp\u003eRaw strings use the notation R\"(ccc)\" for a sequence of characters ccc. The parentheses are used to allow \"unescaped\" double quotes in the string. But now, you might notice, we could have a problem if we want parentheses in our string. That's handled by allowing delimiters before and after the enclosing parentheses, like this:\u003c/p\u003e\r\n\u003cpre\u003e    string s = R\"***(\"Now I can (if I wish) put parentheses in here\")***\";\r\n\u003c/pre\u003e\r\n\u003cp\u003eRaw strings also can contain literal newlines, like this:\u003c/p\u003e\r\n\u003cpre\u003e    string s = R\"(line1\r\n    line2\r\n    line3)\";\r\n\u003c/pre\u003e\r\n\u003cp\u003eC++11 also lets us create \u003cem\u003euser-defined literals\u003c/em\u003e... literals for user-defined types or new forms of literals for built-in types. These are supported by mapping a given suffix to a desired type by defining an operator\"\" function.\u003c/p\u003e\r\n\u003cp\u003eFor example, let's say I have a user-defined Time class. I could do something like this:\u003c/p\u003e\r\n\u003cpre\u003e    Time operator\"\" _m(const char* minutes)\r\n    {\r\n        return Time(minutes); // assumes appropriate Time constuctor\r\n    }\r\n\r\n    Time t = 20_m;\r\n\u003c/pre\u003e\r\n\u003cp\u003eNote: at the time of writing, my compiler required user-defined literal suffixes to start with \"_\".\u003c/p\u003e\r\n\u003ch2\u003eGeneralized POD\u003c/h2\u003e\r\n\u003cp\u003eThe term \"POD\" has been around a while; it stands for \"Plain Old Data\"... in contrast to, say, a complicated user-defined class. It is data that occupies a contiguous sequence of bytes in memory. Sometimes we want to use POD objects for the speed and efficiency with which they can be moved around. Using std::memcpy() to copy a large array of elements is much faster than calling a bunch of copy constructors.\u003c/p\u003e\r\n\u003cp\u003eC++11 defines rules for being able to treat any given object as a POD. See Stroustrup for a complete description. The details can get complicated, but at a high-level there are a few general characteristics of a POD:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eit has to be trivial -- support trivial/default copy and move operations\u003c/li\u003e\r\n\u003cli\u003eit has to have a standard layout -- no vptr\u003c/li\u003e\r\n\u003cli\u003emembers and base classes also have to be PODs\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFortunately, you don't have to memorize all the rules to know whether you can treat an object as a POD. The standard library provides an \"is_pod\" predicate function in \u0026lt;type_traits\u0026gt; that makes it easy. Here's an example from Stroustrup:\u003c/p\u003e\r\n\u003cpre\u003e    template\u0026lt;typename T\u0026gt;\r\n    void optimized_copy(T* source, T* destination, int count)\r\n    {\r\n        if (std::is_pod::value)\r\n        {\r\n            // can use optimized memcpy\r\n            std::memcpy(source, destination, count);\r\n        }\r\n        else\r\n        {\r\n            // must copy each individually\r\n            for (int i = 0; i \u0026lt; count; ++i)\r\n            {\r\n                destination[i] = source[i];\r\n            }\r\n        }\r\n    }\r\n\u003c/pre\u003e\r\n\u003cp\u003eThis kind of optimization should only be done in low-level code (e.g., I/O routines), and only if necessary.\u003c/p\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files","WIKI_PAGE_EDIT_PATH":"/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1205169/pages/lesson-one-part-3-persistence-serialization-and-files/revisions","COURSE_ID":"1205169","MODULES_PATH":"/courses/1205169/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Lesson 3 Persistence, Serialization, and Files_files/navigation_header.bundle-b428ab9bf4.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/default.js" defer="defer"></script>
<script src="./Lesson 3 Persistence, Serialization, and Files_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>