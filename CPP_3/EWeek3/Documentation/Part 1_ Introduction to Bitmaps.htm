<!DOCTYPE html>
<!-- saved from url=(0110)https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps?module_item_id=8253618 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson Three, Part 1: Introduction to Bitmaps: CPROGRM 713 A Su 18: C++ Programming: Advanced</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Part 1_ Introduction to Bitmaps_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Part 1_ Introduction to Bitmaps_files/common-a1fb70dab0.css">
  <script type="text/javascript" async="" src="./Part 1_ Introduction to Bitmaps_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-9f640d24ea.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Part 1_ Introduction to Bitmaps_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Part 1_ Introduction to Bitmaps_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Part 1_ Introduction to Bitmaps_files/custom.css">
<link rel="stylesheet" media="all" href="./Part 1_ Introduction to Bitmaps_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Part 1_ Introduction to Bitmaps_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Part 1_ Introduction to Bitmaps_files/vendor.bundle-e87d116ea9.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/appBootstrap.bundle-0661001892.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/common.bundle-f89441110c.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/wiki_page_show.bundle-230f977ba8.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1205169 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps?module_item_id=8253618#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Part 1_ Introduction to Bitmaps_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps?module_item_id=8253618#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Part 1_ Introduction to Bitmaps_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169"><span class="ellipsible">CPROGRM 713 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson Three, Part 1: Introduction to Bitmaps</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Summer 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1205169" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/announcements" title="Announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/external_tools/63603" title="Info &amp; Help" class="context_external_tool_63603" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson Three, Part 1: Introduction to Bitmaps</h1>
  
    
  
  
    <div class="actionBox">
<h6>Required Reading</h6>
<ul>
<li>
<em>The C++ Standard Library 2nd edition: </em>Chapter 9 (STL Iterators)</li>
</ul>
<p><em>and</em></p>
<ul>
<li>
<cite>The C++ Programming Language 4th edition</cite>, Chapters 32 (STL Algorithms) and 33 (STL Iterators)</li>
</ul>
</div>
<p>This lesson is one of two that will aid you in designing and implementing support for bitmap graphics. After you have completed this lesson and Lesson Four, you will integrate this support into our vector graphics system so that we can render vector graphics to bitmap files. Later, we can support simple bitmap graphics alongside vector graphics and use bitmap graphics for patterns in filling vector graphics.</p>
<p>In supporting bitmaps, we will use the bitmap file format, which is supported by your Web browser and a wide variety of free and commercial software. Remember to differentiate between the bitmap file format and the essence of what bitmap graphics are. In the next lesson, we will introduce ways of supporting other file formats, such as GIF, TIFF, and JPEG, with ease (though we will not actually provide the support, just make the spot to plug it in).</p>
<h2>Lesson Objectives</h2>
<p>By the end of this lesson, you will be able to implement the remaining portions of the Bitmap, WindowsBitmapHeader, and binary primitive (Byte, Word, DoubleWord) classes.</p>
<h2>The Windows Bitmap File Format</h2>
<p>There are actually sub-categorizations of the bitmap file formats, including windows bitmaps, OS/2 bitmaps, or other breeds of bitmaps. We'll focus on the Windows Bitmap Format since it is by far the most prevalent. Don't let the "Windows" part fool you. The reason this format is called Windows Bitmap is because it was initially developed for Microsoft Windows—but it is not limited to this platform.</p>
<p>The Windows Bitmap File Format, like many flat file formats, is effectively a header plus raw data in a specified format. The header describes the bitmap and the file as a whole, with information about the bitmap itself (such as its width, height, and color depth) and the file it resides in (such as compression information). In this lesson, we'll ignore several possibilities that complicate the file format and focus on the simplest cases.</p>
<h2>Color Depth</h2>
<div class="infoBox">
<p>Note that there is such a thing as 32-bit color depth, but this doesn't provide more colors, it just provides the ability to do certain forms of blending. It's effectively 24-bit color depth with an extra byte for describing how colors should be blended with each other. We'll talk more about 32-bit color in Lesson Seven.</p>
</div>
<p>The color depth of an image or screen defines the number of colors it can display. In 24-bit RGB (which stands for "red green blue") format, each color is a combination of red, green and blue levels, each of which has a range of 0 to 255. In other words, each component of the color is one byte, so each color value is three bytes, or 24 bits. This allows for a total of 16,777,216 different color choices—virtually everything the human eye could possibly distinguish. This is why there are few, if any, pieces of hardware or file formats that consider the possibility of anything more than 24-bit color. The other color depths (16-bit, 8-bit, and 4-bit) introduce complexity into the file format by adding a color table, which maps each color value to its corresponding 24-bit real color. With this system, the bitmap is then a list of indexes into the map instead of the actual color. This allows for a smaller file and a broader choice of colors in low color modes (such as 8-bit).</p>
<p>For our current purposes, we will only support 24-bit color depth, but it is important that we still create the scaffolding for supporting additional color depths in the future.</p>
<h2>Compression</h2>
<p>The Windows Bitmap Format can support compression. Most commonly, compression is done in the form of run-length encoding (RLE). This form of compression basically goes line by line (where lines are horizontal—called <span class="italics">scan lines</span>) compressing repeated values. A simple example of RLE style compression is below.</p>
<p>The Windows Bitmap Format supports RLE compression on 8-bit and 4-bit color depths only. Since we're only supporting 24-bit color depth and keeping our features to a minimum, we needn't support compression in this lesson.</p>
<h2>Printing Information</h2>
<p>The Windows Bitmap Format allows for a few options to be set on how things will be printed. These are the horizontal-pixels-per-meter and the vertical-pixels-per-meter options, which can be used when printing to determine an appropriate printer resolution.</p>
<p>Since we will not be printing, and since these options are actually generally overridden or not used at all in most programs, we will ignore these options completely.</p>
<h2>Header Format Overview</h2>
<p>Now that you're more familiar with some of the terms the file header involves, they are outlined in table 3.1 below. This is the exact ordering of the binary information in the file.</p>
<table style="width: 480px;" border="1">
<thead>
<tr>
<th colspan="3">Table 3.1</th>
</tr>
<tr>
<th class="top" width="163">Name</th>
<th class="top" width="230">Size and Values</th>
<th class="top" width="197">Description</th>
</tr>
<tr>
<th class="top" colspan="3" width="590">File Header (14 bytes)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="top" width="163">
<p><code>firstIdentifier</code></p>
</td>
<td class="top" width="230">
<p>Byte; Must be equal to <code>B</code></p>
</td>
<td class="top" rowspan="2" width="197">
<p>The first and second identifiers are used to determine if this file is, in fact, a Windows Bitmap.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>secondIdentifier</code></p>
</td>
<td class="top" width="230">
<p>Byte; Must be equal to <code>M</code></p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>fileSize</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>The actual size of the file in its entirety, in terms of bytes.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>reserved</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord; Must be<code> 0</code></p>
</td>
<td class="top" width="197">
<p>Unused.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>rawImageByteOffset</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>Specifies the offset from the beginning at which the raw bitmap data begins. This value will always be equal to the size of the entire header plus any color table.</p>
</td>
</tr>
<tr>
<th class="top" colspan="3" width="590">
<p>Info Header (40 bytes)</p>
</th>
</tr>
<tr>
<td class="top" width="163">
<p><code>infoHeaderBytes</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord; Must be <code>40</code></p>
</td>
<td class="top" width="197">
<p>For verification purposes.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>bitmapWidth</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>The width of the bitmap.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>bitmapHeight</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>The height of the bitmap.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>numberOfPlanes</code></p>
</td>
<td class="top" width="230">
<p>Word; Must be <code>1</code></p>
</td>
<td class="top" width="197">
<p>Unused.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>bitsPerPixel</code></p>
</td>
<td class="top" width="230">
<p>Word; [1, 4, 8, 16, 24]</p>
</td>
<td class="top" width="197">
<p>The color depth.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>compressionType</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>Used to denote the compression used on the raw image data.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>compressedImageSize</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord; <code>0</code> if N/A</p>
</td>
<td class="top" width="197">
<p>The size of the compressed image data.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>horizontalPixelsPerMeter</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>Used for printing. Often ignored.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>verticalPixelsPerMeter</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord</p>
</td>
<td class="top" width="197">
<p>Used for printing. Often ignored.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>numberOfColors</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord; <code>0</code> if N/A</p>
</td>
<td class="top" width="197">
<p>If a color table is used, specifies the number of colors in it.</p>
</td>
</tr>
<tr>
<td class="top" width="163">
<p><code>numberOfImportantColors</code></p>
</td>
<td class="top" width="230">
<p>DoubleWord; <code>0</code> if All</p>
</td>
<td class="top" width="197">
<p>This information is for what?</p>
</td>
</tr>
</tbody>
</table>
<p>After the header, a color table might follow. In our case, if we only support 24-bit color depth, there will never be a color table. The color table is considered by some to be part of the header. We will take this view when referring to the header in its entirety, so we can easily distinguish the file as header plus raw data.</p>
<div class="keytermBox">
<h6>Key Terms</h6>
<ul>
<li>file header</li>
<li>info header</li>
</ul>
</div>
<p>The header is conventionally broken into two sections (besides the color table): the <span class="keyterm">file header</span> and the <span class="keyterm">info header</span>. We should maintain this view because the file header is a convenient minimal level to process. Loading just the file header can tell us we do, indeed, have a bitmap (from the identification bytes), and give us the most critical information: the bitmap width and height. The file size also helps us check if the file has been truncated and the "<code>rawImageByteOffset</code>" allows us to skip to the raw data if, for some reason, we need to.</p>
<p>In your development experience, you may have been exposed to a particularly unsafe way of reading binary information from files. It is common, in some C environments, to pass the address of an instance of a structure and the size of the structure and read raw data into it, without type checking. The problem with this approach is twofold: the lack of type checking, and the potential problem with byte ordering.</p>
<h2>Byte Ordering</h2>
<div class="keytermBox">
<h6>Key Terms</h6>
<ul>
<li>byte ordering</li>
<li>Little Endian</li>
<li>Big Endian</li>
</ul>
</div>
<p><span class="keyterm">Byte ordering</span> might be a new concept to you. Basically, 16-bit and higher values might be stored in a different format on different platforms, called <span class="keyterm">Little Endian</span> and <span class="keyterm">Big Endian.</span> On a Little Endian platform, a DoubleWord with a value of <code>0xAABBCCDD</code> might be stored (in memory and on disk) as <code>0xDDCCBBAA</code>. On a Big Endian platform, the order would be more what you might expect: <code>0xAABBCCDD</code>. This is not something you usually have to know, but when you are working with raw binary data, the difference becomes critical. The Windows Bitmap Format uses a Little Endian format, which means that if you attempted to read raw data directly into a <code>struct</code>, you'd end up with quite a few incorrect values on certain platforms.</p>
<div class="infoBox">
<p>The terms <span class="italics">Little Endian</span> and <span class="italics">Big Endian</span> are industry terms that come from <cite>Gulliver's Travels</cite> and have nothing to do with native Americans or residents of India. They refer to a society that was divided politically between those who preferred to eat their hard boiled eggs from the bottom (the big end) and those who prefer to eat them from the top (the little end). The term is a comment on the ridiculousness of arguing over Little Endian versus Big Endian byte ordering—a political issue in the hardware industry.</p>
</div>
<p>This means that your code that handles the Windows Bitmap File Format will need to read differently, depending on the platform. On a Big Endian system, it must swap the byte order of what it reads, if it reads it as a single integer; on Little Endian it needn't. This also means that you will have to read one piece at a time, not all at once into a <code>struct</code>. Specifically, you will need to read byte by byte for the most safety, as you cannot guarantee complete portability beyond this means. If you read byte by byte, you'll have to manually combine bytes into words and double words based on your platform's byte ordering, but your code will be portable, except for this single distinction.</p>
<h2>Understanding and Improving Binary Mode</h2>
<p>Throughout this course and other exposures you may have had, you've heard and worked with "binary mode" and "text mode." It's important to recognize the exact differences between these. <span class="keyterm">Binary mode</span> is not that different from text mode in terms of the actual reading and writing. When using fstream, the only thing that opening in binary mode changes is the end-of-line character sequences. In text mode, the end-of-line character is automatically translated to account for platform differences. In binary mode, this automatic translation is turned off, but nothing else is changed.</p>
<p>Binary mode is more of a statement of intent than a particular technological implication. When in binary mode, you will be effectively reading byte by byte (or word by word, and so on) to read numbers only. This quickly becomes ungainly, especially if the format of a Word or DoubleWord varies by platform. To simplify things a bit by isolating and centralizing the code that deals with sanity checking and platform specific differences, we can make Byte, Word and DoubleWord first-class concepts.</p>
<h2>Creating Byte, Word, and DoubleWord Classes</h2>
<p>Since we don't want to change the way we work with <code>Byte</code>, <code>Word</code>, and <code>DoubleWord</code> values, we'll want to make sure that our classes behave as much as possible like the primitive types they often correspond to—but which primitive types are these? The C++ standard does not specify the exact size of <code>char</code>, <code>short</code>, <code>int</code>, and <code>long</code>, but it does specify the minimum size of each.</p>
<p>The C++ standard guarantees that a <code>char</code> has at least 8 bits, a <code>short</code> at least 16 bits, and a <code>long</code> at least 32 bits. This means that our <code>Byte</code> class can return <code>char</code>, <code>Word</code> can return <code>short</code>, and <code>DoubleWord </code>can return <code>long</code>. Of course, we'll want to make all of these unsigned, since binary values are generally thought of as unsigned.</p>
<div class="keytermBox">
<h6>Key Term</h6>
<ul>
<li>binary mode</li>
</ul>
</div>
<p>When we actually read, we will need to read byte by byte, because we can't guarantee that <code>short</code> will be 16-bits—just that it will be <span class="bold">at least</span> 16-bits. It could be larger; in that event, trying to read directly into it via binary read and write methods on iostreams would be undefined. Instead, we'll have to work byte by byte (but fortunately we can reuse our <code>Byte</code> class to do this) in all cases. To do this, we'll be best off using the <code>get</code> and <code>put</code> methods of iostreams. At this point, our <code>Word</code> class might look like example 3.1 below, leaving us with only the actual binary reading and writing missing.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<th>Code Example 3.1</th>
</tr>
<tr style="color: #333333;">
<td>
<pre><code>namespace Binary {
class Word
{
public:
    Word(unsigned short value = 0) : value (value) { }
    operator unsigned short () const { return value; }
    Word&amp; operator=(Word const&amp; original)
    {
        this-&gt;value = original.value;
        return *this;
    }
    Word&amp; operator=(unsigned short value)
    {
        this-&gt;value = value;
        return *this;
    }

private:
    unsigned short value;
};
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>How we implement our reading and writing will vary by platform, but our interface can be consistent in that it can always work in terms of our native byte ordering. In other words, clients of the class can request to read a <code>Word</code> from a file where it is encoded with a Little Endian format or a Big Endian format, but the <code>Word</code> they get back will always be their native format. This leaves us with methods like the ones below:</p>
<ul>
<li><code>static Word readLittleEndian (std::istream&amp; sourceStream);</code></li>
<li><code>void writeLittleEndian (std::ostream&amp; destinationStream) const;</code></li>
<li><code>static Word readBigEndian (std::istream&amp; sourceStream);</code></li>
<li><code>void writeBigEndian (std::ostream&amp; destinationStream) const;</code></li>
</ul>
<p>Providing these methods in our <code>Word</code> and <code>DoubleWord</code> class (our <code>Byte</code> class is unaffected by byte-order differences) will cover every conceivable client concern. The <code>read</code> methods are class methods (denoted by the static keyword) for clarity and consistency. Basically, when you read from a file you are creating a <code>Word</code>; it's not the responsibility of an individual instance, but of the class itself to be able to effectively load a <code>Word </code>instance from a file. The <code>write</code> method, on the other hand, is the responsibility of an instance, because you are asking the particular object to persist itself.</p>
<p>In assignment 3, you will need to implement the <code>Byte</code>, <code>Word</code>, and <code>DoubleWord </code>classes, and allow your implementation to be configured to work on both Big Endian and Little Endian systems. To do this, you will be best off using a very isolated preprocessor "ifdef," as in example 3.2 below.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.2</th>
</tr>
<tr>
<td>
<pre><code>void Word::writeLittleEndian(std::ostream&amp; destinationStream) const
{
#ifdef Little_Endian_
    writeNativeOrder(destinationStream);
#else
    writeSwappedOrder(destinationStream);
#endif
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>The <code>Little_Endian_</code> flag can be defined in your build options or at the top of a header included by all your files. Take the time to experience some of the woes of cross-platform development, and more importantly, the ability to elegantly isolate platform-specific code. It is possible you may not be able to test both paths of code completely if you do not have both Big Endian and Little Endian systems to compile on.</p>
<h2>Creating the WindowsBitmapHeader Class</h2>
<p>The binary classes we created should make much of this class easy to define and implement. One thing that complicates matters is that we do not support the windows bitmap format in its entirety. Instead, certain attributes of the header are effectively fixed for us—for example, the <code>bitsPerPixel</code>. A simple approach to both documenting this and keeping our code easy to change for the future (when we may support <code>bitsPerPixel</code> as being something other than 24, for example), would be to give fixed attributes class scope instead of instance scope (i.e., make them static), as in example 3.3 below.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.3</th>
</tr>
<tr>
<td>
<pre><code>class WindowsBitmapHeader
{
public:
    // appropriate accessors, constructors, etc. . .
    // . . .
    void writeFileHeader(std::ostream&amp; destinationStream) const
    {
        firstIdentifier.write(destinationStream);
        secondIdentifier.write(destinationStream);    
        fileSize.writeLittleEndian(destinationStream);
        reserved.writeLittleEndian(destinationStream);
        rawImageByteOffset.writeLittleEndian(destinationStream);
    }
private:
    // file header
    const static Binary::Byte firstIdentifier; 
    const static Binary::Byte secondIdentifier;
    Binary::DoubleWord fileSize;
    const static Binary::DoubleWord reserved;
    const static Binary::DoubleWord rawImageByteOffset;
    
    // info header
    const static Binary::DoubleWord infoHeaderBytes;
    Binary::DoubleWord bitmapWidth;
    Binary::DoubleWord bitmapHeight;
    const static Binary::Word numberOfPlanes;
    const static Binary::Word bitsPerPixel;
    const static Binary::DoubleWord compressionType;
    const static Binary::DoubleWord compressedImageSize;
    const static Binary::DoubleWord horizontalPixelsPerMeter;
    const static Binary::DoubleWord verticalPixelsPerMeter;
    const static Binary::DoubleWord numberOfColors;
    const static Binary::DoubleWord numberOfImportantColors;
};</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Note the simplicity of the <code>writeFileHeader</code> method. This simplicity and reusability (the code won't have to be changed when these attributes become unfixed) comes directly from making our binary primitives first-class concepts and giving our fixed attributes class scope. The <code>readFileHeader</code> method would be slightly less consistent, but still remarkably so. It might look something like example 3.4.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.4</th>
</tr>
<tr>
<td>
<pre><code>void WindowsBitmapHeader::readFileHeader(std::istream&amp; sourceStream)
{
    verifyEquality(firstIdentifier, Byte::read (sourceStream), "firstIdentifier");
    verifyEquality (secondIdentifier, Byte::read (sourceStream), "secondIdentifier");
    this-&gt;fileSize = DoubleWord::readLittleEndian(sourceStream);
    verifyEquality(reserved, DoubleWord::readLittleEndian (sourceStream), "reserved");
    verifyEquality(rawImageByteOffset, DoubleWord::readLittleEndian (sourceStream), "rawImageByteOffset");
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Of course, we might not need to verify equality on all our attributes. In some cases, such as the <code>verticalPixelsPerMeter</code> attribute, we can ignore their value completely. The <code>verifyEquality</code> function (which would be implemented within the file as a template function so that it can support <code>Byte</code>, <code>Word</code>, and <code>DoubleWord</code>) used above is an excellent example of idiomatic programming, which will be covered later in this lesson.</p>
<p>Note that you only need to provide accessors for attributes that the client will directly need. When implementing the setters for the bitmap width and height, keep in mind that you will need to recalculate the size of the file.</p>
<hr>
<p>&nbsp;</p>
<h1>New in C++11</h1>
<h2>Delegating constructors and in-class initializers</h2>
<p>You typically want to explicitly initialize class members and base classes when constructing your objects. Usually this is done in the member initializer list of the constructor. That can be a challenge when you have multiple constructors. The classic solutions are to either repeat the same initialization in each one (undesirable redundancy), or factor the common stuff out into an "init" function that you call from each. Now, though, C++11 has a couple of new features that work better: delegating constructors and in-class initializers.</p>
<p><em>Delegating constructors</em> allow you to define one constructor in terms of another. Here's an example from Stoustrup:</p>
<div>class X {</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int a;</div>
<div>public:</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(int x) { if (0&lt;x &amp;&amp; x&lt;=max) a=x; else throw Bad_X(x); }</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X() :X{42} { }</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(string s) :X{to&lt;int&gt;(s)} { }&nbsp;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ...</div>
<div>};</div>
<p><em>In-class initializers</em> let you specify an initializer for a non-static data member in the class declaration. Another example from Stroustrup:</p>
<pre>    class A {
    public:
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int a {7};
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int b = 77;
    };
</pre>
<p>Notice you can use either a member initialization list with {}, or = to initialize. For obscure technical reasons you can't use () notation.</p>
<p>Both of these new features provide efficient ways to deal with initialization when you have multiple constructors.</p>
<h2>explicit conversion operators</h2>
<p>A conversion operator is a special kind of member function that converts a value of the given class to a value of some other type. For example, we will be writing some classes to represent binary values (Byte, Word, and DoubleWord). We might want to write conversion operators for those classes to make them easy to use in place of, say, an int. A conversion operator to int would look like this:</p>
<pre>    operator int() const;
</pre>
<p>These should be used sparingly, only when the conversion between types seems intuitive.</p>
<p>C++11 allows the explicit keyword to be used on the conversion operators to help prevent surprising automatic conversions, similar to using explicit on constructors. Conversions to bool are somewhat special in that they're usually intended for use only in conditional statements. For that reason, operator bool should almost always be declared explicit:</p>
<pre>    explicit operator bool() const;
</pre>
<p>&nbsp;</p>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253617" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Three Materials" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson Three Materials</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Three, Part 2: Creating the Bitmap Class">
        <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253619" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Lesson Three, Part 2: Creating the Bitmap Class</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">19ec8270-6031-417f-b089-a8f33cfc438d</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-302920e513.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-cc24cb95a6.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/19ec8270-6031-417f-b089-a8f33cfc438d?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiMTllYzgyNzAtNjAzMS00MTdmLWIwODktYThmMzNjZmM0MzhkIiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wOC0wN1QwNDoyNDoyMy44MVoifQ.yi2PbPdBLQY4w-Q6BVc8yfiTxxPxJC1lBG9EbDO-odg","context_asset_string":"course_1205169","ping_url":"https://canvas.uw.edu/api/v1/courses/1205169/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1205169/pages","WIKI_PAGE":{"title":"Lesson Three, Part 1: Introduction to Bitmaps","created_at":"2018-03-16T21:50:44Z","url":"lesson-three-part-1-introduction-to-bitmaps","editing_roles":"teachers","page_id":"2704781","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps","todo_date":null,"updated_at":"2018-03-16T21:50:44Z","locked_for_user":false,"body":"\u003cdiv class=\"actionBox\"\u003e\r\n\u003ch6\u003eRequired Reading\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cem\u003eThe C++ Standard Library 2nd edition: \u003c/em\u003eChapter 9 (STL Iterators)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cem\u003eand\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccite\u003eThe C++ Programming Language 4th edition\u003c/cite\u003e, Chapters 32 (STL Algorithms) and 33 (STL Iterators)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThis lesson is one of two that will aid you in designing and implementing support for bitmap graphics. After you have completed this lesson and Lesson Four, you will integrate this support into our vector graphics system so that we can render vector graphics to bitmap files. Later, we can support simple bitmap graphics alongside vector graphics and use bitmap graphics for patterns in filling vector graphics.\u003c/p\u003e\r\n\u003cp\u003eIn supporting bitmaps, we will use the bitmap file format, which is supported by your Web browser and a wide variety of free and commercial software. Remember to differentiate between the bitmap file format and the essence of what bitmap graphics are. In the next lesson, we will introduce ways of supporting other file formats, such as GIF, TIFF, and JPEG, with ease (though we will not actually provide the support, just make the spot to plug it in).\u003c/p\u003e\r\n\u003ch2\u003eLesson Objectives\u003c/h2\u003e\r\n\u003cp\u003eBy the end of this lesson, you will be able to implement the remaining portions of the Bitmap, WindowsBitmapHeader, and binary primitive (Byte, Word, DoubleWord) classes.\u003c/p\u003e\r\n\u003ch2\u003eThe Windows Bitmap File Format\u003c/h2\u003e\r\n\u003cp\u003eThere are actually sub-categorizations of the bitmap file formats, including windows bitmaps, OS/2 bitmaps, or other breeds of bitmaps. We'll focus on the Windows Bitmap Format since it is by far the most prevalent. Don't let the \"Windows\" part fool you. The reason this format is called Windows Bitmap is because it was initially developed for Microsoft Windows—but it is not limited to this platform.\u003c/p\u003e\r\n\u003cp\u003eThe Windows Bitmap File Format, like many flat file formats, is effectively a header plus raw data in a specified format. The header describes the bitmap and the file as a whole, with information about the bitmap itself (such as its width, height, and color depth) and the file it resides in (such as compression information). In this lesson, we'll ignore several possibilities that complicate the file format and focus on the simplest cases.\u003c/p\u003e\r\n\u003ch2\u003eColor Depth\u003c/h2\u003e\r\n\u003cdiv class=\"infoBox\"\u003e\r\n\u003cp\u003eNote that there is such a thing as 32-bit color depth, but this doesn't provide more colors, it just provides the ability to do certain forms of blending. It's effectively 24-bit color depth with an extra byte for describing how colors should be blended with each other. We'll talk more about 32-bit color in Lesson Seven.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe color depth of an image or screen defines the number of colors it can display. In 24-bit RGB (which stands for \"red green blue\") format, each color is a combination of red, green and blue levels, each of which has a range of 0 to 255. In other words, each component of the color is one byte, so each color value is three bytes, or 24 bits. This allows for a total of 16,777,216 different color choices—virtually everything the human eye could possibly distinguish. This is why there are few, if any, pieces of hardware or file formats that consider the possibility of anything more than 24-bit color. The other color depths (16-bit, 8-bit, and 4-bit) introduce complexity into the file format by adding a color table, which maps each color value to its corresponding 24-bit real color. With this system, the bitmap is then a list of indexes into the map instead of the actual color. This allows for a smaller file and a broader choice of colors in low color modes (such as 8-bit).\u003c/p\u003e\r\n\u003cp\u003eFor our current purposes, we will only support 24-bit color depth, but it is important that we still create the scaffolding for supporting additional color depths in the future.\u003c/p\u003e\r\n\u003ch2\u003eCompression\u003c/h2\u003e\r\n\u003cp\u003eThe Windows Bitmap Format can support compression. Most commonly, compression is done in the form of run-length encoding (RLE). This form of compression basically goes line by line (where lines are horizontal—called \u003cspan class=\"italics\"\u003escan lines\u003c/span\u003e) compressing repeated values. A simple example of RLE style compression is below.\u003c/p\u003e\r\n\u003cp\u003eThe Windows Bitmap Format supports RLE compression on 8-bit and 4-bit color depths only. Since we're only supporting 24-bit color depth and keeping our features to a minimum, we needn't support compression in this lesson.\u003c/p\u003e\r\n\u003ch2\u003ePrinting Information\u003c/h2\u003e\r\n\u003cp\u003eThe Windows Bitmap Format allows for a few options to be set on how things will be printed. These are the horizontal-pixels-per-meter and the vertical-pixels-per-meter options, which can be used when printing to determine an appropriate printer resolution.\u003c/p\u003e\r\n\u003cp\u003eSince we will not be printing, and since these options are actually generally overridden or not used at all in most programs, we will ignore these options completely.\u003c/p\u003e\r\n\u003ch2\u003eHeader Format Overview\u003c/h2\u003e\r\n\u003cp\u003eNow that you're more familiar with some of the terms the file header involves, they are outlined in table 3.1 below. This is the exact ordering of the binary information in the file.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"1\"\u003e\r\n\u003cthead\u003e\r\n\u003ctr\u003e\r\n\u003cth colspan=\"3\"\u003eTable 3.1\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003cth class=\"top\" width=\"163\"\u003eName\u003c/th\u003e\r\n\u003cth class=\"top\" width=\"230\"\u003eSize and Values\u003c/th\u003e\r\n\u003cth class=\"top\" width=\"197\"\u003eDescription\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003cth class=\"top\" colspan=\"3\" width=\"590\"\u003eFile Header (14 bytes)\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003c/thead\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003efirstIdentifier\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eByte; Must be equal to \u003ccode\u003eB\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" rowspan=\"2\" width=\"197\"\u003e\r\n\u003cp\u003eThe first and second identifiers are used to determine if this file is, in fact, a Windows Bitmap.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003esecondIdentifier\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eByte; Must be equal to \u003ccode\u003eM\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003efileSize\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThe actual size of the file in its entirety, in terms of bytes.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ereserved\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord; Must be\u003ccode\u003e 0\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eUnused.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003erawImageByteOffset\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eSpecifies the offset from the beginning at which the raw bitmap data begins. This value will always be equal to the size of the entire header plus any color table.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003cth class=\"top\" colspan=\"3\" width=\"590\"\u003e\r\n\u003cp\u003eInfo Header (40 bytes)\u003c/p\u003e\r\n\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003einfoHeaderBytes\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord; Must be \u003ccode\u003e40\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eFor verification purposes.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ebitmapWidth\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThe width of the bitmap.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ebitmapHeight\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThe height of the bitmap.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003enumberOfPlanes\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eWord; Must be \u003ccode\u003e1\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eUnused.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ebitsPerPixel\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eWord; [1, 4, 8, 16, 24]\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThe color depth.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ecompressionType\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eUsed to denote the compression used on the raw image data.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ecompressedImageSize\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord; \u003ccode\u003e0\u003c/code\u003e if N/A\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThe size of the compressed image data.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003ehorizontalPixelsPerMeter\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eUsed for printing. Often ignored.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003everticalPixelsPerMeter\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eUsed for printing. Often ignored.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003enumberOfColors\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord; \u003ccode\u003e0\u003c/code\u003e if N/A\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eIf a color table is used, specifies the number of colors in it.\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd class=\"top\" width=\"163\"\u003e\r\n\u003cp\u003e\u003ccode\u003enumberOfImportantColors\u003c/code\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"230\"\u003e\r\n\u003cp\u003eDoubleWord; \u003ccode\u003e0\u003c/code\u003e if All\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd class=\"top\" width=\"197\"\u003e\r\n\u003cp\u003eThis information is for what?\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eAfter the header, a color table might follow. In our case, if we only support 24-bit color depth, there will never be a color table. The color table is considered by some to be part of the header. We will take this view when referring to the header in its entirety, so we can easily distinguish the file as header plus raw data.\u003c/p\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Terms\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003efile header\u003c/li\u003e\r\n\u003cli\u003einfo header\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe header is conventionally broken into two sections (besides the color table): the \u003cspan class=\"keyterm\"\u003efile header\u003c/span\u003e and the \u003cspan class=\"keyterm\"\u003einfo header\u003c/span\u003e. We should maintain this view because the file header is a convenient minimal level to process. Loading just the file header can tell us we do, indeed, have a bitmap (from the identification bytes), and give us the most critical information: the bitmap width and height. The file size also helps us check if the file has been truncated and the \"\u003ccode\u003erawImageByteOffset\u003c/code\u003e\" allows us to skip to the raw data if, for some reason, we need to.\u003c/p\u003e\r\n\u003cp\u003eIn your development experience, you may have been exposed to a particularly unsafe way of reading binary information from files. It is common, in some C environments, to pass the address of an instance of a structure and the size of the structure and read raw data into it, without type checking. The problem with this approach is twofold: the lack of type checking, and the potential problem with byte ordering.\u003c/p\u003e\r\n\u003ch2\u003eByte Ordering\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Terms\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebyte ordering\u003c/li\u003e\r\n\u003cli\u003eLittle Endian\u003c/li\u003e\r\n\u003cli\u003eBig Endian\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cspan class=\"keyterm\"\u003eByte ordering\u003c/span\u003e might be a new concept to you. Basically, 16-bit and higher values might be stored in a different format on different platforms, called \u003cspan class=\"keyterm\"\u003eLittle Endian\u003c/span\u003e and \u003cspan class=\"keyterm\"\u003eBig Endian.\u003c/span\u003e On a Little Endian platform, a DoubleWord with a value of \u003ccode\u003e0xAABBCCDD\u003c/code\u003e might be stored (in memory and on disk) as \u003ccode\u003e0xDDCCBBAA\u003c/code\u003e. On a Big Endian platform, the order would be more what you might expect: \u003ccode\u003e0xAABBCCDD\u003c/code\u003e. This is not something you usually have to know, but when you are working with raw binary data, the difference becomes critical. The Windows Bitmap Format uses a Little Endian format, which means that if you attempted to read raw data directly into a \u003ccode\u003estruct\u003c/code\u003e, you'd end up with quite a few incorrect values on certain platforms.\u003c/p\u003e\r\n\u003cdiv class=\"infoBox\"\u003e\r\n\u003cp\u003eThe terms \u003cspan class=\"italics\"\u003eLittle Endian\u003c/span\u003e and \u003cspan class=\"italics\"\u003eBig Endian\u003c/span\u003e are industry terms that come from \u003ccite\u003eGulliver's Travels\u003c/cite\u003e and have nothing to do with native Americans or residents of India. They refer to a society that was divided politically between those who preferred to eat their hard boiled eggs from the bottom (the big end) and those who prefer to eat them from the top (the little end). The term is a comment on the ridiculousness of arguing over Little Endian versus Big Endian byte ordering—a political issue in the hardware industry.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThis means that your code that handles the Windows Bitmap File Format will need to read differently, depending on the platform. On a Big Endian system, it must swap the byte order of what it reads, if it reads it as a single integer; on Little Endian it needn't. This also means that you will have to read one piece at a time, not all at once into a \u003ccode\u003estruct\u003c/code\u003e. Specifically, you will need to read byte by byte for the most safety, as you cannot guarantee complete portability beyond this means. If you read byte by byte, you'll have to manually combine bytes into words and double words based on your platform's byte ordering, but your code will be portable, except for this single distinction.\u003c/p\u003e\r\n\u003ch2\u003eUnderstanding and Improving Binary Mode\u003c/h2\u003e\r\n\u003cp\u003eThroughout this course and other exposures you may have had, you've heard and worked with \"binary mode\" and \"text mode.\" It's important to recognize the exact differences between these. \u003cspan class=\"keyterm\"\u003eBinary mode\u003c/span\u003e is not that different from text mode in terms of the actual reading and writing. When using fstream, the only thing that opening in binary mode changes is the end-of-line character sequences. In text mode, the end-of-line character is automatically translated to account for platform differences. In binary mode, this automatic translation is turned off, but nothing else is changed.\u003c/p\u003e\r\n\u003cp\u003eBinary mode is more of a statement of intent than a particular technological implication. When in binary mode, you will be effectively reading byte by byte (or word by word, and so on) to read numbers only. This quickly becomes ungainly, especially if the format of a Word or DoubleWord varies by platform. To simplify things a bit by isolating and centralizing the code that deals with sanity checking and platform specific differences, we can make Byte, Word and DoubleWord first-class concepts.\u003c/p\u003e\r\n\u003ch2\u003eCreating Byte, Word, and DoubleWord Classes\u003c/h2\u003e\r\n\u003cp\u003eSince we don't want to change the way we work with \u003ccode\u003eByte\u003c/code\u003e, \u003ccode\u003eWord\u003c/code\u003e, and \u003ccode\u003eDoubleWord\u003c/code\u003e values, we'll want to make sure that our classes behave as much as possible like the primitive types they often correspond to—but which primitive types are these? The C++ standard does not specify the exact size of \u003ccode\u003echar\u003c/code\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ccode\u003eint\u003c/code\u003e, and \u003ccode\u003elong\u003c/code\u003e, but it does specify the minimum size of each.\u003c/p\u003e\r\n\u003cp\u003eThe C++ standard guarantees that a \u003ccode\u003echar\u003c/code\u003e has at least 8 bits, a \u003ccode\u003eshort\u003c/code\u003e at least 16 bits, and a \u003ccode\u003elong\u003c/code\u003e at least 32 bits. This means that our \u003ccode\u003eByte\u003c/code\u003e class can return \u003ccode\u003echar\u003c/code\u003e, \u003ccode\u003eWord\u003c/code\u003e can return \u003ccode\u003eshort\u003c/code\u003e, and \u003ccode\u003eDoubleWord \u003c/code\u003ecan return \u003ccode\u003elong\u003c/code\u003e. Of course, we'll want to make all of these unsigned, since binary values are generally thought of as unsigned.\u003c/p\u003e\r\n\u003cdiv class=\"keytermBox\"\u003e\r\n\u003ch6\u003eKey Term\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ebinary mode\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eWhen we actually read, we will need to read byte by byte, because we can't guarantee that \u003ccode\u003eshort\u003c/code\u003e will be 16-bits—just that it will be \u003cspan class=\"bold\"\u003eat least\u003c/span\u003e 16-bits. It could be larger; in that event, trying to read directly into it via binary read and write methods on iostreams would be undefined. Instead, we'll have to work byte by byte (but fortunately we can reuse our \u003ccode\u003eByte\u003c/code\u003e class to do this) in all cases. To do this, we'll be best off using the \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eput\u003c/code\u003e methods of iostreams. At this point, our \u003ccode\u003eWord\u003c/code\u003e class might look like example 3.1 below, leaving us with only the actual binary reading and writing missing.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.1\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr style=\"color: #333333;\"\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003enamespace Binary {\r\nclass Word\r\n{\r\npublic:\r\n    Word(unsigned short value = 0) : value (value) { }\r\n    operator unsigned short () const { return value; }\r\n    Word\u0026amp; operator=(Word const\u0026amp; original)\r\n    {\r\n        this-\u0026gt;value = original.value;\r\n        return *this;\r\n    }\r\n    Word\u0026amp; operator=(unsigned short value)\r\n    {\r\n        this-\u0026gt;value = value;\r\n        return *this;\r\n    }\r\n\r\nprivate:\r\n    unsigned short value;\r\n};\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eHow we implement our reading and writing will vary by platform, but our interface can be consistent in that it can always work in terms of our native byte ordering. In other words, clients of the class can request to read a \u003ccode\u003eWord\u003c/code\u003e from a file where it is encoded with a Little Endian format or a Big Endian format, but the \u003ccode\u003eWord\u003c/code\u003e they get back will always be their native format. This leaves us with methods like the ones below:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003estatic Word readLittleEndian (std::istream\u0026amp; sourceStream);\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evoid writeLittleEndian (std::ostream\u0026amp; destinationStream) const;\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003estatic Word readBigEndian (std::istream\u0026amp; sourceStream);\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evoid writeBigEndian (std::ostream\u0026amp; destinationStream) const;\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eProviding these methods in our \u003ccode\u003eWord\u003c/code\u003e and \u003ccode\u003eDoubleWord\u003c/code\u003e class (our \u003ccode\u003eByte\u003c/code\u003e class is unaffected by byte-order differences) will cover every conceivable client concern. The \u003ccode\u003eread\u003c/code\u003e methods are class methods (denoted by the static keyword) for clarity and consistency. Basically, when you read from a file you are creating a \u003ccode\u003eWord\u003c/code\u003e; it's not the responsibility of an individual instance, but of the class itself to be able to effectively load a \u003ccode\u003eWord \u003c/code\u003einstance from a file. The \u003ccode\u003ewrite\u003c/code\u003e method, on the other hand, is the responsibility of an instance, because you are asking the particular object to persist itself.\u003c/p\u003e\r\n\u003cp\u003eIn assignment 3, you will need to implement the \u003ccode\u003eByte\u003c/code\u003e, \u003ccode\u003eWord\u003c/code\u003e, and \u003ccode\u003eDoubleWord \u003c/code\u003eclasses, and allow your implementation to be configured to work on both Big Endian and Little Endian systems. To do this, you will be best off using a very isolated preprocessor \"ifdef,\" as in example 3.2 below.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.2\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003evoid Word::writeLittleEndian(std::ostream\u0026amp; destinationStream) const\r\n{\r\n#ifdef Little_Endian_\r\n    writeNativeOrder(destinationStream);\r\n#else\r\n    writeSwappedOrder(destinationStream);\r\n#endif\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eThe \u003ccode\u003eLittle_Endian_\u003c/code\u003e flag can be defined in your build options or at the top of a header included by all your files. Take the time to experience some of the woes of cross-platform development, and more importantly, the ability to elegantly isolate platform-specific code. It is possible you may not be able to test both paths of code completely if you do not have both Big Endian and Little Endian systems to compile on.\u003c/p\u003e\r\n\u003ch2\u003eCreating the WindowsBitmapHeader Class\u003c/h2\u003e\r\n\u003cp\u003eThe binary classes we created should make much of this class easy to define and implement. One thing that complicates matters is that we do not support the windows bitmap format in its entirety. Instead, certain attributes of the header are effectively fixed for us—for example, the \u003ccode\u003ebitsPerPixel\u003c/code\u003e. A simple approach to both documenting this and keeping our code easy to change for the future (when we may support \u003ccode\u003ebitsPerPixel\u003c/code\u003e as being something other than 24, for example), would be to give fixed attributes class scope instead of instance scope (i.e., make them static), as in example 3.3 below.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.3\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eclass WindowsBitmapHeader\r\n{\r\npublic:\r\n    // appropriate accessors, constructors, etc. . .\r\n    // . . .\r\n    void writeFileHeader(std::ostream\u0026amp; destinationStream) const\r\n    {\r\n        firstIdentifier.write(destinationStream);\r\n        secondIdentifier.write(destinationStream);    \r\n        fileSize.writeLittleEndian(destinationStream);\r\n        reserved.writeLittleEndian(destinationStream);\r\n        rawImageByteOffset.writeLittleEndian(destinationStream);\r\n    }\r\nprivate:\r\n    // file header\r\n    const static Binary::Byte firstIdentifier; \r\n    const static Binary::Byte secondIdentifier;\r\n    Binary::DoubleWord fileSize;\r\n    const static Binary::DoubleWord reserved;\r\n    const static Binary::DoubleWord rawImageByteOffset;\r\n    \r\n    // info header\r\n    const static Binary::DoubleWord infoHeaderBytes;\r\n    Binary::DoubleWord bitmapWidth;\r\n    Binary::DoubleWord bitmapHeight;\r\n    const static Binary::Word numberOfPlanes;\r\n    const static Binary::Word bitsPerPixel;\r\n    const static Binary::DoubleWord compressionType;\r\n    const static Binary::DoubleWord compressedImageSize;\r\n    const static Binary::DoubleWord horizontalPixelsPerMeter;\r\n    const static Binary::DoubleWord verticalPixelsPerMeter;\r\n    const static Binary::DoubleWord numberOfColors;\r\n    const static Binary::DoubleWord numberOfImportantColors;\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eNote the simplicity of the \u003ccode\u003ewriteFileHeader\u003c/code\u003e method. This simplicity and reusability (the code won't have to be changed when these attributes become unfixed) comes directly from making our binary primitives first-class concepts and giving our fixed attributes class scope. The \u003ccode\u003ereadFileHeader\u003c/code\u003e method would be slightly less consistent, but still remarkably so. It might look something like example 3.4.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.4\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003evoid WindowsBitmapHeader::readFileHeader(std::istream\u0026amp; sourceStream)\r\n{\r\n    verifyEquality(firstIdentifier, Byte::read (sourceStream), \"firstIdentifier\");\r\n    verifyEquality (secondIdentifier, Byte::read (sourceStream), \"secondIdentifier\");\r\n    this-\u0026gt;fileSize = DoubleWord::readLittleEndian(sourceStream);\r\n    verifyEquality(reserved, DoubleWord::readLittleEndian (sourceStream), \"reserved\");\r\n    verifyEquality(rawImageByteOffset, DoubleWord::readLittleEndian (sourceStream), \"rawImageByteOffset\");\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eOf course, we might not need to verify equality on all our attributes. In some cases, such as the \u003ccode\u003everticalPixelsPerMeter\u003c/code\u003e attribute, we can ignore their value completely. The \u003ccode\u003everifyEquality\u003c/code\u003e function (which would be implemented within the file as a template function so that it can support \u003ccode\u003eByte\u003c/code\u003e, \u003ccode\u003eWord\u003c/code\u003e, and \u003ccode\u003eDoubleWord\u003c/code\u003e) used above is an excellent example of idiomatic programming, which will be covered later in this lesson.\u003c/p\u003e\r\n\u003cp\u003eNote that you only need to provide accessors for attributes that the client will directly need. When implementing the setters for the bitmap width and height, keep in mind that you will need to recalculate the size of the file.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch1\u003eNew in C++11\u003c/h1\u003e\r\n\u003ch2\u003eDelegating constructors and in-class initializers\u003c/h2\u003e\r\n\u003cp\u003eYou typically want to explicitly initialize class members and base classes when constructing your objects. Usually this is done in the member initializer list of the constructor. That can be a challenge when you have multiple constructors. The classic solutions are to either repeat the same initialization in each one (undesirable redundancy), or factor the common stuff out into an \"init\" function that you call from each. Now, though, C++11 has a couple of new features that work better: delegating constructors and in-class initializers.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eDelegating constructors\u003c/em\u003e allow you to define one constructor in terms of another. Here's an example from Stoustrup:\u003c/p\u003e\r\n\u003cdiv\u003eclass X {\u003c/div\u003e\r\n\u003cdiv\u003e     int a;\u003c/div\u003e\r\n\u003cdiv\u003epublic:\u003c/div\u003e\r\n\u003cdiv\u003e     X(int x) { if (0\u0026lt;x \u0026amp;\u0026amp; x\u0026lt;=max) a=x; else throw Bad_X(x); }\u003c/div\u003e\r\n\u003cdiv\u003e     X() :X{42} { }\u003c/div\u003e\r\n\u003cdiv\u003e     X(string s) :X{to\u0026lt;int\u0026gt;(s)} { } \u003c/div\u003e\r\n\u003cdiv\u003e     // ...\u003c/div\u003e\r\n\u003cdiv\u003e};\u003c/div\u003e\r\n\u003cp\u003e\u003cem\u003eIn-class initializers\u003c/em\u003e let you specify an initializer for a non-static data member in the class declaration. Another example from Stroustrup:\u003c/p\u003e\r\n\u003cpre\u003e    class A {\r\n    public:\r\n         int a {7};\r\n         int b = 77;\r\n    };\r\n\u003c/pre\u003e\r\n\u003cp\u003eNotice you can use either a member initialization list with {}, or = to initialize. For obscure technical reasons you can't use () notation.\u003c/p\u003e\r\n\u003cp\u003eBoth of these new features provide efficient ways to deal with initialization when you have multiple constructors.\u003c/p\u003e\r\n\u003ch2\u003eexplicit conversion operators\u003c/h2\u003e\r\n\u003cp\u003eA conversion operator is a special kind of member function that converts a value of the given class to a value of some other type. For example, we will be writing some classes to represent binary values (Byte, Word, and DoubleWord). We might want to write conversion operators for those classes to make them easy to use in place of, say, an int. A conversion operator to int would look like this:\u003c/p\u003e\r\n\u003cpre\u003e    operator int() const;\r\n\u003c/pre\u003e\r\n\u003cp\u003eThese should be used sparingly, only when the conversion between types seems intuitive.\u003c/p\u003e\r\n\u003cp\u003eC++11 allows the explicit keyword to be used on the conversion operators to help prevent surprising automatic conversions, similar to using explicit on constructors. Conversions to bool are somewhat special in that they're usually intended for use only in conditional statements. For that reason, operator bool should almost always be declared explicit:\u003c/p\u003e\r\n\u003cpre\u003e    explicit operator bool() const;\r\n\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps","WIKI_PAGE_EDIT_PATH":"/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1205169/pages/lesson-three-part-1-introduction-to-bitmaps/revisions","COURSE_ID":"1205169","MODULES_PATH":"/courses/1205169/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"STUDENT_PLANNER_ENABLED":true,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Part 1_ Introduction to Bitmaps_files/navigation_header.bundle-549b1681b9.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/default.js" defer="defer"></script>
<script src="./Part 1_ Introduction to Bitmaps_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>