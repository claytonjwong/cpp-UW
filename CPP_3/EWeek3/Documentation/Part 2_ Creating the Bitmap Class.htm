<!DOCTYPE html>
<!-- saved from url=(0112)https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class?module_item_id=8253619 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson Three, Part 2: Creating the Bitmap Class: CPROGRM 713 A Su 18: C++ Programming: Advanced</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Part 2_ Creating the Bitmap Class_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Part 2_ Creating the Bitmap Class_files/common-a1fb70dab0.css">
  <script type="text/javascript" async="" src="./Part 2_ Creating the Bitmap Class_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-9f640d24ea.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Part 2_ Creating the Bitmap Class_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Part 2_ Creating the Bitmap Class_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Part 2_ Creating the Bitmap Class_files/custom.css">
<link rel="stylesheet" media="all" href="./Part 2_ Creating the Bitmap Class_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Part 2_ Creating the Bitmap Class_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Part 2_ Creating the Bitmap Class_files/vendor.bundle-e87d116ea9.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/appBootstrap.bundle-0661001892.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/common.bundle-f89441110c.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/wiki_page_show.bundle-230f977ba8.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1205169 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class?module_item_id=8253619#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Part 2_ Creating the Bitmap Class_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class?module_item_id=8253619#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Part 2_ Creating the Bitmap Class_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169"><span class="ellipsible">CPROGRM 713 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1205169/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson Three, Part 2: Creating the Bitmap Class</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Summer 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1205169" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/announcements" title="Announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1205169/external_tools/63603" title="Info &amp; Help" class="context_external_tool_63603" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson Three, Part 2: Creating the Bitmap Class</h1>
  
    
  
  
    <p>To represent the actual bitmap, rather than just its header, we will create a <code>Bitmap</code> class. For our current needs, this needn't provide a substantial interface, but merely basic loading and iteration of the image (no need for insertions or removals).</p>
<p>To iterate or load the image, we need to choose an underlying collection and look a bit closer at an idea that was touched upon earlier: the <span class="italics">scan line</span>. Bitmap images generally work in terms of scan lines. Rather than thinking of a bitmap as a two dimensional matrix of colors, it is simplified conventionally to a collection of one dimensional arrays of colors. Iteration is then done on a per scan line basis. This comes about for two reasons:</p>
<ul>
<li>most existing algorithms (and code in general) are designed around one dimensionality; and</li>
<li>it is possible to work efficiently with one scan line at a time.</li>
</ul>
<p>In more sophisticated situations than ours, certainly a matrix approach might be better. If we had to perform a lot of modifications to the image on a pixel-by-pixel basis, we would enjoy the convenience of being able to set and get pixels based on a two-dimensional location. (Of course, this isn't entirely complicated to provide on top of the same structure of a collection of scan lines.)</p>
<p>Think about the scan-line approach as working with the one-dimensional building blocks available to us. Our bitmap is effectively an implementation of a matrix, by the very fact of its having a width and height. What collection we use behind the scenes will not be of critical importance in the long run, and one way or another our bitmap will always begin as one-dimensional information (memory on disk or in a file) and end the same way (once again, as memory on disk or in a file). This isn't a strong argument against making a more matrix-like interface to our bitmap, but simply a good example of why many of our clients won't need this sophistication. Certainly, we won't be limiting what any clients can do by providing scan line based iteration, but merely changing how they go about doing it.</p>
<p>We'll define our bitmap class more like a standard collection than a concept of a graphic. This is why Bitmap is a better name than BitmapGraphic. The reason for creating the <code>Bitmap</code> class in this manner is for consistency and simplicity. If we begin to think of the Bitmap as more than just a list of scan lines, we introduce more design concerns. We'll look at the design concerns of supporting bitmaps in a more powerful way in the next lesson, but for now we'll focus on getting familiar with bitmaps and the techniques of the C++ standard library.</p>
<p>Taking all this into account, we end up with the class definition in example 3.5 below.</p>
<table style="width: 480px;" border="0" cellspacing="10" cellpadding="4">
<tbody>
<tr>
<td><span class="bold">Code Example 3.5</span></td>
</tr>
<tr>
<td>
<pre><code>class Bitmap {
	public:
		typedef std::list&lt;Color&gt; ScanLine;
 
	private:
		typedef std::list&lt;ScanLine&gt; ScanLineCollection;
 
	public:
		typedef ScanLineCollection::iterator ScanLineIterator;
 
		Bitmap (std::istream&amp; sourceStream);
 
		ScanLineIterator begin (); // named this way for consistency.
		ScanLineIterator end ();
 
		int getWidth () const;
		int getHeight () const;
 
	// ...
};</code></pre>
</td>
</tr>
</tbody>
</table>
<p>We're still missing one critical piece of information needed to implement this class: the format of the raw data. The raw data is actually quite easy to read in. It will be stored as sets of three bytes (24-bits) of blue, green, and red (in that order). The only source of complexity is that each scan line is DoubleWord aligned. This means that all scan lines are patched up with extra bytes at the end to make them divisible by four (so they can be read as a series of 32-bit, or DoubleWord, values). This means that if the width of your image is 10, then the size of a scan line will be 30 bytes (because of the three color components). Since this number is not divisible by four, two extra bytes of padding are added. On the other hand, if the width of your image is 100 (and the size of the scan line is 300), no padding will be added. Note that padding bytes will always be zero.</p>
<p>At this point, we have finished everything needed to load a bitmap. Since the bitmap we load is effectively no different than many standard library collections, we can use it in conjunction with many of the standard generic algorithms. Before looking into which algorithms we can use to stretch and save our bitmap, we need a deeper understanding of iterators. Remember that generic algorithms and collections are built on top of the idea of an iterator, so the concept of an iterator is at the heart of much of the C++ standard library.</p>
<h2>Creating and Using Iterators</h2>
<p>Most collections—especially the fundamental collections—are only useful because they have meaning in their elements. As we discussed in Lesson Two, this leads us toward the idea of element orientation and one of the better means of focusing on elements: iterators (a concept that you are already well versed in).</p>
<p>In the C++ Standard Library, many forms of iterators are available—for example, random-access iterators provide the ability to move forward or backward by any amount—but there are certain commonalities among all of them. Firstly, iterators are usually nested "internal" iterators. If you need to review internal versus external iterators, <cite>Design Patterns: Elements of Reusable Object-Oriented Software</cite> describes these two categories of iterators well. In the C++ standard library, all collections use internal iterators, whereas some general purpose iterators are created as external iterators. This makes sense, as a collection's iterator should be tightly coupled to the collection.</p>
<p>Another commonality between all iterators is their "interface," so to speak. In <span class="italics">C++</span>: <span class="italics">Intermediate</span> you learned how generic programming promotes loose abstractions that usually require documentation and can be error-prone. In the standard library, there is no iterator interface from which all iterator implementations inherit. Instead, an iterator is only defined by the way it behaves. The sum of the behaviors and operations expected in all iterators (such as providing a preincrement operator) defines the loose interface of what an iterator is.</p>
<p>At the very minimum, an iterator must support forward, incremental movement—one unit at a time. It must do this via the pre- and post-increment operations. Additionally, dereference and pointer-to operators are expected for actual element access. Anything beyond these basics helps categorize the iterator into one or more "subtypes" of the generic concept of iterator.</p>
<h2>Categories of Iterators</h2>
<p>There are five categories of iterators with different levels of functionality. They range from random-access, with the most functionality, to input and output, with least. Choosing which you need is fairly straightforward (or at least more straightforward than choosing a collection). Of course, most of the time you will have no choice—the algorithms and collections you use will dictate which category of iterator you will use. When you do have a choice, use the minimum category of iterator you need. This will allow for more flexibility in your code.</p>
<p>One of the common things over which you will usually have control is whether or not to use constant iterators. When iterating a collection where you don't need to modify the elements themselves, you can use a constant iterator for safety (and performance as well). These iterators allow constant access only to the object they represent.</p>
<p>Constancy is not considered in defining the categories, but is an orthogonal issue. When standard algorithms and documentation refer to iterators, they will often specify one of five categories: input, output, forward, bidirectional, or random access. These categories and their relations are shown in figure 3.1. below.</p>
<p class="title"><span class="bold">Figure 3.1</span>—Categories and Their Relations</p>
<p><img src="./Part 2_ Creating the Bitmap Class_files/CPP713s03_01.gif" alt="diagram of categories and their relations" width="251" height="251" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1205169/files/47698278" data-api-returntype="File" style="max-width: 962px;"></p>
<p>These categories are based on the following fundamental distinctions:</p>
<ul>
<li>Input—supports single increment and dereference</li>
<li>Output—supports single increment and assignment</li>
<li>Forward—defined by supporting the features of both input and output iterators</li>
<li>Bidirectional—defined by supporting the features of forward iterators plus the ability of single decrement</li>
<li>Random Access—defined by supporting the features of bidirectional plus the ability to increment and decrement by more than one</li>
</ul>
<p>Each of these is useful, or capable, in different contexts. For example, an input iterator is the only one it's possible to use with console input—since console input cannot allow output, going backwards, or jumping ahead by more than one character at a time.</p>
<p>As we've stated, make sure to use the minimum category of iterator that you need to keep your code generic. For example, if you write an algorithm that could be written with simple input iterators—but you rely on decrementing (available in bidirectional iterators) or random-access for convenience—it might be better to make your algorithm use only forward iterators. By doing this, you might be able to allow console input to be processed by the algorithm. If you went to the other extreme and used a random access iterator, then your algorithm would not be able to be performed on list collections, since lists only provide single increment and decrement (bidirectional iterators).</p>
<p>Of course, there are no easy ways to absolutely ensure that you're using only the features of an input iterator, since these are loose abstractions. If your code is modified later and you begin using new features of your iterator, you may unintentionally restrict the reuse of your code. The only way of ensuring its reuse is to be aware of the categories of iterators and what defines them, and to document your decisions.</p>
<h3>Input Iterators</h3>
<p>An input iterator only provides single increment and dereferencing as a means of constant-only access to the underlying element object. The generic pseudo-interface of an input iterator is as shown in example 3.6.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.6</th>
</tr>
<tr>
<td>
<pre><code>interface input_iterator&lt;Element&gt; {
	input_iterator (input_iterator const&amp;);
   
	input_iterator&amp; operator++ ();
	input_iterator&amp; operator++ (int);
 
	Element const&amp; operator* () const;
	Element const* operator-&gt; () const;
 
	bool operator== (input_terator const&amp;) const;
	bool operator!= (input_iterator const&amp;) const;
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Input iterators are designed for use in single pass algorithms, which we will vaguely define as follows:</p>
<blockquote>A single pass algorithm is an algorithm that does not rely on accessing any data more than once.</blockquote>
<p>For example, decompressing a run-length encoded bitmap would only require a single pass. Most C++ standard algorithms are also single-pass. For this reason and for genericity, many C++ standard algorithms rely solely on input iterators.</p>
<p>Although these algorithms often use input iterators exclusively, there is only one exclusively input iterator provided in the C++ standard library. This iterator is the <code>istream_iterator</code>, which is covered later in this section. This is actually a good design decision. The generic algorithms place the least restrictions on you by using the lowest common denominator of iterator categories, whereas the standard collections place the least restrictions on you by providing you with the most flexible category of iterator they can. The combination of these two design decisions results in standard algorithms that work with virtually everything.</p>
<p>If you look back at the list of features for each category of iterator, you can see that a constant forward iterator might behave exactly as an input iterator. This is because the hierarchy of categories is not exactly a hierarchy: Iterators can fall into any combination of categories. Unfortunately, these categories and their relations are very loosely defined. They are concepts that sometimes intersect—a property of the generic programming paradigms tendency to create loose abstractions.</p>
<h3>Output Iterators</h3>
<p>An output iterator only provides single increment and assignment as a means of modify-only access to the underlying element. The generic pseudo-interface of an output iterator is as shown in example 3.7:</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.7</th>
</tr>
<tr>
<td>
<pre><code>interface output_iterator&lt;Element&gt; {
	output_iterator (output_iterator const&amp;);
   
	output_iterator&amp; operator++ ();
	output_iterator&amp; operator++ (int);
 
	Element&amp; operator* ();
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>As stated, output iterators only provide assignment; unfortunately, though, they do this in a somewhat strange manner. Rather than providing a <code>setElement</code> method and no <code>getElement</code> method or some other scheme that separates reading from writing, they provide a dereference operator. Since the dereference operator returns a reference, there's no obvious way of protecting from read access. Implementations of output iterators in the C++ Standard Library provide a bizarre workaround for this problem that has some interesting consequences. This workaround is shown in example 3.8 below: an implementation of <code>back_insert_iterator</code>.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.8</th>
</tr>
<tr>
<td>
<pre><code>template &lt;class Collection&gt;
class back_insert_iterator 
   : public iterator&lt;output_iterator_tag, void, void, void, void&gt; {
	public:
		explicit back_insert_iterator(Collection&amp;);
 
		back_insert_iterator&amp; operator=
			(typename Collection::const_reference value);
 
		back_insert_iterator&amp; operator*();
		back_insert_iterator&amp; operator++();
		back_insert_iterator&amp; operator++(int);
};</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Notice the return type of the <code>dereference</code> operator. Most implementations of output iterators use this technique for disallowing anything besides the assignment operator. By returning itself and providing an <code>operator=</code>that allows assignment to an element object, the <code>back_insert_iterator</code> above ensures that no one will mistakenly attempt to read from it. For example, the code in example 3.9 would generate a compile-time error.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.9</th>
</tr>
<tr>
<td>
<pre><code>typedef std::list&lt;Student&gt; StudentList;
 
StudentList students;
back_insert_iterator&lt;StudentList&gt; studentInserter (students);
 
Student student = *studentInserter; // ERROR: no conversion from
						// back_insert_iterator to 
						// Student available.
*studentIterator = Student ("Krisha Steuver"); // OK</code></pre>
</td>
</tr>
</tbody>
</table>
<p>Clearly, output iterators are more primitive than input iterators. Like input iterators, they can only support single-pass algorithms; but the concept of a pass does not really belong here. A very important distinction between output iterators and input iterators is that with output iterators there is no concept of an "end." Thus, we don't need to check for the validity of an output iterator before writing.</p>
<p>One important caveat about the use of output iterators, is that if you create a copy of one, it will be incremented automatically along with the original. Furthermore, every time a value is set via dereferencing, each iterator will effectively move forward. This means that the otherwise predictable invariant of "<code>++i == ++j</code>" will fail.</p>
<h3>Forward Iterators</h3>
<p>A forward iterator provides the functionality of an input iterator and <span class="italics">some</span> of the functionality of an output iterator. The generic pseudo-interface of a forward iterator is as shown in example 3.10.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.10</th>
</tr>
<tr>
<td>
<pre><code>interface forward_iterator&lt;Element&gt; {
   forward_iterator ();
   forward_iterator (forward_iterator const&amp;);
   forward_iterator&amp; operator= (forward_iterator const&amp;);
   
   forward_iterator&amp; operator++ ();
   forward_iterator&amp; operator++ (int);
 
   Element const&amp; operator* () const;
   Element const* operator-&gt; () const;
 
   bool operator== (forward_iterator const&amp;) const;
   bool operator!= (forward_iterator const&amp;) const;
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>A forward iterator is not exactly the combination of an input iterator and an output iterator. Remember, that figure 3.1 gives you a basic conceptual model of the categories of iterators; these categories work because of what people will and won't do with them. In reality, the sub-categorizations may not be completely substitutable for their super-categorizations. With forward iterators, there is a reliance on an "end," whereas with output iterators, there is not. Also, although neither input iterators or output iterators allow multi-pass algorithms, forward iterators do (in other words, modifying or reading the value will not increment the iterator).</p>
<h3>Bidirectional Iterators</h3>
<p>There is not much new to say for bidirectional iterators: they provide both post- and pre-decrement capabilities as well as everything inherited from the category of forward iterators. Their pseudo-interface is defined in example 3.11.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.11</th>
</tr>
<tr>
<td>
<pre><code>interface bidirectional_iterator&lt;Element&gt;
   : public forward_iterator&lt;Element&gt; {
   // note that if this was real C++, rather than a pseudo
   // language one would have to overload additional operators
   // because they would be returning the supertype, rather than 
   // bidirectional_iterator.
 
   bidirectional_iterator&amp; operator-- ();
   bidirectional_iterator&amp; operator-- (int);
}</code></pre>
</td>
</tr>
</tbody>
</table>
<h3>Random-Access Iterators</h3>
<p>A random access iterator takes away the idea of iteration, or at least allows it to be taken away, by providing the ability to jump ahead by more than one element; see example 3.12 below.</p>
<table style="width: 480px;" border="0">
<tbody>
<tr>
<th>Code Example 3.12</th>
</tr>
<tr>
<td>
<pre><code>interface random_access_iterator&lt;Element&gt;
   : public bidirectional_iterator&lt;Element&gt; {
   Element&amp; operator[] (int index);
   
   random_access_iterator&amp; operator+= (difference_type increment);
   random_access_iterator&amp; operator-= (difference_type decrement);
   
   random_access_iterator operator- (difference_type decrement);
   difference_type operator- (random_access_iterator const&amp;);
   
   bool operator&lt; (random_access_iterator const&amp;);
   bool operator&gt; (random_access_iterator const&amp;);
   bool operator&lt;= (random_access_iterator const&amp;);
   bool operator&gt;= (random_access_iterator const&amp;);
 
   friend random_access_iterator operator+ (difference_type increment, 
      random_access_iterator const&amp;);
}</code></pre>
</td>
</tr>
</tbody>
</table>
<p>An overview of the features of random-access iterators is as follows:</p>
<ul>
<li>A somewhat peculiar indexing operator that allows you to treat the iterator like an array-style collection, potentially causing some very hard-to-follow code.</li>
<li>Operators <code>+=</code>and <code>-=</code>(scaled increment and decrement) that allow incrementing and decrementing the position of the iterator. Using the concept of these breaks with the idea of iterators by being position oriented is closer to the index-based array style collections. Not coincidentally, only these collections generally provide random access iterators.</li>
<li>Addition and subtraction operators (<code>operator+</code> and <code>operator-</code>), which behave similar to a pointer to an array: adding two iterators is not supported, subtracting two iterators returns an integer of their length apart, and adding or subtracting an integer to an iterator returns a new iterator that is incremented by that amount. If this sounds remarkably like pointers to you, it is because the initial idea of C++ style iterators was built from pointers. Although the sophistication of the C++ standard library has now come to a point where all iterators must generally be implemented as classes, the initial design philosophy of making iterators behave like pointers stuck.</li>
<li>Comparison operators of less than, greater than, less than or equal to, and greater than or equal to.</li>
</ul>
<h4>Flaws of Random-Access</h4>
<p>Most algorithms work in terms of operating on each element or operating until the current element satisfies a certain condition, not jumping an arbitrary amount forward. Furthermore, none of the algorithms in the C++ Standard Library rely on random-access iterators, though some are specialized to work more efficiently with them (the distance algorithm, for example).</p>
<p>Since the algorithms that are specialized for random access iterators use only the basic addition and subtraction operators, you might wonder where the requirement of the additional operators (specifically the indexing operator) came from. You might also be curious as to whether the indexing provided is relative to the current position or not, and, once again, when exactly you might need it.</p>
<p>The answer to these thoughts is that old conventions, as well as desires to implement certain collections efficiently, drove the new conventions. The interface of a random access iterator is effectively the interface of a pointer, including the somewhat confusing nuances of pointer math. This is simply because pointers were originally the basis for random-access iterators. In keeping with the tradition of forward-thinking, we feel that—especially when educating the next generation of programmers—the legacy of the past should be known but not always followed. Be aware of what random-access iterators are and how they behave. Your required reading will cover this in detail (though it may not be clearly documented that the indexing will be relative to the current position).</p>
<p>Also, remember that the only standard collections that provide random-access iterators are vector and deque. Each of these allows indexing as well, and has the potential to be misused in an index-oriented manner rather than an iterator-oriented manner.</p>
<h3>Reverse Iterators</h3>
<p>Reverse iterators are not a category of iterators but an implementation. The <code>reverse_iterator</code> is an adapter for bidirectional iterators to reverse their increment and decrement semantics.</p>
<p>The benefit of reverse iterators are that they allow reuse of fundamental algorithms and a consistent paradigm of writing one-direction algorithms, rather than learning the decrement version of an algorithm or having different algorithms for decrementing.</p>
<h2>Introduction to Standard Algorithms and Idiomatic Programming</h2>
<p>In example 3.4 we used a function called <code>verifyEquality</code> to make our code more readable and maintainable. Another very important reason that using <code>verifyEquality</code> was appropriate was that it expressed our intent clearly in the code itself, without using comments. All around it, allowed us to work at a slightly higher level than <code>if</code>s and <code>else</code>s—and that is the gist of why it was beneficial.</p>
<p><code>verifyEquality</code> is an example of idiomatic programming. Rather than thinking about the process we'd be doing otherwise as "checking if the read value of x is equal to what we want it to be and throwing an exception if it isn't," we simplify think of it as "verifying equality." How <code>verifyEquality</code> works is none of our concern, most the time. We centralize the concern into one isolated function—a function that helps to form a higher level language. Each one of these sorts of functions, such as the standard algorithms <code>copy</code>,<code> find</code>, and <code>reverse</code>, can be thought of as a definition of a new word that broadens our vocabulary. When we work with these new words, we can avoid the awkward minor variations between the various ways of copying, finding, and reversing, and help to communicate what we're doing more effectively.</p>
<p>You should note that the term "idiomatic programming" is used primarily by the generic programming community. The term generally implies the generic-global-functions approach, but much of its essence is unrelated to the means of application. In general, no matter how it is accomplished, idiomatic programming means stating your intent and working at a higher level than code that meanders through control statements. The generic-global-functions approach is an interesting and beneficial way of supporting much of idiomatic programming in C++, but things as simple as named constants and other self-documenting code techniques are also idiomatic approaches.</p>
<p>The C++ standard library lays the groundwork for writing and using generic algorithms. The collection of generic algorithms available to you will not be outlined in this lesson, but are covered in your required reading. You will find yourself referring over and over to the extensive documentation available on these algorithms as you begin to use them—and there is little insight to add beyond what the texts already cover. Since it is rare to use all (or even the majority) of generic algorithms in a single system, it can take some time before you are fluent. What's important is that you make the effort always to check if there's a generic algorithm that exists for what you're doing; and if not, to create one.</p>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253618" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson Three, Part 1: Introduction to Bitmaps" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson Three, Part 1: Introduction to Bitmaps</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-discussion&#39;&gt;&lt;/i&gt; Discussion of Lesson 3 and Assignment 3">
        <a href="https://canvas.uw.edu/courses/1205169/modules/items/8253620" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Discussion of Lesson 3 and Assignment 3</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">e597338f-8e04-47e0-974b-c7a1ef565d1f</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-302920e513.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-cc24cb95a6.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/e597338f-8e04-47e0-974b-c7a1ef565d1f?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiZTU5NzMzOGYtOGUwNC00N2UwLTk3NGItYzdhMWVmNTY1ZDFmIiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wOC0wN1QwNDoyNDoyNi4wNVoifQ.pDokYXL_VbXaVVhy7gfPkbshvq_igver3tqSOz8oXYU","context_asset_string":"course_1205169","ping_url":"https://canvas.uw.edu/api/v1/courses/1205169/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1205169/pages","WIKI_PAGE":{"title":"Lesson Three, Part 2: Creating the Bitmap Class","created_at":"2018-03-16T21:50:46Z","url":"lesson-three-part-2-creating-the-bitmap-class","editing_roles":"teachers","page_id":"2704801","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class","todo_date":null,"updated_at":"2018-03-16T21:50:46Z","locked_for_user":false,"body":"\u003cp\u003eTo represent the actual bitmap, rather than just its header, we will create a \u003ccode\u003eBitmap\u003c/code\u003e class. For our current needs, this needn't provide a substantial interface, but merely basic loading and iteration of the image (no need for insertions or removals).\u003c/p\u003e\r\n\u003cp\u003eTo iterate or load the image, we need to choose an underlying collection and look a bit closer at an idea that was touched upon earlier: the \u003cspan class=\"italics\"\u003escan line\u003c/span\u003e. Bitmap images generally work in terms of scan lines. Rather than thinking of a bitmap as a two dimensional matrix of colors, it is simplified conventionally to a collection of one dimensional arrays of colors. Iteration is then done on a per scan line basis. This comes about for two reasons:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003emost existing algorithms (and code in general) are designed around one dimensionality; and\u003c/li\u003e\r\n\u003cli\u003eit is possible to work efficiently with one scan line at a time.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn more sophisticated situations than ours, certainly a matrix approach might be better. If we had to perform a lot of modifications to the image on a pixel-by-pixel basis, we would enjoy the convenience of being able to set and get pixels based on a two-dimensional location. (Of course, this isn't entirely complicated to provide on top of the same structure of a collection of scan lines.)\u003c/p\u003e\r\n\u003cp\u003eThink about the scan-line approach as working with the one-dimensional building blocks available to us. Our bitmap is effectively an implementation of a matrix, by the very fact of its having a width and height. What collection we use behind the scenes will not be of critical importance in the long run, and one way or another our bitmap will always begin as one-dimensional information (memory on disk or in a file) and end the same way (once again, as memory on disk or in a file). This isn't a strong argument against making a more matrix-like interface to our bitmap, but simply a good example of why many of our clients won't need this sophistication. Certainly, we won't be limiting what any clients can do by providing scan line based iteration, but merely changing how they go about doing it.\u003c/p\u003e\r\n\u003cp\u003eWe'll define our bitmap class more like a standard collection than a concept of a graphic. This is why Bitmap is a better name than BitmapGraphic. The reason for creating the \u003ccode\u003eBitmap\u003c/code\u003e class in this manner is for consistency and simplicity. If we begin to think of the Bitmap as more than just a list of scan lines, we introduce more design concerns. We'll look at the design concerns of supporting bitmaps in a more powerful way in the next lesson, but for now we'll focus on getting familiar with bitmaps and the techniques of the C++ standard library.\u003c/p\u003e\r\n\u003cp\u003eTaking all this into account, we end up with the class definition in example 3.5 below.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\" cellspacing=\"10\" cellpadding=\"4\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003cspan class=\"bold\"\u003eCode Example 3.5\u003c/span\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003eclass Bitmap {\r\n\tpublic:\r\n\t\ttypedef std::list\u0026lt;Color\u0026gt; ScanLine;\r\n \r\n\tprivate:\r\n\t\ttypedef std::list\u0026lt;ScanLine\u0026gt; ScanLineCollection;\r\n \r\n\tpublic:\r\n\t\ttypedef ScanLineCollection::iterator ScanLineIterator;\r\n \r\n\t\tBitmap (std::istream\u0026amp; sourceStream);\r\n \r\n\t\tScanLineIterator begin (); // named this way for consistency.\r\n\t\tScanLineIterator end ();\r\n \r\n\t\tint getWidth () const;\r\n\t\tint getHeight () const;\r\n \r\n\t// ...\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eWe're still missing one critical piece of information needed to implement this class: the format of the raw data. The raw data is actually quite easy to read in. It will be stored as sets of three bytes (24-bits) of blue, green, and red (in that order). The only source of complexity is that each scan line is DoubleWord aligned. This means that all scan lines are patched up with extra bytes at the end to make them divisible by four (so they can be read as a series of 32-bit, or DoubleWord, values). This means that if the width of your image is 10, then the size of a scan line will be 30 bytes (because of the three color components). Since this number is not divisible by four, two extra bytes of padding are added. On the other hand, if the width of your image is 100 (and the size of the scan line is 300), no padding will be added. Note that padding bytes will always be zero.\u003c/p\u003e\r\n\u003cp\u003eAt this point, we have finished everything needed to load a bitmap. Since the bitmap we load is effectively no different than many standard library collections, we can use it in conjunction with many of the standard generic algorithms. Before looking into which algorithms we can use to stretch and save our bitmap, we need a deeper understanding of iterators. Remember that generic algorithms and collections are built on top of the idea of an iterator, so the concept of an iterator is at the heart of much of the C++ standard library.\u003c/p\u003e\r\n\u003ch2\u003eCreating and Using Iterators\u003c/h2\u003e\r\n\u003cp\u003eMost collections—especially the fundamental collections—are only useful because they have meaning in their elements. As we discussed in Lesson Two, this leads us toward the idea of element orientation and one of the better means of focusing on elements: iterators (a concept that you are already well versed in).\u003c/p\u003e\r\n\u003cp\u003eIn the C++ Standard Library, many forms of iterators are available—for example, random-access iterators provide the ability to move forward or backward by any amount—but there are certain commonalities among all of them. Firstly, iterators are usually nested \"internal\" iterators. If you need to review internal versus external iterators, \u003ccite\u003eDesign Patterns: Elements of Reusable Object-Oriented Software\u003c/cite\u003e describes these two categories of iterators well. In the C++ standard library, all collections use internal iterators, whereas some general purpose iterators are created as external iterators. This makes sense, as a collection's iterator should be tightly coupled to the collection.\u003c/p\u003e\r\n\u003cp\u003eAnother commonality between all iterators is their \"interface,\" so to speak. In \u003cspan class=\"italics\"\u003eC++\u003c/span\u003e: \u003cspan class=\"italics\"\u003eIntermediate\u003c/span\u003e you learned how generic programming promotes loose abstractions that usually require documentation and can be error-prone. In the standard library, there is no iterator interface from which all iterator implementations inherit. Instead, an iterator is only defined by the way it behaves. The sum of the behaviors and operations expected in all iterators (such as providing a preincrement operator) defines the loose interface of what an iterator is.\u003c/p\u003e\r\n\u003cp\u003eAt the very minimum, an iterator must support forward, incremental movement—one unit at a time. It must do this via the pre- and post-increment operations. Additionally, dereference and pointer-to operators are expected for actual element access. Anything beyond these basics helps categorize the iterator into one or more \"subtypes\" of the generic concept of iterator.\u003c/p\u003e\r\n\u003ch2\u003eCategories of Iterators\u003c/h2\u003e\r\n\u003cp\u003eThere are five categories of iterators with different levels of functionality. They range from random-access, with the most functionality, to input and output, with least. Choosing which you need is fairly straightforward (or at least more straightforward than choosing a collection). Of course, most of the time you will have no choice—the algorithms and collections you use will dictate which category of iterator you will use. When you do have a choice, use the minimum category of iterator you need. This will allow for more flexibility in your code.\u003c/p\u003e\r\n\u003cp\u003eOne of the common things over which you will usually have control is whether or not to use constant iterators. When iterating a collection where you don't need to modify the elements themselves, you can use a constant iterator for safety (and performance as well). These iterators allow constant access only to the object they represent.\u003c/p\u003e\r\n\u003cp\u003eConstancy is not considered in defining the categories, but is an orthogonal issue. When standard algorithms and documentation refer to iterators, they will often specify one of five categories: input, output, forward, bidirectional, or random access. These categories and their relations are shown in figure 3.1. below.\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eFigure 3.1\u003c/span\u003e—Categories and Their Relations\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1205169/files/47698278/preview\" alt=\"diagram of categories and their relations\" width=\"251\" height=\"251\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1205169/files/47698278\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThese categories are based on the following fundamental distinctions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInput—supports single increment and dereference\u003c/li\u003e\r\n\u003cli\u003eOutput—supports single increment and assignment\u003c/li\u003e\r\n\u003cli\u003eForward—defined by supporting the features of both input and output iterators\u003c/li\u003e\r\n\u003cli\u003eBidirectional—defined by supporting the features of forward iterators plus the ability of single decrement\u003c/li\u003e\r\n\u003cli\u003eRandom Access—defined by supporting the features of bidirectional plus the ability to increment and decrement by more than one\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eEach of these is useful, or capable, in different contexts. For example, an input iterator is the only one it's possible to use with console input—since console input cannot allow output, going backwards, or jumping ahead by more than one character at a time.\u003c/p\u003e\r\n\u003cp\u003eAs we've stated, make sure to use the minimum category of iterator that you need to keep your code generic. For example, if you write an algorithm that could be written with simple input iterators—but you rely on decrementing (available in bidirectional iterators) or random-access for convenience—it might be better to make your algorithm use only forward iterators. By doing this, you might be able to allow console input to be processed by the algorithm. If you went to the other extreme and used a random access iterator, then your algorithm would not be able to be performed on list collections, since lists only provide single increment and decrement (bidirectional iterators).\u003c/p\u003e\r\n\u003cp\u003eOf course, there are no easy ways to absolutely ensure that you're using only the features of an input iterator, since these are loose abstractions. If your code is modified later and you begin using new features of your iterator, you may unintentionally restrict the reuse of your code. The only way of ensuring its reuse is to be aware of the categories of iterators and what defines them, and to document your decisions.\u003c/p\u003e\r\n\u003ch3\u003eInput Iterators\u003c/h3\u003e\r\n\u003cp\u003eAn input iterator only provides single increment and dereferencing as a means of constant-only access to the underlying element object. The generic pseudo-interface of an input iterator is as shown in example 3.6.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.6\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003einterface input_iterator\u0026lt;Element\u0026gt; {\r\n\tinput_iterator (input_iterator const\u0026amp;);\r\n   \r\n\tinput_iterator\u0026amp; operator++ ();\r\n\tinput_iterator\u0026amp; operator++ (int);\r\n \r\n\tElement const\u0026amp; operator* () const;\r\n\tElement const* operator-\u0026gt; () const;\r\n \r\n\tbool operator== (input_terator const\u0026amp;) const;\r\n\tbool operator!= (input_iterator const\u0026amp;) const;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eInput iterators are designed for use in single pass algorithms, which we will vaguely define as follows:\u003c/p\u003e\r\n\u003cblockquote\u003eA single pass algorithm is an algorithm that does not rely on accessing any data more than once.\u003c/blockquote\u003e\r\n\u003cp\u003eFor example, decompressing a run-length encoded bitmap would only require a single pass. Most C++ standard algorithms are also single-pass. For this reason and for genericity, many C++ standard algorithms rely solely on input iterators.\u003c/p\u003e\r\n\u003cp\u003eAlthough these algorithms often use input iterators exclusively, there is only one exclusively input iterator provided in the C++ standard library. This iterator is the \u003ccode\u003eistream_iterator\u003c/code\u003e, which is covered later in this section. This is actually a good design decision. The generic algorithms place the least restrictions on you by using the lowest common denominator of iterator categories, whereas the standard collections place the least restrictions on you by providing you with the most flexible category of iterator they can. The combination of these two design decisions results in standard algorithms that work with virtually everything.\u003c/p\u003e\r\n\u003cp\u003eIf you look back at the list of features for each category of iterator, you can see that a constant forward iterator might behave exactly as an input iterator. This is because the hierarchy of categories is not exactly a hierarchy: Iterators can fall into any combination of categories. Unfortunately, these categories and their relations are very loosely defined. They are concepts that sometimes intersect—a property of the generic programming paradigms tendency to create loose abstractions.\u003c/p\u003e\r\n\u003ch3\u003eOutput Iterators\u003c/h3\u003e\r\n\u003cp\u003eAn output iterator only provides single increment and assignment as a means of modify-only access to the underlying element. The generic pseudo-interface of an output iterator is as shown in example 3.7:\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.7\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003einterface output_iterator\u0026lt;Element\u0026gt; {\r\n\toutput_iterator (output_iterator const\u0026amp;);\r\n   \r\n\toutput_iterator\u0026amp; operator++ ();\r\n\toutput_iterator\u0026amp; operator++ (int);\r\n \r\n\tElement\u0026amp; operator* ();\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eAs stated, output iterators only provide assignment; unfortunately, though, they do this in a somewhat strange manner. Rather than providing a \u003ccode\u003esetElement\u003c/code\u003e method and no \u003ccode\u003egetElement\u003c/code\u003e method or some other scheme that separates reading from writing, they provide a dereference operator. Since the dereference operator returns a reference, there's no obvious way of protecting from read access. Implementations of output iterators in the C++ Standard Library provide a bizarre workaround for this problem that has some interesting consequences. This workaround is shown in example 3.8 below: an implementation of \u003ccode\u003eback_insert_iterator\u003c/code\u003e.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.8\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003etemplate \u0026lt;class Collection\u0026gt;\r\nclass back_insert_iterator \r\n   : public iterator\u0026lt;output_iterator_tag, void, void, void, void\u0026gt; {\r\n\tpublic:\r\n\t\texplicit back_insert_iterator(Collection\u0026amp;);\r\n \r\n\t\tback_insert_iterator\u0026amp; operator=\r\n\t\t\t(typename Collection::const_reference value);\r\n \r\n\t\tback_insert_iterator\u0026amp; operator*();\r\n\t\tback_insert_iterator\u0026amp; operator++();\r\n\t\tback_insert_iterator\u0026amp; operator++(int);\r\n};\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eNotice the return type of the \u003ccode\u003edereference\u003c/code\u003e operator. Most implementations of output iterators use this technique for disallowing anything besides the assignment operator. By returning itself and providing an \u003ccode\u003eoperator=\u003c/code\u003ethat allows assignment to an element object, the \u003ccode\u003eback_insert_iterator\u003c/code\u003e above ensures that no one will mistakenly attempt to read from it. For example, the code in example 3.9 would generate a compile-time error.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.9\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003etypedef std::list\u0026lt;Student\u0026gt; StudentList;\r\n \r\nStudentList students;\r\nback_insert_iterator\u0026lt;StudentList\u0026gt; studentInserter (students);\r\n \r\nStudent student = *studentInserter; // ERROR: no conversion from\r\n\t\t\t\t\t\t// back_insert_iterator to \r\n\t\t\t\t\t\t// Student available.\r\n*studentIterator = Student (\"Krisha Steuver\"); // OK\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eClearly, output iterators are more primitive than input iterators. Like input iterators, they can only support single-pass algorithms; but the concept of a pass does not really belong here. A very important distinction between output iterators and input iterators is that with output iterators there is no concept of an \"end.\" Thus, we don't need to check for the validity of an output iterator before writing.\u003c/p\u003e\r\n\u003cp\u003eOne important caveat about the use of output iterators, is that if you create a copy of one, it will be incremented automatically along with the original. Furthermore, every time a value is set via dereferencing, each iterator will effectively move forward. This means that the otherwise predictable invariant of \"\u003ccode\u003e++i == ++j\u003c/code\u003e\" will fail.\u003c/p\u003e\r\n\u003ch3\u003eForward Iterators\u003c/h3\u003e\r\n\u003cp\u003eA forward iterator provides the functionality of an input iterator and \u003cspan class=\"italics\"\u003esome\u003c/span\u003e of the functionality of an output iterator. The generic pseudo-interface of a forward iterator is as shown in example 3.10.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.10\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003einterface forward_iterator\u0026lt;Element\u0026gt; {\r\n   forward_iterator ();\r\n   forward_iterator (forward_iterator const\u0026amp;);\r\n   forward_iterator\u0026amp; operator= (forward_iterator const\u0026amp;);\r\n   \r\n   forward_iterator\u0026amp; operator++ ();\r\n   forward_iterator\u0026amp; operator++ (int);\r\n \r\n   Element const\u0026amp; operator* () const;\r\n   Element const* operator-\u0026gt; () const;\r\n \r\n   bool operator== (forward_iterator const\u0026amp;) const;\r\n   bool operator!= (forward_iterator const\u0026amp;) const;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eA forward iterator is not exactly the combination of an input iterator and an output iterator. Remember, that figure 3.1 gives you a basic conceptual model of the categories of iterators; these categories work because of what people will and won't do with them. In reality, the sub-categorizations may not be completely substitutable for their super-categorizations. With forward iterators, there is a reliance on an \"end,\" whereas with output iterators, there is not. Also, although neither input iterators or output iterators allow multi-pass algorithms, forward iterators do (in other words, modifying or reading the value will not increment the iterator).\u003c/p\u003e\r\n\u003ch3\u003eBidirectional Iterators\u003c/h3\u003e\r\n\u003cp\u003eThere is not much new to say for bidirectional iterators: they provide both post- and pre-decrement capabilities as well as everything inherited from the category of forward iterators. Their pseudo-interface is defined in example 3.11.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.11\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003einterface bidirectional_iterator\u0026lt;Element\u0026gt;\r\n   : public forward_iterator\u0026lt;Element\u0026gt; {\r\n   // note that if this was real C++, rather than a pseudo\r\n   // language one would have to overload additional operators\r\n   // because they would be returning the supertype, rather than \r\n   // bidirectional_iterator.\r\n \r\n   bidirectional_iterator\u0026amp; operator-- ();\r\n   bidirectional_iterator\u0026amp; operator-- (int);\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003ch3\u003eRandom-Access Iterators\u003c/h3\u003e\r\n\u003cp\u003eA random access iterator takes away the idea of iteration, or at least allows it to be taken away, by providing the ability to jump ahead by more than one element; see example 3.12 below.\u003c/p\u003e\r\n\u003ctable style=\"width: 480px;\" border=\"0\"\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eCode Example 3.12\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003ccode\u003einterface random_access_iterator\u0026lt;Element\u0026gt;\r\n   : public bidirectional_iterator\u0026lt;Element\u0026gt; {\r\n   Element\u0026amp; operator[] (int index);\r\n   \r\n   random_access_iterator\u0026amp; operator+= (difference_type increment);\r\n   random_access_iterator\u0026amp; operator-= (difference_type decrement);\r\n   \r\n   random_access_iterator operator- (difference_type decrement);\r\n   difference_type operator- (random_access_iterator const\u0026amp;);\r\n   \r\n   bool operator\u0026lt; (random_access_iterator const\u0026amp;);\r\n   bool operator\u0026gt; (random_access_iterator const\u0026amp;);\r\n   bool operator\u0026lt;= (random_access_iterator const\u0026amp;);\r\n   bool operator\u0026gt;= (random_access_iterator const\u0026amp;);\r\n \r\n   friend random_access_iterator operator+ (difference_type increment, \r\n      random_access_iterator const\u0026amp;);\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eAn overview of the features of random-access iterators is as follows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA somewhat peculiar indexing operator that allows you to treat the iterator like an array-style collection, potentially causing some very hard-to-follow code.\u003c/li\u003e\r\n\u003cli\u003eOperators \u003ccode\u003e+=\u003c/code\u003eand \u003ccode\u003e-=\u003c/code\u003e(scaled increment and decrement) that allow incrementing and decrementing the position of the iterator. Using the concept of these breaks with the idea of iterators by being position oriented is closer to the index-based array style collections. Not coincidentally, only these collections generally provide random access iterators.\u003c/li\u003e\r\n\u003cli\u003eAddition and subtraction operators (\u003ccode\u003eoperator+\u003c/code\u003e and \u003ccode\u003eoperator-\u003c/code\u003e), which behave similar to a pointer to an array: adding two iterators is not supported, subtracting two iterators returns an integer of their length apart, and adding or subtracting an integer to an iterator returns a new iterator that is incremented by that amount. If this sounds remarkably like pointers to you, it is because the initial idea of C++ style iterators was built from pointers. Although the sophistication of the C++ standard library has now come to a point where all iterators must generally be implemented as classes, the initial design philosophy of making iterators behave like pointers stuck.\u003c/li\u003e\r\n\u003cli\u003eComparison operators of less than, greater than, less than or equal to, and greater than or equal to.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eFlaws of Random-Access\u003c/h4\u003e\r\n\u003cp\u003eMost algorithms work in terms of operating on each element or operating until the current element satisfies a certain condition, not jumping an arbitrary amount forward. Furthermore, none of the algorithms in the C++ Standard Library rely on random-access iterators, though some are specialized to work more efficiently with them (the distance algorithm, for example).\u003c/p\u003e\r\n\u003cp\u003eSince the algorithms that are specialized for random access iterators use only the basic addition and subtraction operators, you might wonder where the requirement of the additional operators (specifically the indexing operator) came from. You might also be curious as to whether the indexing provided is relative to the current position or not, and, once again, when exactly you might need it.\u003c/p\u003e\r\n\u003cp\u003eThe answer to these thoughts is that old conventions, as well as desires to implement certain collections efficiently, drove the new conventions. The interface of a random access iterator is effectively the interface of a pointer, including the somewhat confusing nuances of pointer math. This is simply because pointers were originally the basis for random-access iterators. In keeping with the tradition of forward-thinking, we feel that—especially when educating the next generation of programmers—the legacy of the past should be known but not always followed. Be aware of what random-access iterators are and how they behave. Your required reading will cover this in detail (though it may not be clearly documented that the indexing will be relative to the current position).\u003c/p\u003e\r\n\u003cp\u003eAlso, remember that the only standard collections that provide random-access iterators are vector and deque. Each of these allows indexing as well, and has the potential to be misused in an index-oriented manner rather than an iterator-oriented manner.\u003c/p\u003e\r\n\u003ch3\u003eReverse Iterators\u003c/h3\u003e\r\n\u003cp\u003eReverse iterators are not a category of iterators but an implementation. The \u003ccode\u003ereverse_iterator\u003c/code\u003e is an adapter for bidirectional iterators to reverse their increment and decrement semantics.\u003c/p\u003e\r\n\u003cp\u003eThe benefit of reverse iterators are that they allow reuse of fundamental algorithms and a consistent paradigm of writing one-direction algorithms, rather than learning the decrement version of an algorithm or having different algorithms for decrementing.\u003c/p\u003e\r\n\u003ch2\u003eIntroduction to Standard Algorithms and Idiomatic Programming\u003c/h2\u003e\r\n\u003cp\u003eIn example 3.4 we used a function called \u003ccode\u003everifyEquality\u003c/code\u003e to make our code more readable and maintainable. Another very important reason that using \u003ccode\u003everifyEquality\u003c/code\u003e was appropriate was that it expressed our intent clearly in the code itself, without using comments. All around it, allowed us to work at a slightly higher level than \u003ccode\u003eif\u003c/code\u003es and \u003ccode\u003eelse\u003c/code\u003es—and that is the gist of why it was beneficial.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003everifyEquality\u003c/code\u003e is an example of idiomatic programming. Rather than thinking about the process we'd be doing otherwise as \"checking if the read value of x is equal to what we want it to be and throwing an exception if it isn't,\" we simplify think of it as \"verifying equality.\" How \u003ccode\u003everifyEquality\u003c/code\u003e works is none of our concern, most the time. We centralize the concern into one isolated function—a function that helps to form a higher level language. Each one of these sorts of functions, such as the standard algorithms \u003ccode\u003ecopy\u003c/code\u003e,\u003ccode\u003e find\u003c/code\u003e, and \u003ccode\u003ereverse\u003c/code\u003e, can be thought of as a definition of a new word that broadens our vocabulary. When we work with these new words, we can avoid the awkward minor variations between the various ways of copying, finding, and reversing, and help to communicate what we're doing more effectively.\u003c/p\u003e\r\n\u003cp\u003eYou should note that the term \"idiomatic programming\" is used primarily by the generic programming community. The term generally implies the generic-global-functions approach, but much of its essence is unrelated to the means of application. In general, no matter how it is accomplished, idiomatic programming means stating your intent and working at a higher level than code that meanders through control statements. The generic-global-functions approach is an interesting and beneficial way of supporting much of idiomatic programming in C++, but things as simple as named constants and other self-documenting code techniques are also idiomatic approaches.\u003c/p\u003e\r\n\u003cp\u003eThe C++ standard library lays the groundwork for writing and using generic algorithms. The collection of generic algorithms available to you will not be outlined in this lesson, but are covered in your required reading. You will find yourself referring over and over to the extensive documentation available on these algorithms as you begin to use them—and there is little insight to add beyond what the texts already cover. Since it is rare to use all (or even the majority) of generic algorithms in a single system, it can take some time before you are fluent. What's important is that you make the effort always to check if there's a generic algorithm that exists for what you're doing; and if not, to create one.\u003c/p\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class","WIKI_PAGE_EDIT_PATH":"/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1205169/pages/lesson-three-part-2-creating-the-bitmap-class/revisions","COURSE_ID":"1205169","MODULES_PATH":"/courses/1205169/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"STUDENT_PLANNER_ENABLED":true,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Part 2_ Creating the Bitmap Class_files/navigation_header.bundle-549b1681b9.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/default.js" defer="defer"></script>
<script src="./Part 2_ Creating the Bitmap Class_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>