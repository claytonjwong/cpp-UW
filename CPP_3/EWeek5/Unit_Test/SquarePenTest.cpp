//
//  SquarePenTest.cpp
//  EWeek5
//
//  Created by Clayton Wong on 9/11/18.
//  Copyright Â© 2018 Clayton Wong. All rights reserved.
//

#include "TestHarness.h"
#include "BasicCanvas.hpp"
#include "Color.hpp"
#include "SquarePen.hpp"
#include "Point.hpp"
#include "IStroke.hpp"

using namespace BitmapGraphics;

TEST( singlePointTopLeftMostCorner, SquarePen )
{
    const int PEN_SIZE = 3;
    const int CANVAS_SIZE = 10;
    
    auto backColor = Color{ 255, 255, 255 };
    auto canvas = std::make_shared<BasicCanvas>( CANVAS_SIZE, CANVAS_SIZE, backColor );
    auto penColor = Color{ 0,0,0 };
    SquarePen pen{ StrokeName::SQUARE, PEN_SIZE, penColor };
    
    pen.drawPoint( canvas, VG::Point{0,0} );
    
    for ( int x{ 0 };  x < CANVAS_SIZE;  ++x )
    {
        for ( int y{ 0 };  y < CANVAS_SIZE;  ++y )
        {
            if (  x < PEN_SIZE  &&  y < PEN_SIZE  )
            {
                CHECK_EQUAL(  canvas->getPixelColor(  VG::Point{x,y}  ),  penColor  );
            }
            else
            {
                CHECK_EQUAL(  canvas->getPixelColor(  VG::Point{x,y}  ),  backColor  );
            }
        }
    }
}


TEST( singlePointWithOffset, SquarePen )
{
    const int PEN_SIZE = 2;
    const int CANVAS_SIZE = 4;
    const int OFFSET = 2;
    
    auto backColor = Color{ 255, 255, 255 };
    auto canvas = std::make_shared<BasicCanvas>( CANVAS_SIZE, CANVAS_SIZE, backColor );
    auto penColor = Color{ 0,0,0 };
    SquarePen pen{ StrokeName::SQUARE, PEN_SIZE, penColor };
    
    pen.drawPoint(  canvas, VG::Point{ OFFSET, OFFSET }  );
    
    for ( int x{ 0 };  x < CANVAS_SIZE;  ++x )
    {
        for ( int y{ 0 };  y < CANVAS_SIZE;  ++y )
        {
            if (  (OFFSET <= x && x < OFFSET + PEN_SIZE)  &&  ( OFFSET <= y && y < OFFSET + PEN_SIZE)  )
            {
                CHECK_EQUAL(  canvas->getPixelColor(  VG::Point{x,y}  ),  penColor  );
            }
            else
            {
                CHECK_EQUAL(  canvas->getPixelColor(  VG::Point{x,y}  ),  backColor  );
            }
        }
    }
}
