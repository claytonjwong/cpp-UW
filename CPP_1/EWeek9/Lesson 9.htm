<!DOCTYPE html>
<!-- saved from url=(0075)https://canvas.uw.edu/courses/1177926/pages/lesson-9?module_item_id=7889570 -->
<html class="" dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Lesson 9: CPROGRM 711 A Wi 18: C++ Programming: Introduction</title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/latin/LatoLatin-Regular-3cd3657802.woff2" as="font" type="font/woff2" crossorigin="">
  <link rel="shortcut icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  
  <link rel="stylesheet" media="all" href="./Lesson 9_files/variables-750d72b9d3e5d522f965bf904110c132.css">
  <link rel="stylesheet" media="all" href="./Lesson 9_files/common-d446d06ede.css">
  <script type="text/javascript" async="" src="./Lesson 9_files/ga.js"></script><script>
//<![CDATA[

!function(){
  function get(u){document.write('<scr'+'ipt src="'+ u +'"></sc'+'ript>')}
  var o,s,v;
  if (!(window.Promise && Object.assign && Object.values && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    get("https://du11hjcvx0uqb.cloudfront.net/dist/ie11-polyfill-9f640d24ea.js");
  }
  window.fetch || get("https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.4/fetch.min.js");
}();
      
//]]>
</script>
  <script src="./Lesson 9_files/lato-fontfaceobserver-ed903d58c4.js" async="async"></script>
  
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#008EE2">
  <link rel="stylesheet" media="all" href="./Lesson 9_files/wiki_page-46e7e026f6.css">
  
  <link rel="stylesheet" media="all" href="./Lesson 9_files/custom.css">
<link rel="stylesheet" media="all" href="./Lesson 9_files/custom(1).css">
  <script>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <script src="./Lesson 9_files/variables-750d72b9d3e5d522f965bf904110c132.js" defer="defer"></script>
  <script src="./Lesson 9_files/vendor.bundle-e87d116ea9.js" defer="defer"></script>
<script src="./Lesson 9_files/Los_Angeles-d9cac65c52.js" defer="defer"></script>
<script src="./Lesson 9_files/en_US-80a0ce259b.js" defer="defer"></script>
<script src="./Lesson 9_files/appBootstrap.bundle-0661001892.js" defer="defer"></script>
<script src="./Lesson 9_files/common.bundle-f89441110c.js" defer="defer"></script>
<script src="./Lesson 9_files/wiki_page_show.bundle-230f977ba8.js" defer="defer"></script>
<style type="text/css"></style><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin: 3px 0 5px 5px;
  float: direction(left);
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 0; right: 0;
  color: white;
}


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}
.mejs-button [role="menu"] ul li label {
  margin-left: 5px;
  cursor: pointer;
}
.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}
</style><style type="text/css" data-glamor=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-transitions context-course_1177926 lato-font-not-loaded-yet show webkit chrome no-touch">

<noscript>
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>





<ul id="flash_message_holder"></ul>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="false"></div>

<div id="application" class="ic-app">
  
  <header id="header" class="ic-app-header no-print ">
    <a href="https://canvas.uw.edu/courses/1177926/pages/lesson-9?module_item_id=7889570#content" id="skip_navigation_link">Skip To Content</a>
      <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
        <div class="ic-app-header__logomark-container">
          <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
            <span class="screenreader-only">Dashboard</span>
          </a>
        </div>
        <ul id="menu" class="ic-app-header__menu-list">
            <li class="menu-item ic-app-header__menu-list-item ">
              <a id="global_nav_profile_link" href="https://canvas.uw.edu/profile" class="ic-app-header__menu-list-link">
                <div class="menu-item-icon-container" aria-hidden="true">
                  <div class="ic-avatar ">
                    <img src="./Lesson 9_files/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec" alt="Clayton Wong">
                  </div>
                </div>
                <div class="menu-item__text">
                  Account
                </div>
              </a>
            </li>
          <li class="ic-app-header__menu-list-item ">
            <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                  <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

              </div>
              <div class="menu-item__text">Dashboard</div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
            <a id="global_nav_courses_link" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Courses
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

              </div>
              <div class="menu-item__text">
                Calendar
              </div>
            </a>
          </li>
          <li class="menu-item ic-app-header__menu-list-item ">
            <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>

                <span class="menu-item__badge" style="display: none">0</span>
              </div>
              <div class="menu-item__text">
                Inbox
              </div>
            </a>
          </li>
            


          <li class="ic-app-header__menu-list-item">
           <a id="global_nav_help_link" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
              <div class="menu-item-icon-container" role="presentation">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

              </div>
              <div class="menu-item__text">
                Help
              </div>
</a>          </li>
        </ul>
      </div>
      <div class="ic-app-header__secondary-navigation">
        <ul class="ic-app-header__menu-list">
          <li class="menu-item ic-app-header__menu-list-item">
            <button id="primaryNavToggle" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Expand global navigation
                " title="Expand global navigation
                ">
              <div class="menu-item-icon-container" aria-hidden="true">
                <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

              </div>
            </button>
          </li>
        </ul>
      </div>
    <div id="global_nav_tray_container"><noscript data-reactid=".0"></noscript></div>
  </header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1177926/pages/lesson-9?module_item_id=7889570#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./Lesson 9_files/saved_resource.html" style="border: 0;" title="Error"></iframe>
  </div>

  

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu" title="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>
          <div class="ic-app-crumbs">
        <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible">      <i class="icon-home" title="My Dashboard">
        <span class="screenreader-only">My Dashboard</span>
      </i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1177926"><span class="ellipsible">CPROGRM 711 A</span></a></li><li><a href="https://canvas.uw.edu/courses/1177926/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson 9</span></li></ul></nav>
        </div>
      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu list-view" style="display: block">
              <span id="section-tabs-header-subtitle" class="ellipsis">Winter 2018</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1177926" title="Home" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/announcements" title="Announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/modules" title="Modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/discussion_topics" title="Discussions" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/grades" title="Grades" class="grades" tabindex="0">Grades</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/users" title="People" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/external_tools/12299" title="UW Libraries" class="context_external_tool_12299" tabindex="0">UW Libraries</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1177926/external_tools/57145" title="Info &amp; Help" class="context_external_tool_57145" tabindex="0">Info &amp; Help</a></li></ul></nav>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
            

          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">
<div class="header-bar-outer-container">
  <div class="header-bar-container sticky-toolbar sticky" data-sticky="">
    <div class="header-bar flex-container">
      <div class="header-bar-left header-left-flex">
        
          
        
      </div>
      <div class="header-bar-right header-right-flex">
        
          
          
            
          
        
        
          
        
        
      </div>
    </div>
    <div class="page-changed-alert" role="alert" aria-atomic="true" aria-live="polite"></div>
  </div>
</div>


<div class="show-content user_content clearfix enhanced">
  <h1 class="page-title">Lesson 9</h1>
  
    
  
  
    <h2>
<img src="./Lesson 9_files/L09.png" alt="L09.png" width="50" height="50" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1177926/files/44384304" data-api-returntype="File" style="max-width: 962px;">&nbsp;Extending the Language Through Inheritance - Part 2</h2>
<div class="keytermBox" style="background-color: #F3F3E9;">
<h6>Key Terms</h6>
<ul>
<li>protected</li>
<li>public</li>
<li>private</li>
<li>unnamed subobjects</li>
</ul>
</div>
<h3>Non-Public Derivation</h3>
<p>So far we have looked only at public derivation. We also have available to us protected derivation and private derivation. Where public derivation denotes an is-a relationship, protected and private denote an implemented-in-terms-of relationship. Note that while we spend a fair amount of time in this lesson discussing private derivation these derivation types are not often used. But understanding how they work will strengthen your understanding of C++ in many areas. Protected derivation is not discussed here as it is used even less often then private derivation. The class text has a good discussion of protected derivation for those curious about it.</p>
<h3>Private Derivation</h3>
<p>If we change the derivation specification from <span class="italics">public</span> to<span class="italics"> private</span> as in the Example below, we will get an error when we try to compile.</p>
<pre>class BaseClass
{
public:
    BaseClass()
        : baseValue(20)
    {
    }

    int getBaseValue() const
    {
        return baseValue;
    }

private:
    int baseValue;
};

class DerivedClass: private BaseClass
{
};
    
TEST(PrivateInheritance, Lesson9)
{
    DerivedClass child;

    // The following line fails to compile. Private inheritance
    // does not expose base class members in derived classes
    // CHECK_EQUAL(20, child.getBaseValue());
}</pre>
<p>While it is still a public member of instances of <code>BaseClass</code>, the member function getBaseValue() will be a private member of instances of <code>DerivedClass</code>. If we wish to access <code>baseValue</code> through <code>DerivedClass</code>, we must modify <code>DerivedClass</code> to add access functions; see the example below.</p>
<pre>// Classes Derivation - Single Inheritance Example
// Simple Inheritance - Private Derivation

class BaseClass
{
public:
    BaseClass(int aValue = 20)
        : baseValue(aValue)
    {
    };

    int getBaseValue() const
    {
        return baseValue;
    }

    void setBaseValue(int value)
    {
        baseValue = value;
    }
 
private:
    int baseValue;
};
    
// Declare a private derivation
class DerivedClass : private BaseClass
{
public:
    DerivedClass()
        : derivedValue(10)
    {
    }
    
    DerivedClass(int aDerivedValue);
    
    DerivedClass(int aDerivedValue, int aBaseValue);
    
    // Use BaseClass to implement getValue/setValue
    int getValue() const
    {
        return getBaseValue();
    }
    
    void setValue(int value)
    {
        setBaseValue(value);
    }
    
    // Access DerivedClass
    int getDerivedValue()
    {
        return derivedValue;
    }
    
    void setDerivedValue(int aValue)
    {
        derivedValue = aValue;
    }

private:
    int derivedValue;
};

DerivedClass::DerivedClass(int aValue)
    : BaseClass(15)
{
    derivedValue = aValue;
}

DerivedClass::DerivedClass(int aValue, int aBaseValue)
    : BaseClass(aBaseValue)
{
    derivedValue = aValue;
}

TEST(PrivateInheritance2, Lesson9)
{
    BaseClass base;
    DerivedClass child(5, 35);
 
    CHECK_EQUAL(20, base.getBaseValue());
    CHECK_EQUAL(35, child.getValue());
    CHECK_EQUAL(5, child.getDerivedValue());
}</pre>
<p>The private derivation will block all subsequent access to the inherited base class variables. They are not uncovered by a subsequent public derivation. See below.</p>
<pre>// Classes Derivation - Single Inheritance
// Simple Inheritance - Private Derivation
// followed by Public Derivation

class BaseClass
{
public:
    BaseClass()
        : baseValue(0)
    {
    }
    
    BaseClass(int aValue)
        : baseValue(aValue)
    {
    }

    int getBaseValue() const
    {
        return baseValue;
    }

private:
    int baseValue;
};

class DerivedClass1: private BaseClass
{
public:
    DerivedClass1()
        : derivedValue1(10)
    {
    }
    
    // Access BaseClass
    int getValue() const
    {
        return getBaseValue();
    }

    int getDerivedValue1() const
    {
        return derivedValue1;
    }
    
private:
    int derivedValue1;
};

// baseValue is inherited privately from
// DerivedClass1

class DerivedClass2 : public DerivedClass1
{
public:
    DerivedClass2()
        : derivedValue2(20)
    {
    }

    int getDerivedValue2() const
    {
        return derivedValue2;
    }

private:
    int derivedValue2;
};

TEST(PrivateInheritance3, Lesson9)
{
    BaseClass base;
    DerivedClass1 child1;
    DerivedClass2 child2;

    CHECK_EQUAL(0, base.getBaseValue());

    // compile error - private derivation
    // CHECK_EQUAL(1, child1.getBaseValue());

    CHECK_EQUAL(10, child1.getDerivedValue1());

    // BaseClass still private after 2 levels of inheritance
    // CHECK_EQUAL(1, child2.getBaseValue());

    CHECK_EQUAL(20, child2.getDerivedValue2());
}</pre>
<h3>Consequences of Private Inheritance</h3>
<p>Under private derivation, public and protected members of the base class are inherited as private. As with friends, sometimes there's a need for limited access to private members. C++ provides a means by which individual members can be made exempt from a private derivation. We do this using the following syntax:</p>
<ul>
<li>Data members<br><code>BaseClass::data member</code>
</li>
<li>Function members<br><code>BaseClass::function member</code>
</li>
</ul>
<p>Notice in the Example below, we do not need to give the signature or return type of the exempted function member.</p>
<pre>// Classes Derivation - Single Inheritance Example
// Simple Inheritance - Private Derivation
// - Exemptions from a Private Derivation

using namespace std;
class BaseClass
{
public:
    BaseClass()
        : baseValue0(20),
        baseValue1(30)
    {
    }
        
    int baseFunction() const
    {
        return 15;
    }

    int getBasevalue0() const
    {
        return baseValue0;
    }

    int getBasevalue1() const
    {
        return baseValue1;
    }

private:
    int baseValue0;
    int baseValue1;
};
    
class DerivedClass : private BaseClass
{
public:
    DerivedClass()
        : derivedValue(10)
    {
    }

    // Uncover BaseClass private members
    BaseClass::getBasevalue0;
    BaseClass::baseFunction;

    // Access DerivedClass
    int getDerivedValue() const
    {
        return derivedValue;
    }
        
    void setDerivedValue(int aValue)
    {
        derivedValue = aValue;
    }
    
private:
    int derivedValue;
};
    
TEST(PrivateInheritance4, Lesson9)
{
    BaseClass base;
    DerivedClass child;

    CHECK_EQUAL(20, base.getBasevalue0());
        
    // getBasevalue0 is now visible
    CHECK_EQUAL(20, child.getBasevalue0());
        
    // We did not expose getBasevalue2 in DerivedClass
    // CHECK_EQUAL(30, child.getBasevalue1());

    // baseFunction can be used as well
    CHECK_EQUAL(15, child.baseFunction());
    CHECK_EQUAL(10, child.getDerivedValue());
}</pre>
<h4>Protected Members</h4>
<p>Class members declared protected are accessible to member functions and friends of the derived class and are <span class="keyterm">private</span> to users of the class</p>
<pre>// Classes Derivation - Single Inheritance
// Simple Inheritance - Protected
// Members Under Derivation

class BaseClass
{
public:
    BaseClass()
    : baseValue(0)
    {
    }

    BaseClass(int aValue)
    : baseValue(aValue)
    {
    }

protected:
    int getBaseValue() const
    {
        return baseValue;
    }

private:
    int baseValue;
};

class DerivedClass: public BaseClass
{
public:
    DerivedClass()
    : BaseClass(15),
    derivedValue(10)
    {
    }
 
    // Access BaseClass
    int getValue() const
    {
        return getBaseValue();
    }

private:
    int derivedValue;
};

TEST(ProtectedMembers, Lesson9)
{
    BaseClass base;
    DerivedClass child;
   
    // 'BaseClass::getBaseValue' : cannot access protected member declared in class 'BaseClass'
    // CHECK_EQUAL(0, child.getBaseValue());
    
    // 'BaseClass::getBaseValue' : cannot access protected member declared in class 'BaseClass'
    // CHECK_EQUAL(15, base.getBaseValue());

    CHECK_EQUAL(15, child.getValue());
}</pre>
<h3>Upcasting</h3>
<p>We will now examine the relationship between derived classes and public base classes as a prelude to introducing the concept of runtime polymorphism. Remember that a subset of the members in each derived class object are those it has inherited from its base (or bases).</p>
<p>When we discussed the layout of a derived class object in memory, we saw that a base class type pointer, initialized to point to the derived object, referred to the starting address of the object. Since a derived class pointer points to the same locations, it should be evident that we can use either the base class or a derived class pointer to refer to the derived class object. Conversely, we can use a derived class pointer to refer to a base class object.</p>
<p>C++ supports four such predefined (automatic) upcasts between a derived class and its public base class:</p>
<ul>
<li>A derived class <span class="italics">object</span> is implicitly upcast into a public base class object.</li>
<li>A derived class <span class="italics">reference</span> is implicitly upcast into a public base class reference.</li>
<li>A derived class <span class="italics">pointer</span> is implicitly upcast into a public base class pointer.</li>
<li>A <span class="italics">pointer to a member of a base class</span> is implicitly upcast to a pointer to that member in a publicly derived class.</li>
</ul>
<p>An upcast is always legal and successful. A derived class may always be used where a reference or pointer to a base class is required. E.g., an apple is always a fruit. Contrast this with the downcast. A downcast is when you have a base class pointer or reference and you want a pointer or reference to a derived class. Downcasts may or may not be successful. E.g., a fruit is not always an apple. The C++ dynamic_cast is used to downcast. You will learn about dynamic_cast later in the course. One last word about downcasts; while a downcast is sometimes present in a good design, most often the use of a downcast represents a failed design. If you find your design requires a downcast, consider changing the design so the downcast is no longer necessary.</p>
<p>In Example below, we will illustrate each of these upcasts. Before we do, however, let's look at a picture of what we have in memory.</p>
<p>We'll be working with a base class, <code>Fruit</code>, with two data members, stem and seeds, and one member function , <code>identify()</code>. We will publicly derive the class Apple from <code>Fruit</code>. In the class <code>Apple</code>, we will override the inherited <code>identify()</code> function and the data member stem and we will add the data member <code>skin</code>. Our two classes will appear as shown in the below. Observe the layo portion of <code>Apple.</code></p>
<p class="title"><span class="bold">The Fruit and Apple Classes&gt;The Fruit and Apple Classes</span></p>
<p class="title"><img src="./Lesson 9_files/c++711s09fig9-01.gif" alt="fruit and apple classes" width="228" height="305" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1177926/files/44384299" data-api-returntype="File" style="max-width: 962px;"></p>
<pre>// Class Derivation - Single Inheritance
// Simple Inheritance - Upcasting

class Fruit
{
public:
    Fruit()
        : myStem(1),
        mySeeds(4)
    {
    }

    Fruit(int stem, int seeds)
        : myStem(stem),
        mySeeds(seeds)
    {
    }

    int getStem() const
    {
        return myStem;
    }

    virtual std::string identify() const
    {
        return "Fruit";
    }
    
private:
    int myStem;
    int mySeeds;
};

class Apple: public Fruit
{
public:
    Apple()
    : Fruit(3, 4),
    mySkin(2)
    {
    }

    // override
    std::string identify() const
    {
        return "Apple";
    }

    int getSkin() const
    {
        return mySkin;
    }

private:
    int mySkin;
};

int getStem(const Fruit&amp; fruit)
{
    return fruit.getStem();
}

int getStem(const Fruit* const fruit)
{
    return fruit-&gt;getStem();
}

TEST(Upcasting, Lesson9)
{
    Apple a;
    Fruit f;

    CHECK_EQUAL("Apple", a.identify());
    CHECK_EQUAL("Fruit", f.identify());
    
    // Apple instance upcast to Fruit and passed by reference.
    CHECK_EQUAL(3, getStem(a));

    // Apple instance upcast to Fruit and passed by pointer.
    CHECK_EQUAL(3, getStem(&amp;a));

    // While an Apple is always a fruit, a Fruit is not always an apple. Thus
    // We can not store the address of a Fruit in an Apple pointer
    // Apple* aPtr = new Fruit;
    
    // explicit downcast - this compiles but is an error
    // since this Fruit is not an apple.
    Apple* aPtr = (Apple*)&amp;f;
    // CHECK_EQUAL(2, aPtr-&gt;getSkin());

    // Could use dynamic_cast for a typesafe downcast
    aPtr = dynamic_cast&lt;Apple*&gt;(&amp;f);

    // f is not an apple. Thus the dynamic cast returns 0
    CHECK_EQUAL(0, aPtr);

    Fruit&amp; f2 = a;

    // f2 does refer to an apple. The downcast succeeds
    aPtr = dynamic_cast&lt;Apple*&gt;(&amp;f2);
    CHECK(0 != aPtr);
    CHECK_EQUAL(3, aPtr-&gt;getStem());

    // Declare an Apple and use an Apple pointer
    aPtr = new Apple;
    
    // Assign the Apple pointer to a Fruit pointer
    Fruit* fPtr = aPtr;
    CHECK_EQUAL("Apple", fPtr-&gt;identify());
}</pre>
<h3>Overloaded Functions with Class Type Arguments</h3>
<p>In C++, functions can be overloaded with class type as well as built-in type arguments. Let's look at the four alternatives the compiler will consider when trying to resolve which function to invoke.</p>
<h4>Overloaded Function Call Resolution</h4>
<p><strong>Exact Match</strong></p>
<p><span class="bold">A class argument matches only a formal argument of its own class.</span></p>
<p>Class <code>B</code> is derived from class <code>A</code>, and we overload function <code>f1</code> such that the following functions are defined:</p>
<pre>f1(const A&amp; a);
f1(const B&amp; b);</pre>
<p>Next we declare an instance of <code>B</code>,</p>
<pre>B b1;</pre>
<p>then write</p>
<pre>f1(b1); // is legal and resolvable to the proper function</pre>
<p><strong>Standard Conversions</strong></p>
<p class="bold">If an exact match is not possible, a set of standard conversions are attempted.</p>
<ul>
<li>
<span class="bold">Upcast </span> <br>A derived class Object Reference Pointer is implicitly upcast to a public base class type.<br>Class <code>B</code> is derived from class <code>A</code>; we overload function <code>f1</code> such that the functions<br><code>f1(const A&amp; a);<br></code><code>f1(const C&amp; c);</code><br>are defined, and <code>C</code> is not in the derivation hierarchy.<br>Next we declare an instance of <code>B</code>,<br><code>B b1;</code><br>then write<br>
<pre>f1(b1); // is legal and resolvable to the proper function</pre>
</li>
<li>
<span class="bold">Programmer Defined Conversion</span> <br>The programmer can supply conversions
<ul>
<li>
<span class="bold">to the class</span>using the following syntax
<pre>operator typeName() { body }</pre>
<p>typeName â€”type to convert to from the class</p>
</li>
<li>and <span class="bold">from the class</span>(using the constructor with a single argument), with the following syntax:
<pre>X::X(typeName arg) { body } </pre>
<p>typeName â€”type to convert from to the class</p>
</li>
</ul>
</li>
</ul>
<p>We'll now convert to an object type (float) <span class="bold">from</span> the class type (fraction). We do this by defining a conversion operator.</p>
<pre>class Fraction
{
public:
    Fraction(int numerator, int denominator)
    : myNumerator(numerator),
    myDenominator(denominator)
    {
    }
    
    // Conversion operator - convert to float
    operator float() const
    {
        // Note usage of another C++ style cast - the static_cast.
        return static_cast(myNumerator) / static_cast(myDenominator); } private: int myNumerator; int myDenominator; }; TEST(Conversions, Lesson9) { Fraction a(1,2); // implicitly calls conversion operator we provided float b = a; CHECK_DOUBLES_EQUAL(0.5, b, 0.001); }</pre>
<p>Now we'll convert <span class="bold">from</span> an object type (int) <span class="bold">to</span> the class type (fraction). We do this by defining a conversion constructor. We'll also overload operator*.</p>
<pre>// Classes Derivation - Single Inheritance Example
// Simple Inheritance - More conversions

class Fraction
{
public:
    Fraction(int numerator, int denominator)
    : myNumerator(numerator),
    myDenominator(denominator)
    {
    }
    
    // Convert from an int to a fraction
    Fraction(int number)
        : myNumerator(number),
        myDenominator(1)
    {
    }
    
    // Conversion operator - convert to float
    operator float() const
    {
        // Note usage of another C++ style cast - the static_cast.
        return static_cast(myNumerator) / static_cast(myDenominator); } int getNumerator() const { return myNumerator; } int getDenominator() const { return myDenominator; } // Overload the operator* Fraction operator*(const Fraction&amp; f) const; private: int myNumerator; int myDenominator; }; Fraction Fraction::operator*(const Fraction&amp; f) const { return Fraction(myNumerator * f.myNumerator, myDenominator * f.myDenominator); } TEST(Conversions2, Lesson9) { Fraction b(3); CHECK_EQUAL(3, b.getNumerator()); CHECK_EQUAL(1, b.getDenominator()); Fraction c(2, 3); Fraction d = Fraction(4) * c; CHECK_EQUAL(8, d.getNumerator()); CHECK_EQUAL(3, d.getDenominator()); }</pre>
<h3>Copy Constructors and Derivation</h3>
<p>The following member functions cannot be inherited:</p>
<ul>
<li>assignment</li>
<li>constructor</li>
<li>destructor</li>
</ul>
<p>If a copy constructor is not supplied for a derived class, when a copy is necessary, the compiler creates a copy constructor for you. The default copy constructor then copies the base and member objects by calling their copy constructors and the local data members as a <code>bitwise copy</code>.</p>
<p>If a copy constructor is supplied, it must specify the desired copy constructors for the base and member objects and provide initializing values via the initialization list. Default calls are omitted. Syntax is as follows:</p>
<pre>DerivedClassX (const DerivedClassX&amp; object): BaseClass(object)</pre>
<pre>// Classes Membership - Copy Constructors Example

class A
{
public:
    A(int value)
        : myValue(value)
    {
    }

    // A poor example of a copy ctor. A good copy constructor
    // would copy the values from the src. But this poor one allows
    // us to see the copy ctor in action in the test below.
    A(const A&amp; src)
        : myValue(5)
    {
    }

    // Here's a better implementation of a copy ctor. This is the
    // copy ctor the compiler would generate for you if you did not
    // provide one
#if 0
    A(const A&amp; src)
        : myValue(src.myValue)
    {
    }
#endif

    int getValue() const
    {
        return myValue;
    }

private:
    int myValue;
};

// Pass by value - thus copy ctor called when an instance of A passed
int funct(A a)
{
    return a.getValue();
}

TEST(CopyConstructor, Class)
{
    A a(3);

    CHECK_EQUAL(3, a.getValue());

    // A good copy ctor would result in the same values. We use the poor copy ctor
    // to illustrate the fact it is called when a class instance is passed by value
    CHECK_EQUAL(5, funct(a));
}</pre>
<p><span class="bold">Here's an example of copy constructor chaining from a derived class to a base class</span></p>
<pre>// Classes Membership - Copy Constructors Example
// Copy Constructors Under Inheritance

class A
{
public:
    A(int value)
    : myValue(value)
    {
    }
    
    A(const A&amp; a)
        : myValue(5)
    {
    }

    int getValue() const
    {
        return myValue;
    }

private:
    int myValue;
};

class B: public A
{
public:
    B(int value, char aChar)
        : A(value), myCharacter(aChar)
    {
    }
    
    // if A(b) not explicitly given the copied value of b.value will be 1
    B(B&amp; b)
        : A(b),
        myCharacter(b.myCharacter)
    {
    }
    
private:
    char myCharacter;
};

// copy of B instance passed.
int getValue(B b)
{
    return b.getValue();
}

TEST(CopyConstructors, DerivedClass)
{
    B b(5, 'd');

    // instance b is passed by value to the global function getValue. Thus the copy
    // ctor is called. Verify the derived class copy ctor calls the base class copy ctor
    CHECK_EQUAL(5, getValue(b));
}</pre>
<h3>Hiding Inherited Members</h3>
<p>If the same identifier is used in the base and derived classes, ambiguity will result. If there is only a single derivation path, the base class identifier is considered to be masked. We can still access the inherited definition by using the scope resolution operator (i.e., className::memberName). When such a name is unqualified, the compiler tries to resolve any conflicts by selecting the identifier in the most immediate scope. For functions, it's the function in the most immediate scope for which the signatures are identical. Avoid using the same identifier in base and derived classes. It is best to avoid hiding inherited members.</p>
<p>Multiple derivation paths are more difficult. Such paths may occur in several ways as we illustrate in the figure below. We resolve the conflict by using either the scope operator or virtual functions (which we'll discuss in the next lesson).</p>
<p class="title"><span class="bold">Multiple Derivation Paths</span></p>
<p><img src="./Lesson 9_files/c++711s09fig9-02.gif" alt="multiple derivation paths" width="457" height="301" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1177926/files/44384253" data-api-returntype="File" style="max-width: 962px;"></p>
<h3>Multiple Base Classes</h3>
<p>When a derived class inherits from multiple base classes, the derivation specification is a simple extension of that for the single base class.</p>
<p><span class="bold">Syntax</span></p>
<pre>class DerivedClassName : spec0 base class0, spec1 base class1, ... specn base classn,</pre>
<p><code>DerivedClassName</code> specifies the class being derived <br><code>specification</code> specifies access to the base class members:</p>
<pre> public protected private</pre>
<p>Let class <code>A</code> be derived from base classes <code>B</code>, <code>C</code>, and <code>D</code> as follows:</p>
<ul>
<li>
<code>B</code> public</li>
<li>
<code>C</code>, <code>D</code> private</li>
</ul>
<p>We can write any of the three specifications:</p>
<ol>
<li><code>class A : public B, private C, D </code></li>
<li><code>class A : private C, public B, private D </code></li>
<li><code>class A : C, D, public B </code></li>
</ol>
<p>Remember that like the access specification, the derivation specification is private by default.</p>
<h4>Inherited Member Initialization</h4>
<p>The initialization of members inherited from multiple base classes is similar to that for a single base class.</p>
<p>If the base class</p>
<ul>
<li>has only a default constructor, then we should initialize the member values in the body of the derived class constructor; or</li>
<li>has a constructor with arguments, the initialization list is used to pass arguments to the base class constructors.</li>
</ul>
<p>We write the derived class constructor using the following syntax:</p>
<pre>DerivedClass(dCl args):BC0(bC0 args), BC1(bC1 args),...BCn(bCn args), { DerivedClass constructor body }</pre>
<p>The set of derived class constructor arguments may contain initialization values for the base class arguments. We need not provide initializing values if the base class has no constructor or if it has only a default constructor. The base class initializer can be any legal initializer for an object.</p>
<p>When an instance of a derived class is created, the invocation of the base class constructors proceeds left to right (as specified on the init list) and depth first.<br>Let's specify the following derivation,</p>
<pre>class D1 : public B1, public B2 class B1 class B2 b11 b21 b12 b22 b13</pre>
<p><code>B1::b12</code> is a programmer defined type, <code>C1</code>. <br><code>C1</code> is derived from BC1.</p>
<p>Initialization proceeds as</p>
<ul>
<li>class B1
<ul>
<li>b11</li>
<li>b12
<ul>
<li>class C1
<ul>
<li>class BC1
<ul>
<li>bc11</li>
<li>bc12</li>
<li>....</li>
<li>bc1n</li>
</ul>
</li>
<li>c11</li>
<li>c12</li>
<li>...</li>
<li>c1m</li>
</ul>
</li>
<li>b13</li>
</ul>
</li>
<li>class B2
<ul>
<li>b21</li>
<li>b22</li>
</ul>
</li>
<li>class D1
<ul>
<li>d11</li>
<li>d12</li>
<li>...</li>
<li>d1p</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Destruction occurs in the reverse order.</p>
<h3>Summary</h3>
<p>In this lesson, we continued our look at class derivation. As a first step, we studied protected and private derivations and learned some of the reasons why such a derivation may be used. Next, we examined type conversion under derivation and overloaded functions with class type arguments. We concluded with a brief look at multiple inheritance.</p>
<h3>Practice&nbsp;Questions</h3>
<p>Test your understanding of the concepts in Lesson 9 by working through&nbsp;the following practice questions, then check your answers with <a class="" title="Answers to Practice Questions for Lesson 9" href="https://canvas.uw.edu/courses/1177926/pages/answers-to-practice-questions-for-lesson-9" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1177926/pages/answers-to-practice-questions-for-lesson-9" data-api-returntype="Page">Answers to Practice Questions for Lesson 9</a>.</p>
<ol>
<li>Why do we use protected inheritance?</li>
<li>Why do we use private inheritance?</li>
<li>What are the four standard upcasts under derivation?</li>
<li>Can functions be overloaded with class type arguments?</li>
<li>Can copy constructors be inherited?</li>
<li>If there is a name conflict with an identifier inherited from multiple base classes? How is it resolved?</li>
</ol>
  
</div>
<div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <a href="https://canvas.uw.edu/courses/1177926/modules/items/7889569" role="button" class="Button module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-document&#39;&gt;&lt;/i&gt; Lesson 9 Overview and Materials" aria-describedby="msf0-previous-desc">
        <i class="icon-mini-arrow-left"></i>Previous
        <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson 9 Overview and Materials</span>
      </a>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-assignment&#39;&gt;&lt;/i&gt; Course Project 3: Implementation and Testing">
        <a href="https://canvas.uw.edu/courses/1177926/modules/items/7889571" role="button" class="Button" aria-describedby="msf0-next-desc">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Course Project 3: Implementation and Testing</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">8da35da6-e0e9-48da-9b0d-eb8db8b6ce71</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  

<script>
  INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"fms-prod.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"googleAnalyticsAccount":"UA-9138420-1","logPageViews":true,"maxVisibleEditorButtons":3,"editorButtons":[{"name":"","id":21130,"url":"https://uw.hosted.panopto.com/Panopto/Pages/Sessions/embeddedupload.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700},{"name":"Modalis","id":52765,"url":"https://uw.modalis.io/lti","icon_url":"https://uw.modalis.io/assets/richicon.png","canvas_icon_class":null,"width":800,"height":600}]};
  ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.json","url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/171115bc27094614cfdd1485c405a438/variables-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-53dac18d10.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-750d72b9d3e5d522f965bf904110c132.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-b4d65fe883.css"],"current_user_id":"3757111","current_user_roles":["user","student"],"current_user_disabled_inbox":false,"files_domain":"cluster10-files.instructure.com","DOMAIN_ROOT_ACCOUNT_ID":100000000083919,"k12":false,"use_responsive_layout":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *"],"SETTINGS":{"open_registration":false,"eportfolios_enabled":true,"collapse_global_nav":true,"show_feedback_link":true,"enable_profiles":true},"current_user":{"id":"3757111","display_name":"Clayton Wong","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/46487823/mSs2TjTESYscSzrackhgoJvAT79xbNchamHPrSec","html_url":"https://canvas.uw.edu/about/3757111"},"page_view_update_url":"/page_views/8da35da6-e0e9-48da-9b0d-eb8db8b6ce71?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiOGRhMzVkYTYtZTBlOS00OGRhLTliMGQtZWI4ZGI4YjZjZTcxIiwidSI6MTAwMDAwMDAzNzU3MTExLCJjIjoiMjAxOC0wOC0xNFQyMTo0OTo0MS40M1oifQ.cQL4pwMSy71AOTZnSn_ye-1_dXmwCrlnUIVuPYG2DxU","context_asset_string":"course_1177926","ping_url":"https://canvas.uw.edu/api/v1/courses/1177926/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALE":"en","BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1177926/pages","WIKI_PAGE":{"title":"Lesson 9","created_at":"2017-10-18T21:04:15Z","url":"lesson-9","editing_roles":"teachers","page_id":"2573097","last_edited_by":{"id":"616135","display_name":"UW Online","avatar_image_url":"https://canvas.uw.edu/images/thumbnails/48906042/5fiFTncigBVESajokiO6KZAa8tp5cr2EYSaKvX8M","html_url":"https://canvas.uw.edu/courses/1177926/users/616135"},"published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1177926/pages/lesson-9","todo_date":null,"updated_at":"2018-06-08T23:18:38Z","locked_for_user":false,"body":"\u003ch2\u003e\n\u003cimg src=\"https://canvas.uw.edu/courses/1177926/files/44384304/preview\" alt=\"L09.png\" width=\"50\" height=\"50\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1177926/files/44384304\" data-api-returntype=\"File\"\u003e Extending the Language Through Inheritance - Part 2\u003c/h2\u003e\r\n\u003cdiv class=\"keytermBox\" style=\"background-color: #F3F3E9;\"\u003e\r\n\u003ch6\u003eKey Terms\u003c/h6\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eprotected\u003c/li\u003e\r\n\u003cli\u003epublic\u003c/li\u003e\r\n\u003cli\u003eprivate\u003c/li\u003e\r\n\u003cli\u003eunnamed subobjects\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch3\u003eNon-Public Derivation\u003c/h3\u003e\r\n\u003cp\u003eSo far we have looked only at public derivation. We also have available to us protected derivation and private derivation. Where public derivation denotes an is-a relationship, protected and private denote an implemented-in-terms-of relationship. Note that while we spend a fair amount of time in this lesson discussing private derivation these derivation types are not often used. But understanding how they work will strengthen your understanding of C++ in many areas. Protected derivation is not discussed here as it is used even less often then private derivation. The class text has a good discussion of protected derivation for those curious about it.\u003c/p\u003e\r\n\u003ch3\u003ePrivate Derivation\u003c/h3\u003e\r\n\u003cp\u003eIf we change the derivation specification from \u003cspan class=\"italics\"\u003epublic\u003c/span\u003e to\u003cspan class=\"italics\"\u003e private\u003c/span\u003e as in the Example below, we will get an error when we try to compile.\u003c/p\u003e\r\n\u003cpre\u003eclass BaseClass\r\n{\r\npublic:\r\n    BaseClass()\r\n        : baseValue(20)\r\n    {\r\n    }\r\n\r\n    int getBaseValue() const\r\n    {\r\n        return baseValue;\r\n    }\r\n\r\nprivate:\r\n    int baseValue;\r\n};\r\n\r\nclass DerivedClass: private BaseClass\r\n{\r\n};\r\n    \r\nTEST(PrivateInheritance, Lesson9)\r\n{\r\n    DerivedClass child;\r\n\r\n    // The following line fails to compile. Private inheritance\r\n    // does not expose base class members in derived classes\r\n    // CHECK_EQUAL(20, child.getBaseValue());\r\n}\u003c/pre\u003e\r\n\u003cp\u003eWhile it is still a public member of instances of \u003ccode\u003eBaseClass\u003c/code\u003e, the member function getBaseValue() will be a private member of instances of \u003ccode\u003eDerivedClass\u003c/code\u003e. If we wish to access \u003ccode\u003ebaseValue\u003c/code\u003e through \u003ccode\u003eDerivedClass\u003c/code\u003e, we must modify \u003ccode\u003eDerivedClass\u003c/code\u003e to add access functions; see the example below.\u003c/p\u003e\r\n\u003cpre\u003e// Classes Derivation - Single Inheritance Example\r\n// Simple Inheritance - Private Derivation\r\n\r\nclass BaseClass\r\n{\r\npublic:\r\n    BaseClass(int aValue = 20)\r\n        : baseValue(aValue)\r\n    {\r\n    };\r\n\r\n    int getBaseValue() const\r\n    {\r\n        return baseValue;\r\n    }\r\n\r\n    void setBaseValue(int value)\r\n    {\r\n        baseValue = value;\r\n    }\r\n \r\nprivate:\r\n    int baseValue;\r\n};\r\n    \r\n// Declare a private derivation\r\nclass DerivedClass : private BaseClass\r\n{\r\npublic:\r\n    DerivedClass()\r\n        : derivedValue(10)\r\n    {\r\n    }\r\n    \r\n    DerivedClass(int aDerivedValue);\r\n    \r\n    DerivedClass(int aDerivedValue, int aBaseValue);\r\n    \r\n    // Use BaseClass to implement getValue/setValue\r\n    int getValue() const\r\n    {\r\n        return getBaseValue();\r\n    }\r\n    \r\n    void setValue(int value)\r\n    {\r\n        setBaseValue(value);\r\n    }\r\n    \r\n    // Access DerivedClass\r\n    int getDerivedValue()\r\n    {\r\n        return derivedValue;\r\n    }\r\n    \r\n    void setDerivedValue(int aValue)\r\n    {\r\n        derivedValue = aValue;\r\n    }\r\n\r\nprivate:\r\n    int derivedValue;\r\n};\r\n\r\nDerivedClass::DerivedClass(int aValue)\r\n    : BaseClass(15)\r\n{\r\n    derivedValue = aValue;\r\n}\r\n\r\nDerivedClass::DerivedClass(int aValue, int aBaseValue)\r\n    : BaseClass(aBaseValue)\r\n{\r\n    derivedValue = aValue;\r\n}\r\n\r\nTEST(PrivateInheritance2, Lesson9)\r\n{\r\n    BaseClass base;\r\n    DerivedClass child(5, 35);\r\n \r\n    CHECK_EQUAL(20, base.getBaseValue());\r\n    CHECK_EQUAL(35, child.getValue());\r\n    CHECK_EQUAL(5, child.getDerivedValue());\r\n}\u003c/pre\u003e\r\n\u003cp\u003eThe private derivation will block all subsequent access to the inherited base class variables. They are not uncovered by a subsequent public derivation. See below.\u003c/p\u003e\r\n\u003cpre\u003e// Classes Derivation - Single Inheritance\r\n// Simple Inheritance - Private Derivation\r\n// followed by Public Derivation\r\n\r\nclass BaseClass\r\n{\r\npublic:\r\n    BaseClass()\r\n        : baseValue(0)\r\n    {\r\n    }\r\n    \r\n    BaseClass(int aValue)\r\n        : baseValue(aValue)\r\n    {\r\n    }\r\n\r\n    int getBaseValue() const\r\n    {\r\n        return baseValue;\r\n    }\r\n\r\nprivate:\r\n    int baseValue;\r\n};\r\n\r\nclass DerivedClass1: private BaseClass\r\n{\r\npublic:\r\n    DerivedClass1()\r\n        : derivedValue1(10)\r\n    {\r\n    }\r\n    \r\n    // Access BaseClass\r\n    int getValue() const\r\n    {\r\n        return getBaseValue();\r\n    }\r\n\r\n    int getDerivedValue1() const\r\n    {\r\n        return derivedValue1;\r\n    }\r\n    \r\nprivate:\r\n    int derivedValue1;\r\n};\r\n\r\n// baseValue is inherited privately from\r\n// DerivedClass1\r\n\r\nclass DerivedClass2 : public DerivedClass1\r\n{\r\npublic:\r\n    DerivedClass2()\r\n        : derivedValue2(20)\r\n    {\r\n    }\r\n\r\n    int getDerivedValue2() const\r\n    {\r\n        return derivedValue2;\r\n    }\r\n\r\nprivate:\r\n    int derivedValue2;\r\n};\r\n\r\nTEST(PrivateInheritance3, Lesson9)\r\n{\r\n    BaseClass base;\r\n    DerivedClass1 child1;\r\n    DerivedClass2 child2;\r\n\r\n    CHECK_EQUAL(0, base.getBaseValue());\r\n\r\n    // compile error - private derivation\r\n    // CHECK_EQUAL(1, child1.getBaseValue());\r\n\r\n    CHECK_EQUAL(10, child1.getDerivedValue1());\r\n\r\n    // BaseClass still private after 2 levels of inheritance\r\n    // CHECK_EQUAL(1, child2.getBaseValue());\r\n\r\n    CHECK_EQUAL(20, child2.getDerivedValue2());\r\n}\u003c/pre\u003e\r\n\u003ch3\u003eConsequences of Private Inheritance\u003c/h3\u003e\r\n\u003cp\u003eUnder private derivation, public and protected members of the base class are inherited as private. As with friends, sometimes there's a need for limited access to private members. C++ provides a means by which individual members can be made exempt from a private derivation. We do this using the following syntax:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData members\u003cbr\u003e\u003ccode\u003eBaseClass::data member\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFunction members\u003cbr\u003e\u003ccode\u003eBaseClass::function member\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNotice in the Example below, we do not need to give the signature or return type of the exempted function member.\u003c/p\u003e\r\n\u003cpre\u003e// Classes Derivation - Single Inheritance Example\r\n// Simple Inheritance - Private Derivation\r\n// - Exemptions from a Private Derivation\r\n\r\nusing namespace std;\r\nclass BaseClass\r\n{\r\npublic:\r\n    BaseClass()\r\n        : baseValue0(20),\r\n        baseValue1(30)\r\n    {\r\n    }\r\n        \r\n    int baseFunction() const\r\n    {\r\n        return 15;\r\n    }\r\n\r\n    int getBasevalue0() const\r\n    {\r\n        return baseValue0;\r\n    }\r\n\r\n    int getBasevalue1() const\r\n    {\r\n        return baseValue1;\r\n    }\r\n\r\nprivate:\r\n    int baseValue0;\r\n    int baseValue1;\r\n};\r\n    \r\nclass DerivedClass : private BaseClass\r\n{\r\npublic:\r\n    DerivedClass()\r\n        : derivedValue(10)\r\n    {\r\n    }\r\n\r\n    // Uncover BaseClass private members\r\n    BaseClass::getBasevalue0;\r\n    BaseClass::baseFunction;\r\n\r\n    // Access DerivedClass\r\n    int getDerivedValue() const\r\n    {\r\n        return derivedValue;\r\n    }\r\n        \r\n    void setDerivedValue(int aValue)\r\n    {\r\n        derivedValue = aValue;\r\n    }\r\n    \r\nprivate:\r\n    int derivedValue;\r\n};\r\n    \r\nTEST(PrivateInheritance4, Lesson9)\r\n{\r\n    BaseClass base;\r\n    DerivedClass child;\r\n\r\n    CHECK_EQUAL(20, base.getBasevalue0());\r\n        \r\n    // getBasevalue0 is now visible\r\n    CHECK_EQUAL(20, child.getBasevalue0());\r\n        \r\n    // We did not expose getBasevalue2 in DerivedClass\r\n    // CHECK_EQUAL(30, child.getBasevalue1());\r\n\r\n    // baseFunction can be used as well\r\n    CHECK_EQUAL(15, child.baseFunction());\r\n    CHECK_EQUAL(10, child.getDerivedValue());\r\n}\u003c/pre\u003e\r\n\u003ch4\u003eProtected Members\u003c/h4\u003e\r\n\u003cp\u003eClass members declared protected are accessible to member functions and friends of the derived class and are \u003cspan class=\"keyterm\"\u003eprivate\u003c/span\u003e to users of the class\u003c/p\u003e\r\n\u003cpre\u003e// Classes Derivation - Single Inheritance\r\n// Simple Inheritance - Protected\r\n// Members Under Derivation\r\n\r\nclass BaseClass\r\n{\r\npublic:\r\n    BaseClass()\r\n    : baseValue(0)\r\n    {\r\n    }\r\n\r\n    BaseClass(int aValue)\r\n    : baseValue(aValue)\r\n    {\r\n    }\r\n\r\nprotected:\r\n    int getBaseValue() const\r\n    {\r\n        return baseValue;\r\n    }\r\n\r\nprivate:\r\n    int baseValue;\r\n};\r\n\r\nclass DerivedClass: public BaseClass\r\n{\r\npublic:\r\n    DerivedClass()\r\n    : BaseClass(15),\r\n    derivedValue(10)\r\n    {\r\n    }\r\n \r\n    // Access BaseClass\r\n    int getValue() const\r\n    {\r\n        return getBaseValue();\r\n    }\r\n\r\nprivate:\r\n    int derivedValue;\r\n};\r\n\r\nTEST(ProtectedMembers, Lesson9)\r\n{\r\n    BaseClass base;\r\n    DerivedClass child;\r\n   \r\n    // 'BaseClass::getBaseValue' : cannot access protected member declared in class 'BaseClass'\r\n    // CHECK_EQUAL(0, child.getBaseValue());\r\n    \r\n    // 'BaseClass::getBaseValue' : cannot access protected member declared in class 'BaseClass'\r\n    // CHECK_EQUAL(15, base.getBaseValue());\r\n\r\n    CHECK_EQUAL(15, child.getValue());\r\n}\u003c/pre\u003e\r\n\u003ch3\u003eUpcasting\u003c/h3\u003e\r\n\u003cp\u003eWe will now examine the relationship between derived classes and public base classes as a prelude to introducing the concept of runtime polymorphism. Remember that a subset of the members in each derived class object are those it has inherited from its base (or bases).\u003c/p\u003e\r\n\u003cp\u003eWhen we discussed the layout of a derived class object in memory, we saw that a base class type pointer, initialized to point to the derived object, referred to the starting address of the object. Since a derived class pointer points to the same locations, it should be evident that we can use either the base class or a derived class pointer to refer to the derived class object. Conversely, we can use a derived class pointer to refer to a base class object.\u003c/p\u003e\r\n\u003cp\u003eC++ supports four such predefined (automatic) upcasts between a derived class and its public base class:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA derived class \u003cspan class=\"italics\"\u003eobject\u003c/span\u003e is implicitly upcast into a public base class object.\u003c/li\u003e\r\n\u003cli\u003eA derived class \u003cspan class=\"italics\"\u003ereference\u003c/span\u003e is implicitly upcast into a public base class reference.\u003c/li\u003e\r\n\u003cli\u003eA derived class \u003cspan class=\"italics\"\u003epointer\u003c/span\u003e is implicitly upcast into a public base class pointer.\u003c/li\u003e\r\n\u003cli\u003eA \u003cspan class=\"italics\"\u003epointer to a member of a base class\u003c/span\u003e is implicitly upcast to a pointer to that member in a publicly derived class.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAn upcast is always legal and successful. A derived class may always be used where a reference or pointer to a base class is required. E.g., an apple is always a fruit. Contrast this with the downcast. A downcast is when you have a base class pointer or reference and you want a pointer or reference to a derived class. Downcasts may or may not be successful. E.g., a fruit is not always an apple. The C++ dynamic_cast is used to downcast. You will learn about dynamic_cast later in the course. One last word about downcasts; while a downcast is sometimes present in a good design, most often the use of a downcast represents a failed design. If you find your design requires a downcast, consider changing the design so the downcast is no longer necessary.\u003c/p\u003e\r\n\u003cp\u003eIn Example below, we will illustrate each of these upcasts. Before we do, however, let's look at a picture of what we have in memory.\u003c/p\u003e\r\n\u003cp\u003eWe'll be working with a base class, \u003ccode\u003eFruit\u003c/code\u003e, with two data members, stem and seeds, and one member function , \u003ccode\u003eidentify()\u003c/code\u003e. We will publicly derive the class Apple from \u003ccode\u003eFruit\u003c/code\u003e. In the class \u003ccode\u003eApple\u003c/code\u003e, we will override the inherited \u003ccode\u003eidentify()\u003c/code\u003e function and the data member stem and we will add the data member \u003ccode\u003eskin\u003c/code\u003e. Our two classes will appear as shown in the below. Observe the layo portion of \u003ccode\u003eApple.\u003c/code\u003e\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eThe Fruit and Apple Classes\u0026gt;The Fruit and Apple Classes\u003c/span\u003e\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1177926/files/44384299/preview\" alt=\"fruit and apple classes\" width=\"228\" height=\"305\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1177926/files/44384299\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cpre\u003e// Class Derivation - Single Inheritance\r\n// Simple Inheritance - Upcasting\r\n\r\nclass Fruit\r\n{\r\npublic:\r\n    Fruit()\r\n        : myStem(1),\r\n        mySeeds(4)\r\n    {\r\n    }\r\n\r\n    Fruit(int stem, int seeds)\r\n        : myStem(stem),\r\n        mySeeds(seeds)\r\n    {\r\n    }\r\n\r\n    int getStem() const\r\n    {\r\n        return myStem;\r\n    }\r\n\r\n    virtual std::string identify() const\r\n    {\r\n        return \"Fruit\";\r\n    }\r\n    \r\nprivate:\r\n    int myStem;\r\n    int mySeeds;\r\n};\r\n\r\nclass Apple: public Fruit\r\n{\r\npublic:\r\n    Apple()\r\n    : Fruit(3, 4),\r\n    mySkin(2)\r\n    {\r\n    }\r\n\r\n    // override\r\n    std::string identify() const\r\n    {\r\n        return \"Apple\";\r\n    }\r\n\r\n    int getSkin() const\r\n    {\r\n        return mySkin;\r\n    }\r\n\r\nprivate:\r\n    int mySkin;\r\n};\r\n\r\nint getStem(const Fruit\u0026amp; fruit)\r\n{\r\n    return fruit.getStem();\r\n}\r\n\r\nint getStem(const Fruit* const fruit)\r\n{\r\n    return fruit-\u0026gt;getStem();\r\n}\r\n\r\nTEST(Upcasting, Lesson9)\r\n{\r\n    Apple a;\r\n    Fruit f;\r\n\r\n    CHECK_EQUAL(\"Apple\", a.identify());\r\n    CHECK_EQUAL(\"Fruit\", f.identify());\r\n    \r\n    // Apple instance upcast to Fruit and passed by reference.\r\n    CHECK_EQUAL(3, getStem(a));\r\n\r\n    // Apple instance upcast to Fruit and passed by pointer.\r\n    CHECK_EQUAL(3, getStem(\u0026amp;a));\r\n\r\n    // While an Apple is always a fruit, a Fruit is not always an apple. Thus\r\n    // We can not store the address of a Fruit in an Apple pointer\r\n    // Apple* aPtr = new Fruit;\r\n    \r\n    // explicit downcast - this compiles but is an error\r\n    // since this Fruit is not an apple.\r\n    Apple* aPtr = (Apple*)\u0026amp;f;\r\n    // CHECK_EQUAL(2, aPtr-\u0026gt;getSkin());\r\n\r\n    // Could use dynamic_cast for a typesafe downcast\r\n    aPtr = dynamic_cast\u0026lt;Apple*\u0026gt;(\u0026amp;f);\r\n\r\n    // f is not an apple. Thus the dynamic cast returns 0\r\n    CHECK_EQUAL(0, aPtr);\r\n\r\n    Fruit\u0026amp; f2 = a;\r\n\r\n    // f2 does refer to an apple. The downcast succeeds\r\n    aPtr = dynamic_cast\u0026lt;Apple*\u0026gt;(\u0026amp;f2);\r\n    CHECK(0 != aPtr);\r\n    CHECK_EQUAL(3, aPtr-\u0026gt;getStem());\r\n\r\n    // Declare an Apple and use an Apple pointer\r\n    aPtr = new Apple;\r\n    \r\n    // Assign the Apple pointer to a Fruit pointer\r\n    Fruit* fPtr = aPtr;\r\n    CHECK_EQUAL(\"Apple\", fPtr-\u0026gt;identify());\r\n}\u003c/pre\u003e\r\n\u003ch3\u003eOverloaded Functions with Class Type Arguments\u003c/h3\u003e\r\n\u003cp\u003eIn C++, functions can be overloaded with class type as well as built-in type arguments. Let's look at the four alternatives the compiler will consider when trying to resolve which function to invoke.\u003c/p\u003e\r\n\u003ch4\u003eOverloaded Function Call Resolution\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eExact Match\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan class=\"bold\"\u003eA class argument matches only a formal argument of its own class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eClass \u003ccode\u003eB\u003c/code\u003e is derived from class \u003ccode\u003eA\u003c/code\u003e, and we overload function \u003ccode\u003ef1\u003c/code\u003e such that the following functions are defined:\u003c/p\u003e\r\n\u003cpre\u003ef1(const A\u0026amp; a);\r\nf1(const B\u0026amp; b);\u003c/pre\u003e\r\n\u003cp\u003eNext we declare an instance of \u003ccode\u003eB\u003c/code\u003e,\u003c/p\u003e\r\n\u003cpre\u003eB b1;\u003c/pre\u003e\r\n\u003cp\u003ethen write\u003c/p\u003e\r\n\u003cpre\u003ef1(b1); // is legal and resolvable to the proper function\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eStandard Conversions\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp class=\"bold\"\u003eIf an exact match is not possible, a set of standard conversions are attempted.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cspan class=\"bold\"\u003eUpcast \u003c/span\u003e \u003cbr\u003eA derived class Object Reference Pointer is implicitly upcast to a public base class type.\u003cbr\u003eClass \u003ccode\u003eB\u003c/code\u003e is derived from class \u003ccode\u003eA\u003c/code\u003e; we overload function \u003ccode\u003ef1\u003c/code\u003e such that the functions\u003cbr\u003e\u003ccode\u003ef1(const A\u0026amp; a);\u003cbr\u003e\u003c/code\u003e\u003ccode\u003ef1(const C\u0026amp; c);\u003c/code\u003e\u003cbr\u003eare defined, and \u003ccode\u003eC\u003c/code\u003e is not in the derivation hierarchy.\u003cbr\u003eNext we declare an instance of \u003ccode\u003eB\u003c/code\u003e,\u003cbr\u003e\u003ccode\u003eB b1;\u003c/code\u003e\u003cbr\u003ethen write\u003cbr\u003e\r\n\u003cpre\u003ef1(b1); // is legal and resolvable to the proper function\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan class=\"bold\"\u003eProgrammer Defined Conversion\u003c/span\u003e \u003cbr\u003eThe programmer can supply conversions\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cspan class=\"bold\"\u003eto the class\u003c/span\u003eusing the following syntax\r\n\u003cpre\u003eoperator typeName() { body }\u003c/pre\u003e\r\n\u003cp\u003etypeName â€”type to convert to from the class\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eand \u003cspan class=\"bold\"\u003efrom the class\u003c/span\u003e(using the constructor with a single argument), with the following syntax:\r\n\u003cpre\u003eX::X(typeName arg) { body } \u003c/pre\u003e\r\n\u003cp\u003etypeName â€”type to convert from to the class\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe'll now convert to an object type (float) \u003cspan class=\"bold\"\u003efrom\u003c/span\u003e the class type (fraction). We do this by defining a conversion operator.\u003c/p\u003e\r\n\u003cpre\u003eclass Fraction\r\n{\r\npublic:\r\n    Fraction(int numerator, int denominator)\r\n    : myNumerator(numerator),\r\n    myDenominator(denominator)\r\n    {\r\n    }\r\n    \r\n    // Conversion operator - convert to float\r\n    operator float() const\r\n    {\r\n        // Note usage of another C++ style cast - the static_cast.\r\n        return static_cast(myNumerator) / static_cast(myDenominator); } private: int myNumerator; int myDenominator; }; TEST(Conversions, Lesson9) { Fraction a(1,2); // implicitly calls conversion operator we provided float b = a; CHECK_DOUBLES_EQUAL(0.5, b, 0.001); }\u003c/pre\u003e\r\n\u003cp\u003eNow we'll convert \u003cspan class=\"bold\"\u003efrom\u003c/span\u003e an object type (int) \u003cspan class=\"bold\"\u003eto\u003c/span\u003e the class type (fraction). We do this by defining a conversion constructor. We'll also overload operator*.\u003c/p\u003e\r\n\u003cpre\u003e// Classes Derivation - Single Inheritance Example\r\n// Simple Inheritance - More conversions\r\n\r\nclass Fraction\r\n{\r\npublic:\r\n    Fraction(int numerator, int denominator)\r\n    : myNumerator(numerator),\r\n    myDenominator(denominator)\r\n    {\r\n    }\r\n    \r\n    // Convert from an int to a fraction\r\n    Fraction(int number)\r\n        : myNumerator(number),\r\n        myDenominator(1)\r\n    {\r\n    }\r\n    \r\n    // Conversion operator - convert to float\r\n    operator float() const\r\n    {\r\n        // Note usage of another C++ style cast - the static_cast.\r\n        return static_cast(myNumerator) / static_cast(myDenominator); } int getNumerator() const { return myNumerator; } int getDenominator() const { return myDenominator; } // Overload the operator* Fraction operator*(const Fraction\u0026amp; f) const; private: int myNumerator; int myDenominator; }; Fraction Fraction::operator*(const Fraction\u0026amp; f) const { return Fraction(myNumerator * f.myNumerator, myDenominator * f.myDenominator); } TEST(Conversions2, Lesson9) { Fraction b(3); CHECK_EQUAL(3, b.getNumerator()); CHECK_EQUAL(1, b.getDenominator()); Fraction c(2, 3); Fraction d = Fraction(4) * c; CHECK_EQUAL(8, d.getNumerator()); CHECK_EQUAL(3, d.getDenominator()); }\u003c/pre\u003e\r\n\u003ch3\u003eCopy Constructors and Derivation\u003c/h3\u003e\r\n\u003cp\u003eThe following member functions cannot be inherited:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eassignment\u003c/li\u003e\r\n\u003cli\u003econstructor\u003c/li\u003e\r\n\u003cli\u003edestructor\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf a copy constructor is not supplied for a derived class, when a copy is necessary, the compiler creates a copy constructor for you. The default copy constructor then copies the base and member objects by calling their copy constructors and the local data members as a \u003ccode\u003ebitwise copy\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf a copy constructor is supplied, it must specify the desired copy constructors for the base and member objects and provide initializing values via the initialization list. Default calls are omitted. Syntax is as follows:\u003c/p\u003e\r\n\u003cpre\u003eDerivedClassX (const DerivedClassX\u0026amp; object): BaseClass(object)\u003c/pre\u003e\r\n\u003cpre\u003e// Classes Membership - Copy Constructors Example\r\n\r\nclass A\r\n{\r\npublic:\r\n    A(int value)\r\n        : myValue(value)\r\n    {\r\n    }\r\n\r\n    // A poor example of a copy ctor. A good copy constructor\r\n    // would copy the values from the src. But this poor one allows\r\n    // us to see the copy ctor in action in the test below.\r\n    A(const A\u0026amp; src)\r\n        : myValue(5)\r\n    {\r\n    }\r\n\r\n    // Here's a better implementation of a copy ctor. This is the\r\n    // copy ctor the compiler would generate for you if you did not\r\n    // provide one\r\n#if 0\r\n    A(const A\u0026amp; src)\r\n        : myValue(src.myValue)\r\n    {\r\n    }\r\n#endif\r\n\r\n    int getValue() const\r\n    {\r\n        return myValue;\r\n    }\r\n\r\nprivate:\r\n    int myValue;\r\n};\r\n\r\n// Pass by value - thus copy ctor called when an instance of A passed\r\nint funct(A a)\r\n{\r\n    return a.getValue();\r\n}\r\n\r\nTEST(CopyConstructor, Class)\r\n{\r\n    A a(3);\r\n\r\n    CHECK_EQUAL(3, a.getValue());\r\n\r\n    // A good copy ctor would result in the same values. We use the poor copy ctor\r\n    // to illustrate the fact it is called when a class instance is passed by value\r\n    CHECK_EQUAL(5, funct(a));\r\n}\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan class=\"bold\"\u003eHere's an example of copy constructor chaining from a derived class to a base class\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e// Classes Membership - Copy Constructors Example\r\n// Copy Constructors Under Inheritance\r\n\r\nclass A\r\n{\r\npublic:\r\n    A(int value)\r\n    : myValue(value)\r\n    {\r\n    }\r\n    \r\n    A(const A\u0026amp; a)\r\n        : myValue(5)\r\n    {\r\n    }\r\n\r\n    int getValue() const\r\n    {\r\n        return myValue;\r\n    }\r\n\r\nprivate:\r\n    int myValue;\r\n};\r\n\r\nclass B: public A\r\n{\r\npublic:\r\n    B(int value, char aChar)\r\n        : A(value), myCharacter(aChar)\r\n    {\r\n    }\r\n    \r\n    // if A(b) not explicitly given the copied value of b.value will be 1\r\n    B(B\u0026amp; b)\r\n        : A(b),\r\n        myCharacter(b.myCharacter)\r\n    {\r\n    }\r\n    \r\nprivate:\r\n    char myCharacter;\r\n};\r\n\r\n// copy of B instance passed.\r\nint getValue(B b)\r\n{\r\n    return b.getValue();\r\n}\r\n\r\nTEST(CopyConstructors, DerivedClass)\r\n{\r\n    B b(5, 'd');\r\n\r\n    // instance b is passed by value to the global function getValue. Thus the copy\r\n    // ctor is called. Verify the derived class copy ctor calls the base class copy ctor\r\n    CHECK_EQUAL(5, getValue(b));\r\n}\u003c/pre\u003e\r\n\u003ch3\u003eHiding Inherited Members\u003c/h3\u003e\r\n\u003cp\u003eIf the same identifier is used in the base and derived classes, ambiguity will result. If there is only a single derivation path, the base class identifier is considered to be masked. We can still access the inherited definition by using the scope resolution operator (i.e., className::memberName). When such a name is unqualified, the compiler tries to resolve any conflicts by selecting the identifier in the most immediate scope. For functions, it's the function in the most immediate scope for which the signatures are identical. Avoid using the same identifier in base and derived classes. It is best to avoid hiding inherited members.\u003c/p\u003e\r\n\u003cp\u003eMultiple derivation paths are more difficult. Such paths may occur in several ways as we illustrate in the figure below. We resolve the conflict by using either the scope operator or virtual functions (which we'll discuss in the next lesson).\u003c/p\u003e\r\n\u003cp class=\"title\"\u003e\u003cspan class=\"bold\"\u003eMultiple Derivation Paths\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://canvas.uw.edu/courses/1177926/files/44384253/preview\" alt=\"multiple derivation paths\" width=\"457\" height=\"301\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1177926/files/44384253\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eMultiple Base Classes\u003c/h3\u003e\r\n\u003cp\u003eWhen a derived class inherits from multiple base classes, the derivation specification is a simple extension of that for the single base class.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan class=\"bold\"\u003eSyntax\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eclass DerivedClassName : spec0 base class0, spec1 base class1, ... specn base classn,\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eDerivedClassName\u003c/code\u003e specifies the class being derived \u003cbr\u003e\u003ccode\u003especification\u003c/code\u003e specifies access to the base class members:\u003c/p\u003e\r\n\u003cpre\u003e public protected private\u003c/pre\u003e\r\n\u003cp\u003eLet class \u003ccode\u003eA\u003c/code\u003e be derived from base classes \u003ccode\u003eB\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, and \u003ccode\u003eD\u003c/code\u003e as follows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eB\u003c/code\u003e public\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e private\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe can write any of the three specifications:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003ccode\u003eclass A : public B, private C, D \u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eclass A : private C, public B, private D \u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eclass A : C, D, public B \u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eRemember that like the access specification, the derivation specification is private by default.\u003c/p\u003e\r\n\u003ch4\u003eInherited Member Initialization\u003c/h4\u003e\r\n\u003cp\u003eThe initialization of members inherited from multiple base classes is similar to that for a single base class.\u003c/p\u003e\r\n\u003cp\u003eIf the base class\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ehas only a default constructor, then we should initialize the member values in the body of the derived class constructor; or\u003c/li\u003e\r\n\u003cli\u003ehas a constructor with arguments, the initialization list is used to pass arguments to the base class constructors.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe write the derived class constructor using the following syntax:\u003c/p\u003e\r\n\u003cpre\u003eDerivedClass(dCl args):BC0(bC0 args), BC1(bC1 args),...BCn(bCn args), { DerivedClass constructor body }\u003c/pre\u003e\r\n\u003cp\u003eThe set of derived class constructor arguments may contain initialization values for the base class arguments. We need not provide initializing values if the base class has no constructor or if it has only a default constructor. The base class initializer can be any legal initializer for an object.\u003c/p\u003e\r\n\u003cp\u003eWhen an instance of a derived class is created, the invocation of the base class constructors proceeds left to right (as specified on the init list) and depth first.\u003cbr\u003eLet's specify the following derivation,\u003c/p\u003e\r\n\u003cpre\u003eclass D1 : public B1, public B2 class B1 class B2 b11 b21 b12 b22 b13\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eB1::b12\u003c/code\u003e is a programmer defined type, \u003ccode\u003eC1\u003c/code\u003e. \u003cbr\u003e\u003ccode\u003eC1\u003c/code\u003e is derived from BC1.\u003c/p\u003e\r\n\u003cp\u003eInitialization proceeds as\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eclass B1\r\n\u003cul\u003e\r\n\u003cli\u003eb11\u003c/li\u003e\r\n\u003cli\u003eb12\r\n\u003cul\u003e\r\n\u003cli\u003eclass C1\r\n\u003cul\u003e\r\n\u003cli\u003eclass BC1\r\n\u003cul\u003e\r\n\u003cli\u003ebc11\u003c/li\u003e\r\n\u003cli\u003ebc12\u003c/li\u003e\r\n\u003cli\u003e....\u003c/li\u003e\r\n\u003cli\u003ebc1n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ec11\u003c/li\u003e\r\n\u003cli\u003ec12\u003c/li\u003e\r\n\u003cli\u003e...\u003c/li\u003e\r\n\u003cli\u003ec1m\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eb13\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eclass B2\r\n\u003cul\u003e\r\n\u003cli\u003eb21\u003c/li\u003e\r\n\u003cli\u003eb22\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eclass D1\r\n\u003cul\u003e\r\n\u003cli\u003ed11\u003c/li\u003e\r\n\u003cli\u003ed12\u003c/li\u003e\r\n\u003cli\u003e...\u003c/li\u003e\r\n\u003cli\u003ed1p\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eDestruction occurs in the reverse order.\u003c/p\u003e\r\n\u003ch3\u003eSummary\u003c/h3\u003e\r\n\u003cp\u003eIn this lesson, we continued our look at class derivation. As a first step, we studied protected and private derivations and learned some of the reasons why such a derivation may be used. Next, we examined type conversion under derivation and overloaded functions with class type arguments. We concluded with a brief look at multiple inheritance.\u003c/p\u003e\r\n\u003ch3\u003ePractice Questions\u003c/h3\u003e\r\n\u003cp\u003eTest your understanding of the concepts in Lesson 9 by working through the following practice questions, then check your answers with \u003ca id=\"\" class=\"\" title=\"Answers to Practice Questions for Lesson 9\" href=\"https://canvas.uw.edu/courses/1177926/pages/answers-to-practice-questions-for-lesson-9\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1177926/pages/answers-to-practice-questions-for-lesson-9\" data-api-returntype=\"Page\"\u003eAnswers to Practice Questions for Lesson 9\u003c/a\u003e.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWhy do we use protected inheritance?\u003c/li\u003e\r\n\u003cli\u003eWhy do we use private inheritance?\u003c/li\u003e\r\n\u003cli\u003eWhat are the four standard upcasts under derivation?\u003c/li\u003e\r\n\u003cli\u003eCan functions be overloaded with class type arguments?\u003c/li\u003e\r\n\u003cli\u003eCan copy constructors be inherited?\u003c/li\u003e\r\n\u003cli\u003eIf there is a name conflict with an identifier inherited from multiple base classes? How is it resolved?\u003c/li\u003e\r\n\u003c/ol\u003e"},"WIKI_PAGE_REVISION":"2","WIKI_PAGE_SHOW_PATH":"/courses/1177926/pages/lesson-9","WIKI_PAGE_EDIT_PATH":"/courses/1177926/pages/lesson-9/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1177926/pages/lesson-9/revisions","COURSE_ID":"1177926","MODULES_PATH":"/courses/1177926/modules","wiki_page_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"STUDENT_PLANNER_ENABLED":true,"badge_counts":{"submissions":0},"notices":[]};
</script>

<script src="./Lesson 9_files/navigation_header.bundle-549b1681b9.js" defer="defer"></script>
<script src="./Lesson 9_files/default.js" defer="defer"></script>
<script src="./Lesson 9_files/custom.js" defer="defer"></script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;"></div></body></html>